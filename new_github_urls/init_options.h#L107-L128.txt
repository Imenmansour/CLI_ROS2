skip to content you signed in with another tab or window. reload to refresh your session. you signed out in another tab or window. reload to refresh your session. you switched accounts on another tab or window. reload to refresh your session. dismiss alert ros2 / rcl public notifications you must be signed in to change notification settings fork 162 star 128 files 657d9e8 / init_options.h blame blame latest commit history history 159 lines (146 loc)  5.03 kb 657d9e8 / init_options.h top file metadata and controls code blame 159 lines (146 loc)  5.03 kb raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 //  2018 open source robotics foundation, inc. // // licensed under the apache license, version 2.0 (the "license"); // you may not use this file except in compliance with the license. // you may obtain a copy of the license at // // http://www.apache.org/licenses/license-2.0 // // unless required by applicable law or agreed to in writing, software // distributed under the license is distributed on an "as is" basis, // without warranties or conditions of any kind, either express or implied. // see the license for the specific language governing permissions and // limitations under the license. #ifndef rcl__init_options_h_ #define rcl__init_options_h_ #ifdef __cplusplus extern "c" { #endif #include "rmw/init.h" #include "rcl/allocator.h" #include "rcl/macros.h" #include "rcl/types.h" #include "rcl/visibility_control.h" struct rcl_init_options_impl_t ; /// encapsulation of init options and implementation defined init options. typedef struct rcl_init_options_t { /// implementation specific pointer. struct rcl_init_options_impl_t * impl ; } rcl_init_options_t ; /// return a zero initialized rcl_init_options_t struct. rcl_public rcl_warn_unused rcl_init_options_t rcl_get_zero_initialized_init_options ( void ); /// initialize given init_options with the default values and implementation specific values. /** * the given allocator is used, if required, during setup of the init options, * but is also used during initialization. * * in either case the given allocator is stored in the returned init options. * * the `impl` pointer should not be changed manually. * * <hr> * attribute | adherence * ------------------ | ------------- * allocates memory | yes * thread-safe | no * uses atomics | yes * lock-free | yes * * \param[inout] init_options object to be setup * \param[in] allocator to be used during setup and during initialization * \return `rcl_ret_ok` if setup is successful, or * \return `rcl_ret_already_init` if init_options has already be initialized, or * \return `rcl_ret_invalid_argument` if any arguments are invalid, or * \return `rcl_ret_bad_alloc` if allocating memory failed, or * \return `rcl_ret_error` if an unspecified error occurs. */ rcl_public rcl_warn_unused rcl_ret_t rcl_init_options_init ( rcl_init_options_t * init_options , rcl_allocator_t allocator ); /// copy the given source init_options to the destination init_options. /** * the allocator from the source is used for any allocations and stored in the * destination. * * the destination should either be zero initialized with * `rcl_get_zero_initialized_init_options()` or should have had * `rcl_init_options_fini()` called on it. * giving an already initialized init options for the destination will result * in a failure with return code `rcl_ret_already_init`. * * <hr> * attribute | adherence * ------------------ | ------------- * allocates memory | yes * thread-safe | no * uses atomics | yes * lock-free | yes * * \param[in] src rcl_init_options_t object to be copied from * \param[out] dst rcl_init_options_t object to be copied into * \return `rcl_ret_ok` if the copy is successful, or * \return `rcl_ret_already_init` if the dst has already be initialized, or * \return `rcl_ret_invalid_argument` if any arguments are invalid, or * \return `rcl_ret_bad_alloc` if allocating memory failed, or * \return `rcl_ret_error` if an unspecified error occurs. */ rcl_public rcl_warn_unused rcl_ret_t rcl_init_options_copy ( const rcl_init_options_t * src , rcl_init_options_t * dst ); /// finalize the given init_options. /** * the given init_options must be non-`null` and valid, i.e. had * `rcl_init_options_init()` called on it but not this function yet. * * <hr> * attribute | adherence * ------------------ | ------------- * allocates memory | yes * thread-safe | no * uses atomics | yes * lock-free | yes * * \param[inout] init_options object to be setup * \return `rcl_ret_ok` if setup is successful, or * \return `rcl_ret_invalid_argument` if any arguments are invalid, or * \return `rcl_ret_error` if an unspecified error occurs. */ rcl_public rcl_warn_unused rcl_ret_t rcl_init_options_fini ( rcl_init_options_t * init_options ); /// return the rmw init options which are stored internally. /** * this function can fail and return `null` if: * - init_options is null * - init_options is invalid, e.g. init_options->impl is null * * if null is returned an error message will have been set. * * <hr> * attribute | adherence * ------------------ | ------------- * allocates memory | no * thread-safe | no * uses atomics | yes * lock-free | yes * * \param[in] init_options object from which the rmw init options should be retrieved * \return pointer to the the rmw init options, or * \return `null` if there was an error */ rcl_public rcl_warn_unused rmw_init_options_t * rcl_init_options_get_rmw_init_options ( rcl_init_options_t * init_options ); #ifdef __cplusplus } #endif #endif // rcl__init_options_h_ you cant perform that action at this time.