skip to content you signed in with another tab or window. reload to refresh your session. you signed out in another tab or window. reload to refresh your session. you switched accounts on another tab or window. reload to refresh your session. dismiss alert ros2 / rosidl_dynamic_typesupport public notifications you must be signed in to change notification settings fork 3 star 2 new issue have a question  this project?  for a free github account to open an issue and  its maintainers and the community.  for github by clicking  for github, you agree to our  of service and  statement . well occasionally send you account related s. already on github?  to your account jump to bottom fix uchar.h / char16_t detection/handling (fix #8) #10 merged clalancette merged 1 commit into ros2 : rolling from gavanderhoorn : patch-1 aug 29, 2023 merged fix uchar.h / char16_t detection/handling (fix #8) #10 clalancette merged 1 commit into ros2 : rolling from gavanderhoorn : patch-1 aug 29, 2023 conversation copy link contributor gavanderhoorn commented aug 29, 2023 fix incorrect check: if __has_include(..) was supported, but uchar.h did not exist, char16_t never got typedef ed with the changes to the conditionals made by #8 . it needs to be typedef ed in (at least) two cases: uchar.h does not exist, and __has_include(..) is not supported in case of the former, the type is most likely missing. in case of the latter, uchar.h could exist, but existence can't be checked, so the code is conservative and just typedef s char16_t itself. sorry, something went wrong. all reactions copy link contributor author gavanderhoorn commented aug 29, 2023 @pas9 : i believe this should work for the compilers/build envs you're using/supporting. apologies for breaking things with #8 . all reactions sorry, something went wrong. gavanderhoorn mentioned this pull request aug 29, 2023 uchar: use __has_include(..) on separate line #8 merged gavanderhoorn force-pushed the patch-1 branch from 99b4c1a to 083643d compare august 29, 2023 12:54 gavanderhoorn mentioned this pull request aug 29, 2023 uchar: use __has_include(..) on separate line (backport #8) #9 merged uchar: fix conditional include/typedef  9c8cbba fix incorrect check: if `__has_include(..)` was supported, but `uchar.h` did not exist, `char16_t` never got `typedef`ed. it needs to be `typedef`ed in (at least) two cases: 1. `uchar.h` does not exist, and 2. `__has_include(..)` is not supported in case of the former, the type is most likely missing. in case of the latter, `uchar.h` could exist, but existence can't be checked. note: checking for `__has_include(..)` support and use of the macro in a combined conditional is non-portable according to the documentation, hence the split. gavanderhoorn force-pushed the patch-1 branch from 083643d to 9c8cbba compare august 29, 2023 12:58 copy link atticusrussell commented aug 29, 2023 it would be great to get this merged - bug from #8 currently breaks ci in a project. linorobot/linorobot2_hardware#62 all reactions sorry, something went wrong. atticusrussell mentioned this pull request aug 29, 2023 rolling branch firmware build error linorobot/linorobot2_hardware#62 closed clalancette approved these changes aug 29, 2023 view reviewed changes copy link contributor clalancette left a comment there was a problem hiding this comment. choose a reason for hiding this comment the reason will be displayed to describe this comment to others. learn more . choose a reason spam abuse off topic outdated duplicate resolved hide comment looks ok to me. let's run ci on it again. sorry, something went wrong. all reactions copy link contributor clalancette commented aug 29, 2023 ci: linux linux-aarch64 windows all reactions sorry, something went wrong. copy link contributor clalancette commented aug 29, 2023 all right, ci is green. i'm going to go ahead and merge this, but i'm going to hold off on attempting a backport to see if we get any other reports (positive or negative)  this change. all reactions sorry, something went wrong. hide details view details clalancette merged commit 917e764 into ros2 : rolling aug 29, 2023 2 checks passed copy link member pas9 commented aug 30, 2023 i cannot launch a new nightly from my mobile, so i relaunch yesterday's: https://github.com/micro-ros/micro_ros_setup/actions/runs/6007791161 if this is green, i'm ok with the backport. btw: i will check code in detail next week but, is there a real need of using char16_t? why not using the wide supported uint16_t? all reactions sorry, something went wrong. copy link contributor author gavanderhoorn commented aug 30, 2023  edited loading @pas9 : jobs seem to all have succeeded. the just finished nightly build also seems to be green. i will check code in detail next week but, is there a real need of using char16_t? why not using the wide supported uint16_t? tbh i don't know. i was just 'here' to fix a build issue. edit: looks like char16_t is used for widestring support ( here fi). char16_t makes sense i guess. all reactions sorry, something went wrong. gavanderhoorn deleted the patch-1 branch august 30, 2023 05:19 copy link contributor clalancette commented aug 30, 2023 btw: i will check code in detail next week but, is there a real need of using char16_t? why not using the wide supported uint16_t? because we are using this for handling wstring, which is explicitly char16_t. my understanding is that char16_t may or may not be equivalent to uint16_t, e.g. it might be signed depending on the platform. all reactions sorry, something went wrong. copy link member pas9 commented aug 30, 2023  edited loading in that case it makes sense... we just need to be a bit careful  the conditional includes. thanks a lot for taking care of this @gavanderhoorn @clalancette . as ci is green for micro-ros in rolling, for me it is ok to backport to iron.  1 gavanderhoorn reacted with thumbs up emoji all reactions  1 reaction sorry, something went wrong. copy link contributor author gavanderhoorn commented aug 30, 2023 [..] for me it is ok to backport to iron. i would very much appreciate a backport indeed. all reactions sorry, something went wrong. copy link contributor author gavanderhoorn commented sep 8, 2023  edited loading [..] i'm going to hold off on attempting a backport to see if we get any other reports (positive or negative)  this change. seeing as it's been a week without any additional reports: could this be backported to iron ? all reactions sorry, something went wrong. clalancette pushed a commit that referenced this pull request sep 13, 2023 uchar: fix conditional include/typedef ( #10 )  6e3ff9f fix incorrect check: if `__has_include(..)` was supported, but `uchar.h` did not exist, `char16_t` never got `typedef`ed. it needs to be `typedef`ed in (at least) two cases: 1. `uchar.h` does not exist, and 2. `__has_include(..)` is not supported in case of the former, the type is most likely missing. in case of the latter, `uchar.h` could exist, but existence can't be checked. note: checking for `__has_include(..)` support and use of the macro in a combined conditional is non-portable according to the documentation, hence the split. clalancette pushed a commit that referenced this pull request sep 14, 2023 uchar: use __has_include(..) on separate line (backport #8 ) ( #9 )  58e39fd * uchar: use __has_include(..) on separate line ( #8 ) older compilers/preprocessors don't always support/implement short-circuit conditional evaluation, leading to attempts to evaluate `__has_include(..)` while `if defined(__has_include)` was actually `false`. split the conditional into two separate checks to avoid this. (cherry picked from commit 88e2d7d ) * uchar: fix conditional include/typedef ( #10 ) fix incorrect check: if `__has_include(..)` was supported, but `uchar.h` did not exist, `char16_t` never got `typedef`ed. it needs to be `typedef`ed in (at least) two cases: 1. `uchar.h` does not exist, and 2. `__has_include(..)` is not supported in case of the former, the type is most likely missing. in case of the latter, `uchar.h` could exist, but existence can't be checked. note: checking for `__has_include(..)` support and use of the macro in a combined conditional is non-portable according to the documentation, hence the split. --------- co-authored-by: g.a. vd. hoorn <g.a.vanderhoorn@tudelft.nl>  for free to join this conversation on github . already have an account?  to comment reviewers clalancette clalancette approved these changes assignees no one assigned labels none yet projects none yet milestone no milestone development successfully merging this pull request may close these issues. 4 participants add this suggestion to a batch that can be applied as a single commit. this suggestion is invalid because no changes were made to the code. suggestions cannot be applied while the pull request is closed. suggestions cannot be applied while viewing a subset of changes. only one suggestion per line can be applied in a batch. add this suggestion to a batch that can be applied as a single commit. applying suggestions on deleted lines is not supported. you must change the existing code in this line in order to create a valid suggestion. outdated suggestions cannot be applied. this suggestion has been applied or marked resolved. suggestions cannot be applied from pending reviews. suggestions cannot be applied on multi-line comments. suggestions cannot be applied while the pull request is queued to merge. suggestion cannot be applied right now.  check back later. you cant perform that action at this time.