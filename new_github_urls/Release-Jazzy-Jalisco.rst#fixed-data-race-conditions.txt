skip to content you signed in with another tab or window. reload to refresh your session. you signed out in another tab or window. reload to refresh your session. you switched accounts on another tab or window. reload to refresh your session. dismiss alert ros2 / ros2_documentation public notifications you must be signed in to change notification settings fork 1.1k star 531 files jazzy / release-jazzy-jalisco.rst blame blame latest commit history history 673 lines (418 loc)  24.3 kb jazzy / release-jazzy-jalisco.rst top file metadata and controls preview code blame 673 lines (418 loc)  24.3 kb raw jazzy jalisco ( jazzy ) .. toctree:: :hidden: jazzy-jalisco-complete-changelog table of contents supported platforms installation changes to how ros 2 and gazebo integrate new features in this ros 2 release common_interfaces image_transport message_filters rcl rclcpp rclpy ros2cli ros2action rosbag2 rosidl rviz2 rcpputils rcutils changes since the iron release common_interfaces geometry2 rcl rclcpp rclcpp_action rclcpp_lifecycle rclpy rosbag2 rqt_bag development progress known issues release timeline jazzy jalisco is the tenth release of ros 2. what follows is highlights of the important changes and features in jazzy jalisco since the last release. for a list of all of the changes since iron, see the :doc:`long form changelog <jazzy-jalisco-complete-changelog>` supported platforms jazzy jalisco is primarily supported on the following platforms: tier 1 platforms: ubuntu 24.04 (noble): amd64 and arm64 windows 10 (visual studio 2019): amd64 tier 2 platforms: rhel 9: amd64 tier 3 platforms: macos: amd64 debian bookworm: amd64 for more information  rmw implementations, compiler / interpreter versions, and system dependency versions see rep 2000 . installation install jazzy jalisco changes to how ros 2 and gazebo integrate starting with jazzy jalisco, we are streamlining how ros 2 and gazebo integrate. for every ros 2 release, there will be a recommended, supported gazebo release that goes along with that release. for jazzy jalisco, the recommended gazebo release will be harmonic. to make it easier for ros 2 packages to consume gazebo packages, there are now gz_*_vendor packages. those packages are: gz_common_vendor: https://github.com/gazebo-release/gz_common_vendor gz_cmake_vendor: https://github.com/gazebo-release/gz_cmake_vendor gz_math_vendor: https://github.com/gazebo-release/gz_math_vendor gz_transport_vendor: https://github.com/gazebo-release/gz_transport_vendor gz_sensor_vendor: https://github.com/gazebo-release/gz_sensor_vendor gz_sim_vendor: https://github.com/gazebo-release/gz_sim_vendor gz_tools_vendor: https://github.com/gazebo-release/gz_tools_vendor gz_utils_vendor: https://github.com/gazebo-release/gz_utils_vendor sdformat_vendor: https://github.com/gazebo-release/sdformat_vendor ros 2 packages can use the functionality in these packages by adding dependencies in package.xml , e.g.: <depend>gz_math_vendor</depend> and then using them in cmakelists.txt , e.g.: find_package(gz_math_vendor required) find_package(gz-math) add_executable(my_executable src/exe.cpp) target_link_libraries(my_executable gz-math::core) note it will still be possible to use alternate gazebo versions with jazzy jalisco. but those will not be as well tested or integrated with ros 2. see https://gazebosim.org/docs/harmonic/ros_installation for more information. new features in this ros 2 release common_interfaces new velocitystamped message added a new message with all fields needed to define a velocity and transform it. see ros2/common_interfaces#240 for more details. adds arrow_strip to marker.msg added new type of marker, arrow_strip , to marker.msg. see ros2/common_interfaces#242 for more details. image_transport support lazy subscribers see ros-perception/image_common#272 for more details. expose option to set callback groups see ros-perception/image_common#274 for more details. enable allow list added parameter so users can selectively disable image_transport plugins at runtime. see ros-perception/image_common#264 for more details. advertise and subscribe with custom qos allow users to pass in a custom quality-of-service when creating image_transport publishers and subscribers. see ros-perception/image_common#288 for more detatils. added rclcpp component to republish users can now start the image_transport republisher node as an rclcpp_component. see ros-perception/image_common#275 for more details. message_filters typeadapters support allows users to use type adaptation within message_filters. see ros2/message_filters#96 for more information. rcl add get type description service implements the ~/get_type_description service which allows external users to get descriptions of each type that a node offers. this is offered by each node according to rep 2016 . see ros2/rcl#1052 for more details. rclcpp type support helper for services new type support helper for services rclcpp::get_service_typesupport_handle is added to extract service type support handle. see ros2/rclcpp#2209 for more details. rclpy parametereventhandler new class parametereventhandler allows us to monitor and respond changes to parameters via parameter events. see ros2/rclpy#1135 for more details. ros2cli added a --log-file-name command line argument it is now possible to use --log-file-name command line argument to specify the log file name prefix. ros2 run demo_nodes_cpp talker --ros-args --log-file-name filename see ros2/ros2cli#856 for more information. added qos to  options a user-settable qos parameter was added to the topicstatisticsoptions , which allows the statistics to have a different qos from the  itself. see ros2/rclcpp#2323 for more details. add clients and services count it is now possible to get the number of clients created by a service. ros2action type sub-command supported it is now possible to use the type sub-command to check the action type. ros2 action type /fibonacci action_tutorials_interfaces/action/fibonacci see ros2/ros2cli#894 for more information. rosbag2 service recording and playback it is now possible to record and play service data with the ros2bag command line interface. this features builds on service introspection , which has been available since iron irwini. service recording and display adds the ability to record service data into a bag file. and service playback can play that service data from the bag file. record all services data: ros2 bag record --all-services record all services and all topic data: ros2 bag record --all play service data from bag file: ros2 bag play --publish-service-requests bag_path see the design document for more information. new filter modes it is now possible to filter by topic type. ros2 bag record --topic_types sensor_msgs/msg/image sensor_msgs/msg/camerainfo ros2 bag record --topic_types sensor_msgs/msg/image see more details ros2/rosbag2#1577 and ros2/rosbag2#1582 . player and recorder are now exposed as rclcpp components this allows a "zero-copy" when using intra-process communication during data record or reply. this can significantly reduce cpu load during recording or reply when dealing with high-bandwidth data streams and will help to avoid data loss in the transport layer. it also provides the ability to use yaml configuration files for rosbag2_transport::player and rosbag2_transport::recorder composable nodes. see https://github.com/ros2/rosbag2/tree/jazzy?tab=readme-ov-file#using-with-composition for more details. added option to disable recorder keyboard controls see ros2/rosbag2#1607 for more details. use middleware send and receive timestamps from message_info during recording where available, rosbag2 now uses the send and receive timestamps as provided by the middleware. these timestamps are more indicative of when the data was actually sent and received, respectively. note that saving the timestamp into a bag is currently only supported for mcap files (the default). see ros2/rosbag2#1531 for more details. added compression threads priority to record options it is now possible to specify the priority of the thread that performs compression. see ros2/rosbag2#1457 for more details. added ability to split already existing ros2 bags by time added start_time_ns and end_time_ns to the storageoptions to exclude messages not in [start_time;end_time] during the ros2 bag convert operation. see ros2/rosbag2#1455 for more details. store serialized metadata in bag files directly rosbag2 has always stored metadata in the metadata.yaml file associated with a bag file. now the metadata is also stored in each bag file, once when opening the file and a second time when closing the written bag file. this allows bag files to be self-contained, and used without the metadata.yaml file in the rosbag2 player or third-party applications. ros2 bag reindex can still be used to restore the metadata.yaml file, if desired. store ros_distro name in the metadata see ros2/rosbag2#1241 for more details. added introspection qos methods to python bindings it is now possible to instrospect qos setting from python bindings. see ros2/rosbag2#1648 for more details. rosidl added interfaces to support key annotation the key annotation allows indicating that a data member is part of the key, which can have zero or more key fields and can be applied to structure fields of various types. see ros2/rosidl#796 and ros2/rosidl_typesupport_fastrtps#116 for more details. rviz2 added regex filter field for tf display when there are many frames on /tf it can be hard to properly visualize them in rviz, especially if frames overlap. the usual solution to this is to enable and disable desired frames in frames field of the tf display. now it is possible to filter frames using regular expressions. see ros2/rviz#1032 for more details. append measured  frequency to topic status it is possible to visualize hz in the topic status widget. see ros2/rviz#1113 for more details. reset functionality it is possible to reset time using a new service or using the keyboard shortcut r . see ros2/rviz#1109 and ros2/rviz#1088 for more details. added support for point_cloud_transport it is possible to subscribe to point clouds using the point_cloud_transport package. see ros2/rviz#1008 for more details. feature parity with rviz for ros it is possible to use the same plugins available in the ros 1 version. depthcloud accelstamped twiststamped wrenchstamped effort camera info display it is possible to visualize camerainfo messages in the 3d scene. see ros2/rviz#1166 for more details. rcpputils added tl_expected std::expected is c++23 feature, which is not yet supported in ros 2. however, it is possible to use tl::expected from rcpputils via a backported implementation. see ros2/rcpputils#185 for more details. rcutils add human readable date to logging formats it is now possible to output dates in a human readable format when using console logging by using the {date_time_with_ms} token in the rcutils_console_output_format environment variable. see ros2/rcutils#441 for more details. changes since the iron release common_interfaces added ids to geometry_msgs/polygon and polygonstamped polygons are often used to represent specific objects but are difficult to rectify currently without any kind of specific identification. this feature adds an id field to disambiguate polygons. see ros2/common_interfaces#232 for more details. geometry2 removed deprecated headers in humble, the headers: tf2_bullet/tf2_bullet.h , tf2_eigen/tf2_eigen.h , tf2_geometry_msgs/tf2_geometry_msgs.h , tf2_kdl/tf2_kdl.h , tf2_sensor_msgs/tf2_sensor_msgs.h were deprecated in favor of: tf2_bullet/tf2_bullet.hpp , tf2_eigen/tf2_eigen.hpp , tf2_geometry_msgs/tf2_geometry_msgs.hpp , tf2_kdl/tf2_kdl.hpp , tf2_sensor_msgs/tf2_sensor_msgs.hpp in jazzy, the tf2_bullet/tf2_bullet.h , tf2_eigen/tf2_eigen.h , tf2_geometry_msgs/tf2_geometry_msgs.h , tf2_kdl/tf2_kdl.h , tf2_sensor_msgs/tf2_sensor_msgs.h headers have been completely removed. changed return types of wait_for_transform_async and wait_for_transform_full_async previously wait_for_transform_async and wait_for_transform_full_async of the buffer class returned a future containing true or false in jazzy, the future will contain the information of the transform being waited on. enabled twist interpolator included new api to lookup the velocity of the moving frame in the reference frame. see ros2/geometry2#646 for more information. rcl actual and expected call time when timer is called new timer api rcl_timer_call_with_info is added to collect actual and expected call time when the timer is called. this allows users to get the timer information when the timer is expected to be called and actual time that timer is called. see ros2/rcl#1113 for more details. improved rcl_wait in the area of timeout computation and spurious wakeups added special handling for timers with a clock that has time override enabled. for these timer we should not compute a timeout, as the waitset is woken up by the associated guard condition. see ros2/rcl#1146 for more details. rclcpp fixed data race conditions fixed data race conditions in executors. see ros2/rclcpp#2500 for more details. utilize rclcpp::waitset as part of the executors improve the number of rcl_wait_set creations and deletions by making the default single/multithreaded executors work like the static single threaded executor in  of entity collection rebuilding. see ros2/rclcpp#2142 for more details. due to this change, callbacks in the executor are no longer ordered consistently, even within the same entity. see ros2/rclcpp#2532 for more details. rclcpp::get_typesupport_handle is deprecated the rclcpp::get_typesupport_handle that extracts message type support handle is deprecated, and will be removed in a future release. instead, rclcpp::get_message_typesupport_handle should be used. see ros2/rclcpp#2209 for more details. deprecated rclcpp/qos_event.hpp header was removed in iron, the header rclcpp/qos_event.hpp was deprecated in favor of rclcpp/event_handler.hpp . in jazzy, the rclcpp/qos_event.hpp header has been completely removed. deprecated  callback signatures were removed back in humble,  signatures of the form void callback(std::shared_ptr<messaget>) and void callback(std::shared_ptr<messaget>, const rclcpp::messageinfo &) were deprecated. in jazzy, these  signatures have been removed. users should switch to using void callback(std::shared_ptr<const messaget>) or void callback(std::shared_ptr<const messaget>, const rclcpp messageinfo &) . actual and expected call time when timer is called rclcpp::timerinfo argument is added to the timer callback to collect actual and expected call time when the timer is called. this allows users to get the timer information when the timer is expected to be called and actual time that timer is called. see ros2/rclcpp#2343 for more details. rclcpp_action callback after cancel added a function to stop callbacks of a goal handle after it has gone out of scope. this function allows us to drop the handle in a locked context. see ros2/rclcpp#2281 for more details. rclcpp_lifecycle add new node interface typedescriptionsinterface add new node interface typedescriptionsinterface to provide the gettypedescription service. see ros2/rclcpp#2224 for more details. rclpy rclpy.node.node.declare_parameter the rclpy.node.node.declare_parameter does not allow statically typing parameter without a default value. see ros2/rclpy#1216 for more details. added types to method arguments added type checking to improve the experience for anyone using static type checking. see ros2/rclcpp#2224 , ros2/rclpy#1240 , ros2/rclpy#1237 , ros2/rclpy#1231 , ros2/rclpy#1241 , and ros2/rclpy#1233 . rosbag2 rename of the --exclude cli option the --exclude cli option was renamed to the --exclude-regex to better reflect what it does. see ros2/rosbag2#1480 for more information. changes in representation of the offered_qos_profiles enum values are now used for offered_qos_profiles in the code, in human-readable string values for qos settings in the metadata, and in the overriding qos profile yaml files. see https://github.com/ros2/rosbag2/tree/jazzy?tab=readme-ov-file#overriding-qos-profiles for an example. added node name to the read and write bag split event messages see ros2/rosbag2#1609 for more details. added bagsplitinfo service call on bag close see ros2/rosbag2#1422 for more details. resolved multiple issues related to the handling sigint and sigterm signals in rosbag2 see ros2/rosbag2#1557 , ros2/rosbag2#1301 and ros2/rosbag2#1464 for more details. added topic_id returned by storage to the topicmetadata see ros2/rosbag2#1538 for more details. added python bindings for compressionoptions and compressionmode structures see ros2/rosbag2#1425 for more details. improve performance in sqlitestorage::get_bagfile_size() this minimizes the probability of losing messages during bag split operation when recording with the sqlite3 storage plugin. see ros2/rosbag2#1516 for more details. rqt_bag improved performance and updated rosbag api there are some breaking changes in the rosbag2 api and ubuntu noble library versions that required some changes to rqt_bag . see ros-visualization/rqt_bag#156 for more details. development progress for progress on the development of jazzy jalisco, see this project board . for the broad process followed by jazzy jalisco, see the :doc:`process description page <release-process>` . known issues to come. release timeline november, 2023 - platform decisions rep 2000 is updated with the target platforms and major dependency versions. by january, 2024 - rolling platform shift build farm is updated with the new platform versions and dependency versions for jazzy jalisco. mon. april 8, 2024 - alpha + rmw freeze preliminary testing and stabilization of ros base [1] packages, and api and feature freeze for rmw provider packages. mon. april 15, 2024 - freeze api and feature freeze for ros base [1] packages in rolling ridley. only bug fix releases should be made after this point. new packages can be released independently. mon. april 22, 2024 - branch branch from rolling ridley. rosdistro is reopened for rolling prs for ros base [1] packages. jazzy development shifts from ros-rolling-* packages to ros-jazzy-* packages. mon. april 29, 2024 - beta updated releases of ros desktop [2] packages available. call for general testing. wed, may 1, 2024 - kick off of tutorial party tutorials hosted at https://github.com/osrf/ros2_test_cases are open for community testing. mon. may 13, 2024 - release candidate release candidate packages are built. updated releases of ros desktop [2] packages available. mon. may 20, 2024 - distro freeze freeze all jazzy branches on all ros 2 desktop packages and rosdistro . no pull requests for any jazzy branch or targeting jazzy/distribution.yaml in rosdistro repo will be merged. thu. may 23, 2024 - general availability release announcement. ros 2 desktop packages source freeze is lifted and rosdistro is reopened for jazzy pull requests. [1] ( 1 , 2 , 3 ) the ros_base variant is described in rep 2001 (ros-base) . [2] ( 1 , 2 ) the desktop variant is described in rep 2001 (desktop-variants) . you cant perform that action at this time.