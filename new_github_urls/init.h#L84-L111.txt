skip to content you signed in with another tab or window. reload to refresh your session. you signed out in another tab or window. reload to refresh your session. you switched accounts on another tab or window. reload to refresh your session. dismiss alert ros2 / rcl public notifications you must be signed in to change notification settings fork 162 star 128 files 657d9e8 / init.h blame blame latest commit history history 117 lines (110 loc)  4.11 kb 657d9e8 / init.h top file metadata and controls code blame 117 lines (110 loc)  4.11 kb raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 //  2014 open source robotics foundation, inc. // // licensed under the apache license, version 2.0 (the "license"); // you may not use this file except in compliance with the license. // you may obtain a copy of the license at // // http://www.apache.org/licenses/license-2.0 // // unless required by applicable law or agreed to in writing, software // distributed under the license is distributed on an "as is" basis, // without warranties or conditions of any kind, either express or implied. // see the license for the specific language governing permissions and // limitations under the license. #ifndef rcl__init_h_ #define rcl__init_h_ #ifdef __cplusplus extern "c" { #endif #include "rcl/allocator.h" #include "rcl/context.h" #include "rcl/init_options.h" #include "rcl/macros.h" #include "rcl/types.h" #include "rcl/visibility_control.h" /// initialization of rcl. /** * this function can be run any number of times, so long as the given context * has been properly prepared. * * the given `rcl_context_t` must be zero initialized with the function * `rcl_get_zero_initialized_context()` and must not be already initialized * by this function. * if the context is already initialized this function will fail and return the * `rcl_ret_already_init` error code. * a context may be initialized again after it has been finalized with the * `rcl_shutdown()` function and zero initialized again with * `rcl_get_zero_initialized_context()`. * * the `argc` and `argv` parameters may contain command line arguments for the * program. * rcl specific arguments will be parsed, but not removed. * if `argc` is `0` and `argv` is `null` no parameters will be parsed. * * the `options` argument must be non-`null` and must have been initialized * with `rcl_init_options_init()`. * it is unmodified by this function, and the ownership is not transfered to * the context, but instead a copy is made into the context for later reference. * therefore, the given options need to be cleaned up with * `rcl_init_options_fini()` after this function returns. * * <hr> * attribute | adherence * ------------------ | ------------- * allocates memory | yes * thread-safe | no * uses atomics | yes * lock-free | yes [1] * <i>[1] if `atomic_is_lock_free()` returns true for `atomic_uint_least64_t`</i> * * \param[in] argc number of strings in argv * \param[in] argv command line arguments; rcl specific arguments are removed * \param[in] options options used during initialization * \param[out] context resulting context object that represents this init * \return `rcl_ret_ok` if initialization is successful, or * \return `rcl_ret_already_init` if rcl_init has already been called, or * \return `rcl_ret_invalid_argument` if any arguments are invalid, or * \return `rcl_ret_bad_alloc` if allocating memory failed, or * \return `rcl_ret_error` if an unspecified error occurs. */ rcl_public rcl_warn_unused rcl_ret_t rcl_init ( int argc , char const * const * argv , const rcl_init_options_t * options , rcl_context_t * context ); /// shutdown a given rcl context. /** * the given context must have been initialized with `rcl_init()`. * if not, this function will fail with `rcl_ret_already_shutdown`. * * when this function is called: * - any rcl objects created using this context are invalidated. * - functions called on invalid objects may or may not fail. * - calls to `rcl_context_is_initialized()` will return `false`. * * <hr> * attribute | adherence * ------------------ | ------------- * allocates memory | yes * thread-safe | yes * uses atomics | yes * lock-free | yes [1] * <i>[1] if `atomic_is_lock_free()` returns true for `atomic_uint_least64_t`</i> * * \return `rcl_ret_ok` if the shutdown was completed successfully, or * \return `rcl_ret_invalid_argument` if any arguments are invalid, or * \return `rcl_ret_already_shutdown` if the context is not currently valid, or * \return `rcl_ret_error` if an unspecified error occur. */ rcl_public rcl_warn_unused rcl_ret_t rcl_shutdown ( rcl_context_t * context ); #ifdef __cplusplus } #endif #endif // rcl__init_h_ you cant perform that action at this time.