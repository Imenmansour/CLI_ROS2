skip to content you signed in with another tab or window. reload to refresh your session. you signed out in another tab or window. reload to refresh your session. you switched accounts on another tab or window. reload to refresh your session. dismiss alert ros2 / ros2_documentation public notifications you must be signed in to change notification settings fork 1.1k star 531 files jazzy / release-humble-hawksbill.rst blame blame latest commit history history 1000 lines (689 loc)  42.9 kb jazzy / release-humble-hawksbill.rst top file metadata and controls preview code blame 1000 lines (689 loc)  42.9 kb raw humble hawksbill ( humble ) .. toctree:: :hidden: humble-hawksbill-complete-changelog table of contents supported platforms installation changes in patch release 1 (2022-11-23) ros2topic new features in this ros 2 release ament_cmake_gen_version_h launch launch_ros sros2 security enclaves support certificate revocation lists content filtered topics ros2cli rviz2 changes since the galactic release c++ headers are installed in a subdirectory common_interfaces rmw rmw_connextdds rcl rclcpp rclcpp_lifecycle rclpy ros1_bridge ros2cli robot_state_publisher rosidl_cmake rviz2 geometry2 rosbag2 known issues release timeline humble hawksbill is the eighth release of ros 2. what follows is highlights of the important changes and features in humble hawksbill since the last release. for a list of all of the changes since galactic, see the long form changelog <humble-hawksbill-complete-changelog>. supported platforms humble hawksbill is primarily supported on the following platforms: tier 1 platforms: ubuntu 22.04 (jammy): amd64 and arm64 windows 10 (visual studio 2019): amd64 tier 2 platforms: rhel 8: amd64 tier 3 platforms: ubuntu 20.04 (focal): amd64 macos: amd64 debian bullseye: amd64 for more information  rmw implementations, compiler / interpreter versions, and system dependency versions see rep 2000 . installation install humble hawksbill changes in patch release 1 (2022-11-23) ros2topic now as keyword for builtin_interfaces.msg.time and auto for std_msgs.msg.header ros2 topic pub now allows to set a builtin_interfaces.msg.time message to the current time via the now keyword. similarly, a std_msg.msg.header message will be automatically generated when passed the keyword auto . this behavior matches that of ros 1's rostopic ( http://wiki.ros.org/ros/yamlcommandline#headers.2ftimestamps ) related pr: ros2/ros2cli#751 new features in this ros 2 release ament_cmake_gen_version_h generating a c/c++ header with version info a new cmake function to generate a header with the package version info was added to the ament_cmake_gen_version_h in ament/ament_cmake#377 . here's the simplest use case: project (my_project) add_library (my_lib ...) ament_generate_version_header(my_lib) it will generate a header with version info from the package.xml and make it available to targets that link against the my_lib library. how to include the header: #include <my_project/version.h> where the header is installed to: set (version_header {cmake_install_prefix} /include/my_project/my_project/version.h) launch scoping environment variables in group actions similar to launch configurations, now by default, the state of environment variables are scoped to group actions. for example, in the following launch files the executed processe will echo the value 1 (before humble it would echo 2 ): .. tabs:: .. group-tab:: xml .. code-block:: xml <launch> <set_env name="foo" value="1" /> <group> <set_env name="foo" value="2" /> </group> <executable cmd="echo foo" output="screen" shell="true" /> </launch> .. group-tab:: python .. code-block:: python import launch import launch.actions def generate_launch_description(): return launch.launchdescription([ launch.actions.setenvironmentvariable(name='foo', value='1'), launch.actions.groupaction([ launch.actions.setenvironmentvariable(name='foo', value='2'), ]), launch.actions.executeprocess(cmd=['echo', 'foo'], output='screen', shell=true), ]) if you would like disable scoping for launch configurations and and environment variables you can set the scoped argument (or attribute) to false. related pr: ros2/launch#601 launch_pytest we've added a new package, launch_pytest , that acts as an alternative to launch_testing . launch_pytest is a simple pytest plugin that provides pytest fixtures to manage the lifetime of a launch service. check out the package readme for details and examples. related pr: ros2/launch#528 allow matching target actions with a callable event handlers that take a target action object to match can now also take a callable instead to do the matching. related pr: ros2/launch#540 access to math module when evaluating python expressions inside pythonexpression substitutions ( eval ) we can now use symbols from python's math module. for example, < launch > < log message = " (eval 'ceil(pi)') " /> </ launch > related pr: ros2/launch#557 boolean substitutions new substitutions notsubstitution , andsubstitution , and orsubstitution provide a convenient way to perform logical operations, for example < launch > < let name = " p " value = " true " /> < let name = " q " value = " false " /> < group if = " (or (var p) (var q)) " > < log message = " the first condition is true " /> </ group > < group unless = " (and (var p) (var q)) " > < log message = " the second condition is false " /> </ group > < group if = " (not (var q)) " > < log message = " the third condition is true " /> </ group > </ launch > related pr: ros2/launch#598 new actions appendenvironmentvariable appends a value to an existing environment variable. related pr: ros2/launch#543 resetlaunchconfigurations resets any configuration applied to the launch configuration. related pr: ros2/launch#515 launch_ros passing ros arguments to node actions it is now possible to provide ros-specific node arguments <../../how-to-guides/node-arguments> directly, without needing to use args with a leading --ros-args flag: .. tabs:: .. group-tab:: xml .. code-block:: xml <launch> <node pkg="demo_nodes_cpp" exec="talker" ros_args="--log-level debug" /> </launch> .. group-tab:: yaml .. code-block:: yaml launch: - node: pkg: demo_nodes_cpp exec: talker ros_args: '--log-level debug' the corresponding parameter for the node action in python launch files is ros_arguments : from launch import launchdescription import launch_ros . actions def generate_launch_description (): return launchdescription ([ launch_ros . actions . node ( package = 'demo_nodes_cpp' , executable = 'talker' , ros_arguments = [ '--log-level' , 'debug' ], ), ]) related prs: ros2/launch_ros#249 and ros2/launch_ros#253 . frontend support for composable nodes we can now start node containers and load components into them from frontend launch files, for example: .. tabs:: .. group-tab:: xml .. code-block:: xml <launch> <node_container pkg="rclcpp_components" exec="component_container" name="my_container" namespace=""> <composable_node pkg="composition" plugin="composition::talker" name="talker" /> </node_container> <load_composable_node target="my_container"> <composable_node pkg="composition" plugin="composition::listener" name="listener" /> </load_composable_node> </launch> .. group-tab:: yaml .. code-block:: yaml launch: - node_container: pkg: rclcpp_components exec: component_container name: my_container namespace: '' composable_node: - pkg: composition plugin: composition::talker name: talker - load_composable_node: target: my_container composable_node: - pkg: composition plugin: composition::listener name: listener related pr: ros2/launch_ros#235 parameter substitution the new parametersubstitution lets you substitute the value of a parameter set previously in launch with the setparameter action. for example, < launch > < set_parameter name = " foo " value = " bar " /> < log message = " parameter foo has value (param foo) " /> </ launch > related pr: ros2/launch_ros#297 new actions rostimer acts like the launch timeraction , but uses a ros clock (so it can use simulation time, for example). related prs: ros2/launch_ros#244 and ros2/launch_ros#264 setparametersfromfile passes a ros parameters file to all nodes in a launch file (including node components). related prs: ros2/launch_ros#260 and ros2/launch_ros#281 sros2 security enclaves support certificate revocation lists certificate revocation lists (crls) are a concept where particular certificates can be revoked before their expiration. as of humble, it is now possible to put a crl in an sros2 security enclave and have it be honored. see the sros2 tutorials for an example of how to use it. content filtered topics content filtered topics supports a more sophisticated  that indicates the subscriber does not want to necessarily see all values of each instance published under the topic. content filtered topics can be used to request content-based s when underlying rmw implementation supports this feature. rmw content filtered topics support rmw_fastrtps supported rmw_connextdds supported rmw_cyclonedds not supported to learn more, see the content_filtering examples. related design pr: ros2/design#282 . ros2cli ros2 launch has a --launch-prefix argument this allows passing a prefix to all executables in a launch file, which is useful in many debugging situations. see the associated pull request , as well as the :ref:`tutorial <launch-prefix-example>` for more information. relatedly, the --launch-prefix-filter command-line option was added to selectively add the prefix from --launch-prefix to executables. see the pull request for more information. ros2 topic echo has a --flow-style argument this allows the user to force flow style for the yaml representation of data on a topic. without this option, the output from ros2 topic echo /tf_static could look something like: transforms: - header: stamp: sec: 1651172841 nanosec: 433705575 frame_id: single_rrbot_link3 child_frame_id: single_rrbot_camera_link transform: translation: x: 0.05 y: 0.0 z: 0.9 rotation: x: 0.0 y: 0.0 z: 0.0 w: 1.0 with this option, the output would look something like: transforms: [{header: {stamp: {sec: 1651172841, nanosec: 433705575}, frame_id: single_rrbot_link3}, child_frame_id: single_rrbot_camera_link, transform: {translation: {x: 0.05, y: 0.0, z: 0.9}, rotation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}}}] see the pyyaml documentation for more information. ros2 topic echo can filter data based on message contents this allows the user to only print out data on a topic that matches a certain python expression. for instance, using the following argument will only print out string messages that start with 'foo': ros2 topic echo --filter 'm.data.startswith("foo")` /chatter see the pull request for more information. rviz2 apply textures to arbitrary triangle lists we've added the ability to apply textures defined via uri to arbitrary triangle lists using uv coordinates . now we can create a gradient pull from a texture map instead of the default grayscale. this will enable complex coloring of markers. to use this, you should use the visualization_msgs/marker.msg and fill the texture_resource , texture , uv_coordinates and mesh_file fields. you can find more information here . visualization of mass properties (including inertia) we also added the ability to visualize inertias. to do this, you select enable 'inertia' in the 'mass properties' under the robot model: you can see an image of an inertia below. visualize yuv images in rviz it is now possible to directly visualize yuv images inside of rviz, rather than having to convert to rgb first. see ros2/rviz#701 for details. allow rendering of objects > 100 meters by default, rviz only renders objects that are within 100 meters of a camera. a new configuration property called "far plane distance" in the rviz camera plugin allows that rendering distance to be configured. see ros2/rviz#849 for more information. changes since the galactic release c++ headers are installed in a subdirectory in ros 2 releases prior to humble, c++ headers for all packages were installed into a single include directory. for instance, in galactic, the directory structure looks like this (reduced for brevity): /opt/ros/galactic/include/  rcl   node.h  rclcpp   node.hpp this structure can cause serious problems when trying to use overlays. that is, it is very possible to get the wrong set of header files due to include directory order. see https://colcon.readthedocs.io/en/released/user/overriding-packages.html for a detailed explanation of the problems. to help combat this, in humble (and in all ros 2 releases going forward), the directory structure has changed: /opt/ros/humble/include  rcl   rcl   node.h  rclcpp   rclcpp   node.hpp note that downstream packages that use these headers do not have to change; using #include <rclcpp/node.hpp> works as it always did before. however, when using ides that are looking for include directories, it may be necessary to add the individual include directories to the search path. see ros2/ros2#1150 for more information, including the reasoning behind this change. common_interfaces support textures and embedded meshes for marker messages these two additions will improve the ability to both visualize data in new ways with standard messages and, simultaneously, enable the ability to track this data in rosbag. textures bring the addition of three new fields to markers: # texture resource is a special uri that can either reference a texture file in # a format acceptable to (resource retriever)[https://index.ros.org/p/resource_retriever/] # or an embedded texture via a string matching the format: # "embedded://texture_name" string texture_resource # an image to be loaded into the rendering engine as the texture for this marker. # this will be used iff texture_resource is set to embedded. sensor_msgs/compressedimage texture # location of each vertex within the texture; in the range: [0.0-1.0] uvcoordinate[] uv_coordinates rviz will fully support texture rendering through the embedded format. to those familiar with mesh_resource , resource_retriever should be familiar. this will allow the programmer to choose where they want to load data from, either a local file or a networked file. in the interest of being able to record all data in a rosbag, the ability to embed the texture image is included. meshes were modified in a similar way to add the ability to embed a raw mesh file for the purpose of recording and are modified in a similar way. the meshfile message has two fields: # the filename is used for both debug purposes and to provide a file extension # for whatever parser is used. string filename # this stores the raw text of the mesh file. uint8[] data the embedded meshfile message is not yet supported in implementation. related prs: ros2/common_interfaces#153 ros2/rviz#719 added prism type to solidprimitive the solidprimitive message had a new prism type added, along with the appropriate metadata. see ros2/common_interfaces#167 for more information. rmw struct type name suffix changed from _t to _s to avoid type name duplication errors between struct type names and their typedef -ed aliases when generating code documentation, the suffix for all struct type names has been changed from _t to _s . aliases with _t suffixes remain in place. thus, this change is a breaking change only for code that uses full struct type specifiers i.e. struct type_name_t . see ros2/rmw#313 for more details. rmw_connextdds use connext 6 by default by default, humble hawksbill uses connext 6.0.1 as the dds implementation for rmw_connextdds . it is still possible to use connext 5.3.1 with rmw_connextdds , but it must be rebuilt from source. rcl struct type name suffix changed from _t to _s to avoid type name duplication errors between struct type names and their typedef -ed aliases when generating code documentation, the suffix for all struct type names has been changed from _t to _s . aliases with _t suffixes remain in place. thus, this change is a breaking change only for code that uses full struct type specifiers i.e. struct type_name_t . see ros2/rcl#932 for more details. ros_disable_loaned_messages environment variable added this environment variable can be used to disable loaned messages support, independently if the rmw supports them or not. for more details, see the guide :doc:`configure zero copy loaned messages <../how-to-guides/configure-zerocopy-loaned-messages>` . rclcpp support type adaption for publishers and s after defining a type adapter, custom data structures can be used directly by publishers and subscribers, which helps to avoid additional work for the programmer and potential sources of errors. this is especially useful when working with complex data types, such as when converting opencv's cv::mat to ros's sensor_msgs/msg/image type. here is an example of a type adapter that converts std_msgs::msg::string to std::string : template <> struct rclcpp ::typeadapter< std::string, std_msgs::msg::string > { using is_specialized = std::true_type; using custom_type = std::string; using ros_message_type = std_msgs::msg::string; static void convert_to_ros_message ( const custom_type & source, ros_message_type & destination) { destination. data = source; } static void convert_to_custom ( const ros_message_type & source, custom_type & destination) { destination = source. data ; } }; and an example of how the type adapter can be used: using myadaptedtype = typeadapter<std::string, std_msgs::msg::string>; // publish a std::string auto pub = node->create_publisher<myadaptedtype>(...); std::string custom_msg = " my std::string " pub-> publish (custom_msg); // pass a std::string to a 's callback auto sub = node->create_<myadaptedtype>( " topic " , 10 , []( const std::string & msg) {...}); to learn more, see the publisher and  examples, as well as a more complex demo . for more details, see rep 2007 . client::asnyc_send_request(request) returns a std::future instead of a std::shared_future this change was implemented in rclcpp#1734 . this breaks api, as std::future::get() methods extracts the value from the future. that means, if that method is called for a second time it will throw an exception. that doesn't happen with a std::shared_future , as its get() method returns a const & . example: auto future = client-> async_send_request (req); ... do_something_with_response (future.get()); ... do_something_else_with_response (future.get()); // this will throw an exception now!! should be updated to: auto future = client-> async_send_request (req); ... auto response = future.get(); do_something_with_response (response); ... do_something_else_with_response (response); if a shared future is needed, the std::future::share() method can be used. wait_for_all_acked method added to publisher this new method will block until all messages in the publisher queue are acked by the matching s or the specified timeout expires. it is only useful for reliable publishers, as in the case of best effort qos there's no acking. examples: auto pub = node->create_publisher<std_msgs::msg::string>(...); ... pub-> publish (my_msg); ... pub-> wait_for_all_acked (); // or pub->wait_for_all_acked(timeout) for a more complete example, see here . get_callback_groups method removed from nodebase and node classes for_each_callback_group() method has replaced get_callback_groups() by providing a thread-safe way to access callback_groups_ vector. for_each_callback_group() accepts a function as an argument, iterates over the stored callback groups, and calls the passed function to ones that are valid. for more details,  refer to this pull request . add_to_wait_set method from waitable class changes its return type from bool to void before, classes derived from waitable overriding add_to_wait_set were returning false when failing to add elements to the wait set, so the caller had to check this return value and throw or handle the error. this error handling should now be done directly on add_to_wait_set method, throwing if necessary. it is not required to return anything if no errors happened. thus, this is a breaking change for downstream uses of waitable . see ros2/rclcpp#1612 for more details. get_notify_guard_condition method return type from nodebaseinterface class changed now rclcpp uses the guardcondition class wrapper around rcl_guard_condition_t , so get_notify_guard_condition returns a reference to the node's rclcpp::guardcondition . thus, this is a breaking change for downstream uses of nodebaseinterface and nodebase . see ros2/rclcpp#1612 for more details. sleep_until and sleep_for methods added to clock two new methods were added to allow sleeping on a particular clock in ros2/rclcpp#1814 and ros2/rclcpp#1828 . clock::sleep_until will suspend the current thread until the clock reaches a particular time. clock::sleep_for will suspend the current thread until the clock advances a certain amount of time from when the method was called. both methods will wake early if the context is shutdown. rclcpp_lifecycle active and deactivate transitions of publishers will be triggered automatically before, users needed to override lifecylcenode::on_activate() and lifecylcenode::on_deactivate() and call the similarly named methods on lifecyclepublisher to make the transition actually happen. now, lifecylcenode provides a default interface of these methods that already do this. see the implementation of the lifecycle_talker node here . rclpy managed nodes lifecycle nodes support was added to rclpy. a complete demo can be found here . wait_for_all_acked method added to publisher similar to the feature added to rclcpp. sleep_until and sleep_for methods added to clock two new methods were added to allow sleeping on a particular clock in ros2/rclpy#858 and ros2/rclpy#864 . sleep_until will suspend the current thread until the clock reaches a particular time. sleep_for will suspend the current thread until the clock advances a certain amount of time from when the method was called. both methods will wake early if the context is shutdown. ros1_bridge since there is no official ros 1 distribution on ubuntu jammy and forward, ros1_bridge is now compatible with the ubuntu-packaged versions of ros 1. more details  using ros1_bridge with jammy packages are available in :doc:`the how-to guides <../how-to-guides/using-ros1_bridge-jammy-upstream>` . ros2cli ros2 commands disable output buffering by default prior to this release, running a command like ros2 echo /chatter | grep "hello" would not print any data until the output buffer was full. users could work around this by setting pythonunbuffered=1 , but that was not very user friendly. instead, all ros2 commands now do line-buffering by default, so commands like the above work as soon as a newline is printed. to disable this behavior and use default python buffering rules, use the option --use-python-default-buffering . see the original issue and the pull request for more information. ros2 topic pub will wait for one matching  when using --times/--once/-1 when using --times/--once/-1 flags, ros2 topic pub will wait for one matching  to be found before starting to publish. this avoids the issue of the ros2cli node starting to publish before discovering a matching , which results in some of the first messages being lost. this is particularly unexpected when using a reliable qos profile. the number of matching s to wait before starting publishing can be configured with the -w/--wait-matching-s flags, e.g.: ros2 topic pub -1 -w 3 /chatter std_msgs/msg/string "{data: 'foo'}" to wait for three matching s before starting to publish. -w can also be used independently of --times/--once/-1 but it only defaults to one when combined with them, otherwise the -w default is zero. see ros2/ros2cli#642 for more details. ros2 param dump default output changed --print option for dump command was deprecated . it prints to stdout by default: ros2 param dump /my_node_name --output-dir option for dump command was deprecated . to dump parameters to a file, run: ros2 param dump /my_node_name > my_node_name.yaml ros2 param set now accepts more yaml syntax previously, attempting to set a string like "off" to a parameter that was of string type did not work. that's because ros2 param set interprets the command-line arguments as yaml, and yaml considers "off" to be a boolean type. as of ros2/ros2cli#684 , ros2 param set now accepts the yaml escape sequence of "!!str off" to ensure that the value is considered a string. ros2 pkg create can automatically generate a license file if the --license flag is passed to ros2 pkg create , and the license is one of the known licenses, ros2 pkg create will now automatically generate a license file in the root of the package. for a list of known licenses, run ros2 pkg create --license ? <package_name> . see the associated pull request for more information. robot_state_publisher added frame_prefix parameter a new parameter frame_prefix was added in ros/robot_state_publisher#159 . this parameter is a string which is prepended to all frame names published by robot_state_publisher . similar to tf_prefix in the original tf library in ros 1, this parameter can be used to publish the same robot description multiple times with different frame names. removal of deprecated use_tf_static parameter the deprecated use_tf_static parameter has been removed from robot_state_publisher . this means that static transforms are unconditionally published to the /tf_static topic, and that the static transforms are published in a transient_local quality of service. this was the default behavior, and the behavior which the tf2_ros::transformlistener class expected before, so most code will not have to be changed. any code that was relying on robot_state_publisher to periodically publish static transforms to /tf will have to be updated to subscribe to /tf_static as a transient_local  instead. rosidl_cmake deprecation of rosidl_target_interfaces() the cmake function rosidl_target_interfaces() has been deprecated, and now issues a cmake warning when called. users wanting to use messages/services/actions in the same ros package that generated them should instead call rosidl_get_typesupport_target() and then target_link_libraries() to make their targets depend on the returned typesupport target. see ros2/rosidl#606 for more details, and ros2/demos#529 for an example of using the new function. rviz2 improved the efficiency of 3-bytes pixel formats changed the way inertias are computed to use ignition math rather than ogre's math libraries . geometry2 deprecation of tf2error::no_error, etc the tf2 library uses an enumeration called tf2error to return errors. unfortunately, one of the enumerators in there is called no_error , which conflicts with a macro on windows. to remedy this, a new set of enumerators in tf2error were created, each with a tf2 prefix. the previous enumerators are still available, but are now deprecated and will print a deprecation warning if used. all code that uses the tf2error enumerator should be updated to use the new tf2 prefixed errors. see ros2/geometry2#349 for more details. more intuitive command-line arguments for static_transform_publisher the static_transform_publisher program used to take arguments like: ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 1 foo bar . the first three numbers are the translation x, y, and z, the next 4 are the quaternion x, y, z, and w, and the last two arguments are the parent and child frame ids. while this worked, it had a couple of problems: the user had to specify all of the arguments, even if only setting one number reading the command-line to figure out what it was publishing was tricky to fix both of these issues, the command-line handling has been changed to use flags instead, and all flags except for --frame-id and --child-frame-id are optional. thus, the above command-line can be simplified to: ros2 run tf2_ros static_transform_publisher --frame-id foo --child-frame-id bar to change just the translation x, the command-line would be: ros2 run tf2_ros static_transform_publisher --x 1.5 --frame-id foo --child-frame-id bar . the old-style arguments are still allowed in this release, but are deprecated and will print a warning. they will be removed in future releases. see ros2/geometry2#392 for more details. transform listener spin thread no longer executes node callbacks tf2_ros::transformlistener no longer spins on the provided node object. instead, it creates a callback group to execute callbacks on the entities it creates internally. this means if you have set the parameter spin_thread=true when creating a transform listener, you can no longer depend on your own callbacks to be executed. you must call a spin function on your node (e.g. rclcpp::spin ), or add your node to your own executor. related pull request: geometry2#442 rosbag2 new playback and recording controls several pull requests have been added to enhance the user's control over playback of bags. pull request 931 adds the ability to specify a time stamp to begin playing from. due to pull request 789 it is now possible to delay the start of playback by a specified interval. relatedly, rosbag2 has gained new ways for users to control playback as it is happening. pull request 847 adds keyboard controls for pausing, resuming, and playing the next message during playback from a terminal. it is also possible to start playback paused thanks to pull requests 905 and 904 , which makes it easy for the user to initiate playback and then step through messages, such as when debugging a pipeline. pull request 836 adds an interface for seeking within bags, allowing the user to move around within a bag during playback. finally, a new snapshot mode has been added to recording in pull request 851 . this mode, useful for incident recording, allows recording to begin filling up buffers, but not begin writing data to disc until a service is called. burst-mode playback while the playback of data from a bag in real-time is the most well-known use case for bag files, there are situations where you want the data in the bag as fast as possible. with pull request 977 , rosbag2 has gained the ability to "burst" data from the bag. in burst mode, the data is played back as fast as possible. this is useful in applications such as machine learning. zero-copy playback by default, if loaned message can be used, playback messages are published as loaned message. this can help to reduce the number of data copies, so there is a greater benefit for sending big data. pull request 981 adds --disable-loan-message option for playback. wait for an acknowledgment this new option will wait until all published messages are acknowledged by all subscribers or until the timeout elapses in millisecond before play is terminated. especially for the case of sending message with big size in a short time. this option is valid only if the publisher's qos profile is reliable. pull request 951 adds --wait-for-all-acked option for playback. bag editing rosbag2 is taking steps towards enabling the editing of bags, such as removing all messages for one topic or merging multiple bags into a single bag. pull request 921 adds bag rewriting and the ros2 bag convert verb. other changes pull request 925 makes rosbag2 ignore "leaf topics" (topics without a publisher) when recording. these topics will no longer be automatically added to the bag. known issues when installing ros 2 on an ubuntu 22.04 jammy host it is important to update your system before installing ros 2 packages. it is particularly important to make sure that systemd and udev are updated to the latest available version otherwise installing ros-humble-desktop , which depends on libudev1 , could cause the removal of system critical packages. details can be found in ros2/ros2#1272 and launchpad #1974196 when ros 2 apt repositories are available, ros 1 packages in ubuntu are not installable. see the :doc:`ros1_bridge on ubuntu jammy <../how-to-guides/using-ros1_bridge-jammy-upstream>` document for more information. some major linux distributions have started patching python to install packages to /usr/local , which is breaking some parts of ament_package and builds with colcon . in particular, using ubuntu jammy with setuptools installed from pip will manifest this misbehavior, and is therefore not recommended. there is currently a proposed solution which requires further testing before widespread release. ros 2 bags that are split by size or duration are not played correctly. only the last bag recorded is played. it is recommended to avoid splitting bags by size or duration. details can be found in ros2/rosbag2#966 . release timeline mon. march 21, 2022 - alpha + rmw freeze preliminary testing and stabilization of ros base [1] packages, and api and feature freeze for rmw provider packages. mon. april 4, 2022 - freeze api and feature freeze for ros base [1] packages in rolling ridley. only bug fix releases should be made after this point. new packages can be released independently. mon. april 18, 2022 - branch branch from rolling ridley. rosdistro is reopened for rolling prs for ros base [1] packages. humble development shifts from ros-rolling-* packages to ros-humble-* packages. mon. april 25, 2022 - beta updated releases of ros desktop [2] packages available. call for general testing. mon. may 16, 2022 - release candidate release candidate packages are built. updated releases of ros desktop [2] packages available. thu. may 19, 2022 - distro freeze freeze rosdistro. no prs for humble on the rosdistro repo will be merged (reopens after the release announcement). mon. may 23, 2022 - general availability release announcement. rosdistro is reopened for humble prs. [1] ( 1 , 2 , 3 ) the ros_base variant is described in rep 2001 (ros-base) . [2] ( 1 , 2 ) the desktop variant is described in rep 2001 (desktop-variants) . you cant perform that action at this time.