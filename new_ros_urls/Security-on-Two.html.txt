tutorials advanced security ensuring security across machines edit on github ensuring security across machines ï goal: make two different machines communicate securely. tutorial level: advanced time: 5 minutes background ï before proceeding ensure you have completed the setting up security tutorial. the previous tutorials have used two ros nodes on the same machine sending all network communications over the localhost interface. letâs extend that scenario to involve multiple machines, since the benefits of authentication and encryption then become more obvious. suppose that the machine with the keystore created in the previous demo has a hostname alice , and that we want to also use another machine with hostname bob for our multi-machine talker/listener demo. we need to move some keys from alice to bob to allow sros 2 to authenticate and encrypt the transmissions. create the second keystore ï begin by creating an empty keystore on bob ; the keystore is actually just an empty directory: linux macos windows ssh bob mkdir ~/sros2_demo exit ssh bob mkdir ~/sros2_demo exit ssh bob md c:\dev\ros2\sros2_demo exit copy files ï next copy the keys and certificates for the talker program from alice to bob . since the keys are just text files, we can use scp to copy them. linux macos windows cd ~/sros2_demo/demo_keystore scp -r talker username@bob:~/sros2_demo/demo_keystore cd ~/sros2_demo/demo_keystore scp -r talker username@bob:~/sros2_demo/demo_keystore cd c:\dev\ros2\sros2_demo\demo_keystore scp -r talker username@bob:/dev/ros2/sros2_demo/demo_keystore warning note that in this case the entire keystore is shared across the different machines which may not be the desired behavior, as it may result in a security risk.  refer to deployment guidelines for more information in this regard. that will be very quick, since itâs just copying some very small text files. now, weâre ready to run a multi-machine talker/listener demo! launch the nodes ï once the environment is set up, run the talker on bob : ros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker and launch the listener on alice : ros2 run demo_nodes_py listener --ros-args --enclave /talker_listener/listener alice will now be receiving encrypted messages from bob. with two machines successfully communicating using both encryption and authentication, you can use the same procedure to add more machines to your ros graph. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling