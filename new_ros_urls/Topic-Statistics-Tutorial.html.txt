tutorials advanced enabling topic statistics (c++) edit on github enabling topic statistics (c++) ï goal: enable ros 2 topic statistics and view the output statistics data. tutorial level: advanced time: 10 minutes background ï this is a short tutorial on how to enable topic statistics in ros 2 and view the published statistics output using command line tools ( ros2topic ). ros 2 provides the integrated measurement of statistics for messages received by any , called topic statistics. with topic statistics enabled for your , you can characterize the performance of your system or use the data to help diagnose any present issues. for more details  see the topic statistics concepts page . prerequisites ï an installation from either binaries or source. in previous tutorials, you learned how to create a workspace , create a package , and create a c++ publisher and subscriber. this tutorial assumes that you still have your cpp_pubsub package from the c++ tutorial. tasks ï 1 write the subscriber node with statistics enabled ï navigate into the ros2_ws/src/cpp_pubsub/src folder, created in the previous tutorial , and download the example talker code by entering the following command: linux macos windows wget -o member_function_with_topic_statistics.cpp https://raw.githubusercontent.com/ros2/examples/jazzy/rclcpp/topics/minimal_subscriber/member_function_with_topic_statistics.cpp wget -o member_function_with_topic_statistics.cpp https://raw.githubusercontent.com/ros2/examples/jazzy/rclcpp/topics/minimal_subscriber/member_function_with_topic_statistics.cpp right click this link and select save as publisher_member_function.cpp : https://raw.githubusercontent.com/ros2/examples/jazzy/rclcpp/topics/minimal_subscriber/member_function_with_topic_statistics.cpp now there will be a new file named member_function_with_topic_statistics.cpp . open the file using your preferred text editor. #include <chrono> #include <memory> #include "rclcpp/rclcpp.hpp" #include "rclcpp/_options.hpp" #include "std_msgs/msg/string.hpp" class minimalsubscriberwithtopicstatistics : public rclcpp :: node { public : minimalsubscriberwithtopicstatistics () : node ( "minimal_subscriber_with_topic_statistics" ) { // manually enable topic statistics via options auto options = rclcpp :: options (); options . topic_stats_options . state = rclcpp :: topicstatisticsstate :: enable ; // configure the collection window and publish period (default 1s) options . topic_stats_options . publish_period = std :: chrono :: seconds ( 10 ); // configure the topic name (default '/statistics') // options.topic_stats_options.publish_topic = "/topic_statistics" auto callback = [ this ]( std_msgs :: msg :: string :: sharedptr msg ) { this -> topic_callback ( msg ); }; _ = this -> create_ < std_msgs :: msg :: string > ( "topic" , 10 , callback , options ); } private : void topic_callback ( const std_msgs :: msg :: string :: constsharedptr msg ) const { rclcpp_info ( this -> get_logger (), "i heard: '%s'" , msg -> data . c_str ()); } rclcpp ::  < std_msgs :: msg :: string >:: sharedptr _ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < minimalsubscriberwithtopicstatistics > ()); rclcpp :: shutdown (); return 0 ; } 1.1 examine the code ï as in the c++ tutorial, we have a subscriber node which receives string messages from the topic topic from the topic_callback function. however, weâve now added options to configure the  to enable topic statistics with the rclcpp::options() options struct. // manually enable topic statistics via options auto options = rclcpp :: options (); options . topic_stats_options . state = rclcpp :: topicstatisticsstate :: enable ; optionally, fields such as the statistics collection/publish period and the topic used to publish statistics can be configured as well. // configure the collection window and publish period (default 1s) options . topic_stats_options . publish_period = std :: chrono :: seconds ( 10 ); // configure the topic name (default '/statistics') // options.topic_stats_options.publish_topic = "/my_topic" the configurable fields are described in the following table:  config field purpose topic_stats_options.state enable or disable topic statistics (default rclcpp::topicstatisticsstate::disable ) topic_stats_options.publish_period the period in which to collect statistics data and publish a statistics message (default 1s ) topic_stats_options.publish_topic the topic to use when publishing statistics data (default /statistics ) 1.2 cmakelists.txt ï now open the cmakelists.txt file. add the executable and name it listener_with_topic_statistics so you can run your node using ros2 run : add_executable(listener_with_topic_statistics src/member_function_with_topic_statistics.cpp) ament_target_dependencies(listener_with_topic_statistics rclcpp std_msgs) install(targets talker listener listener_with_topic_statistics destination lib/{project_name}) make sure to save the file, and then your pub/sub system, with topic statistics enabled, should be ready for use. 2 build and run ï to build, see the build and run section in the pub/sub tutorial. run the subscriber with statistics enabled node: ros2 run cpp_pubsub listener_with_topic_statistics now run the talker node: ros2 run cpp_pubsub talker the terminal should start publishing info messages every 0.5 seconds, like so: [info] [minimal_publisher]: publishing: "hello world: 0" [info] [minimal_publisher]: publishing: "hello world: 1" [info] [minimal_publisher]: publishing: "hello world: 2" [info] [minimal_publisher]: publishing: "hello world: 3" [info] [minimal_publisher]: publishing: "hello world: 4" the listener will start printing messages to the console, starting at whatever message count the publisher is on at that time, like so: [info] [minimal_subscriber_with_topic_statistics]: i heard: "hello world: 10" [info] [minimal_subscriber_with_topic_statistics]: i heard: "hello world: 11" [info] [minimal_subscriber_with_topic_statistics]: i heard: "hello world: 12" [info] [minimal_subscriber_with_topic_statistics]: i heard: "hello world: 13" [info] [minimal_subscriber_with_topic_statistics]: i heard: "hello world: 14" now that the subscriber node is receiving messages, it will periodically publish statistics messages. we will observe these messages in the next section. 3 observe published statistic data ï while the nodes are running, open a new terminal window. execute the following command: ros2 topic list this will list all currently active topics. you should see the following: /parameter_events /rosout /statistics /topic if you optionally changed the topic_stats_options.publish_topic field earlier in the tutorial, then you will see that name instead of /statistics . the subscriber node you created is publishing statistics, for the topic topic , to the output topic /statistics . we can visualize this using rqt now we can view the statistics data published to this topic with the following command: ros2 topic echo /statistics the terminal should start publishing statistics messages every 10 seconds, because the topic_stats_options.publish_period  configuration was optionally changed earlier in the tutorial. --- measurement_source_name: minimal_subscriber_with_topic_statistics metrics_source: message_age unit: ms window_start: sec: 1594856666 nanosec: 931527366 window_stop: sec: 1594856676 nanosec: 930797670 statistics: - data_type: 1 data: .nan - data_type: 3 data: .nan - data_type: 2 data: .nan - data_type: 5 data: 0.0 - data_type: 4 data: .nan --- measurement_source_name: minimal_subscriber_with_topic_statistics metrics_source: message_period unit: ms window_start: sec: 1594856666 nanosec: 931527366 window_stop: sec: 1594856676 nanosec: 930797670 statistics: - data_type: 1 data: 499.2746365105009 - data_type: 3 data: 500.0 - data_type: 2 data: 499.0 - data_type: 5 data: 619.0 - data_type: 4 data: 0.4463309283488427 --- from the message definition the data_types are as follows data_type value statistics 1 average 2 minimum 3 maximum 4 standard deviation 5 sample count here we see the two currently possible calculated statistics for the std_msgs::msg::string message published to /topic by the minimal_publisher . because the std_msgs::msg::string does not have a message header, the message_age calculation cannot be performed, so nans are returned. however, the message_period can be calculated and we see the statistics populated in the message above. summary ï you created a subscriber node with topic statistics enabled, which published statistics data from the c++ âs publisher node. you were able to compile and run this node. while running, you were able to observe the statistics data. related content ï to observe how the message_age period is calculated  see the ros 2 topic statistics demo . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling