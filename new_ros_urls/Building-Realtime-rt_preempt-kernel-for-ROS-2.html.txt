tutorials miscellaneous building a real-time linux kernel [community-contributed] edit on github building a real-time linux kernel [community-contributed] ï this tutorial begins with a clean ubuntu 20.04.1 install on intel x86_64. actual kernel is 5.4.0-54-generic, but we will install the latest stable rt_preempt version. to build the kernel you need at least 30gb free disk space. check https://wiki.linuxfoundation.org/realtime/start for the latest stable version, at the time of writing this is âlatest stable version 5.4-rtâ. if we click on the link , we get the exact version. currently it is patch-5.4.78-rt44.patch.gz. we create a directory in our home dir with mkdir ~/kernel and switch into it with cd ~/kernel we can go with a browser to https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/ and see if the version is there. you can download it from the site and move it manually from /downloads to the /kernel folder, or download it using wget by right clicking the link using âcopy link locationâ. example: wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.4.78.tar.gz unpack it with tar -xzf linux-5.4.78.tar.gz download rt_preempt patch matching the kernel version we just downloaded over at http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/ wget http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/older/patch-5.4.78-rt44.patch.gz unpack it with gunzip patch-5.4.78-rt44.patch.gz then switch into the linux directory with cd linux-5.4.78/ and patch the kernel with the realtime patch patch -p1 < ../patch-5.4.78-rt44.patch we simply want to use the config of our ubuntu installation, so we get the ubuntu config with cp /boot/config-5.4.0-54-generic .config open software & updates. in the ubuntu software menu tick the âsource codeâ box we need some tools to build kernel, install them with sudo apt-get build-dep linux sudo apt-get install libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf fakeroot to enable all ubuntu configurations, we simply use yes '' | make oldconfig then we need to enable rt_preempt in the kernel. we call make menuconfig and set the following # enable config_preempt_rt -> general setup -> preemption model ( fully preemptible kernel ( real-time )) ( x ) fully preemptible kernel ( real-time ) # enable config_high_res_timers -> general setup -> timers subsystem [ * ] high resolution timer support # enable config_no_hz_full -> general setup -> timers subsystem -> timer tick handling ( full dynticks system ( tickless )) ( x ) full dynticks system ( tickless ) # set config_hz_1000 (note: this is no longer in the general setup menu, go back twice) -> processor type and features -> timer frequency ( 1000 hz ) ( x ) 1000 hz # set cpu_freq_default_gov_performance [=y] -> power management and acpi options -> cpu frequency scaling -> cpu frequency scaling ( cpu_freq [= y ]) -> default cpufreq governor ( <choice> [= y ]) ( x ) performance save and exit menuconfig. now weâre going to build the kernel which will take quite some time. (10-30min on a modern cpu) make -j ` nproc ` deb-pkg after the build is finished check the deb packages ls ../*deb ../linux-headers-5.4.78-rt41_5.4.78-rt44-1_amd64.deb ../linux-image-5.4.78-rt44-dbg_5.4.78-rt44-1_amd64.deb ../linux-image-5.4.78-rt41_5.4.78-rt44-1_amd64.deb ../linux-libc-dev_5.4.78-rt44-1_amd64.deb then we install all kernel deb packages sudo dpkg -i ../*.deb now the real time kernel should be installed. reboot the system and check the new kernel version sudo reboot uname -a linux ros2host 5 .4.78-rt44 #1 smp preempt_rt fri nov 6 10:37:59 cet 2020 x86_64 xx other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling