tutorials beginner: cli tools recording and playing back data edit on github recording and playing back data ï goal: record data published on a topic and a service so you can replay and examine it any time. tutorial level: beginner time: 15 minutes background ï ros2 bag is a command line tool for recording data published on topics and services in your ros 2 system. it accumulates the data passed on any number of topics and services, then saves it in a database. you can then replay the data to reproduce the results of your tests and experiments. recording topics and services is also a great way to share your work and allow others to recreate it. prerequisites ï you should have ros2 bag installed as a part of your regular ros 2 setup. if you need to install ros 2, see the installation instructions . this tutorial talks  concepts covered in previous tutorials, like nodes , topics and services . it also uses the turtlesim package and service introspection demo . as always, donât forget to source ros 2 in every new terminal you open . managing topic data ï 1 setup ï youâll be recording your keyboard input in the turtlesim system to save and replay later on, so begin by starting up the /turtlesim and /teleop_turtle nodes. open a new terminal and run: ros2 run turtlesim turtlesim_node open another terminal and run: ros2 run turtlesim turtle_teleop_key letâs also make a new directory to store our saved recordings, just as good practice: linux macos windows mkdir bag_files cd bag_files mkdir bag_files cd bag_files md bag_files cd bag_files 2 choose a topic ï ros2 bag can record data from messages published to topics. to see the list of your systemâs topics, open a new terminal and run the command: ros2 topic list which will return: /parameter_events /rosout /turtle1/cmd_vel /turtle1/color_sensor /turtle1/pose in the topics tutorial, you learned that the /turtle_teleop node publishes commands on the /turtle1/cmd_vel topic to make the turtle move in turtlesim. to see the data that /turtle1/cmd_vel is publishing, run the command: ros2 topic echo /turtle1/cmd_vel nothing will show up at first because no data is being published by the teleop. return to the terminal where you ran the teleop and select it so itâs active. use the arrow keys to move the turtle around, and you will see data being published on the terminal running ros2 topic echo . linear: x: 2.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 0.0 --- 3 record topics ï 3.1 record a single topic ï to record the data published to a topic use the command syntax: ros2 bag record <topic_name> before running this command on your chosen topic, open a new terminal and move into the bag_files directory you created earlier, because the rosbag file will save in the directory where you run it. run the command: ros2 bag record /turtle1/cmd_vel you will see the following messages in the terminal (the date and time will be different): [info] [rosbag2_storage]: opened database 'rosbag2_2019_10_11-05_18_45'. [info] [rosbag2_transport]: listening for topics... [info] [rosbag2_transport]: subscribed to topic '/turtle1/cmd_vel' [info] [rosbag2_transport]: all requested topics are subscribed. stopping discovery... now ros2 bag is recording the data published on the /turtle1/cmd_vel topic. return to the teleop terminal and move the turtle around again. the movements donât matter, but try to make a recognizable pattern to see when you replay the data later. press ctrl+c to stop recording. the data will be accumulated in a new bag directory with a name in the pattern of rosbag2_year_month_day-hour_minute_second . this directory will contain a metadata.yaml along with the bag file in the recorded format. 3.2 record multiple topics ï you can also record multiple topics, as well as change the name of the file ros2 bag saves to. run the following command: ros2 bag record -o subset /turtle1/cmd_vel /turtle1/pose the -o option allows you to choose a unique name for your bag file. the following string, in this case subset , is the file name. to record more than one topic at a time, simply list each topic separated by a space. you will see the following message, confirming that both topics are being recorded. [info] [rosbag2_storage]: opened database 'subset'. [info] [rosbag2_transport]: listening for topics... [info] [rosbag2_transport]: subscribed to topic '/turtle1/cmd_vel' [info] [rosbag2_transport]: subscribed to topic '/turtle1/pose' [info] [rosbag2_transport]: all requested topics are subscribed. stopping discovery... you can move the turtle around and press ctrl+c when youâre finished. note there is another option you can add to the command, -a , which records all the topics on your system. 4 inspect topic data ï you can see details  your recording by running: ros2 bag info <bag_file_name> running this command on the subset bag file will return a list of information on the file: ros2 bag info subset files: subset.mcap bag size: 228.5 kib storage id: mcap duration: 48.47s start: oct 11 2019 06:09:09.12 (1570799349.12) end oct 11 2019 06:09:57.60 (1570799397.60) messages: 3013 topic information: topic: /turtle1/cmd_vel | type: geometry_msgs/msg/twist | count: 9 | serialization format: cdr topic: /turtle1/pose | type: turtlesim/msg/pose | count: 3004 | serialization format: cdr 5 play topic data ï before replaying the bag file, enter ctrl+c in the terminal where the teleop is running. then make sure your turtlesim window is visible so you can see the bag file in action. enter the command: ros2 bag play subset the terminal will return the message: [info] [rosbag2_storage]: opened database 'subset'. your turtle will follow the same path you entered while recording (though not 100% exactly; turtlesim is sensitive to small changes in the systemâs timing). because the subset file recorded the /turtle1/pose topic, the ros2 bag play command wonât quit for as long as you had turtlesim running, even if you werenât moving. this is because as long as the /turtlesim node is active, it publishes data on the /turtle1/pose topic at regular intervals. you may have noticed in the ros2 bag info example result above that the /turtle1/cmd_vel topicâs count information was only 9; thatâs how many times we pressed the arrow keys while recording. notice that /turtle1/pose has a count value of over 3000; while we were recording, data was published on that topic 3000 times. to get an idea of how often position data is published, you can run the command: ros2 topic hz /turtle1/pose managing service data ï 1 setup ï youâll be recording service data between introspection_client and introspection_service , then display and replay that same data later on. to record service data between service client and server, service introspection must be enabled on the node. letâs start introspection_client and introspection_service nodes and enable service introspection . you can see more details for service introspection demo . open a new terminal and run introspection_service , enabling service introspection : ros2 run demo_nodes_cpp introspection_service --ros-args -p service_configure_introspection:=contents open another terminal and run introspection_client , enabling service introspection : ros2 run demo_nodes_cpp introspection_client --ros-args -p client_configure_introspection:=contents 2 check service availability ï ros2 bag can only record data from available services. to see the list of your systemâs services, open a new terminal and run the command: ros2 service list which will return: /add_two_ints /introspection_client/describe_parameters /introspection_client/get_parameter_types /introspection_client/get_parameters /introspection_client/get_type_description /introspection_client/list_parameters /introspection_client/set_parameters /introspection_client/set_parameters_atomically /introspection_service/describe_parameters /introspection_service/get_parameter_types /introspection_service/get_parameters /introspection_service/get_type_description /introspection_service/list_parameters /introspection_service/set_parameters /introspection_service/set_parameters_atomically to check if service introspection is enabled on the client and service, run the command: ros2 service echo --flow-style /add_two_ints you should see service communication like below: info: event_type: request_sent stamp: sec: 1713995389 nanosec: 386809259 client_gid: [1, 15, 96, 219, 162, 1, 108, 201, 0, 0, 0, 0, 0, 0, 21, 3] sequence_number: 133 request: [{a: 2, b: 3}] response: [] --- 3 record services ï to record service data, the following options are supported. service data can be recorded with topics at the same time. to record specific services: ros2 bag record --service <service_names> to record all services: ros2 bag record --all-services run the command: ros2 bag record --service /add_two_ints you will see the following messages in the terminal (the date and time will be different): [info] [1713995957.643573503] [rosbag2_recorder]: press space for pausing/resuming [info] [1713995957.662067587] [rosbag2_recorder]: event publisher thread: starting [info] [1713995957.662067614] [rosbag2_recorder]: listening for topics... [info] [1713995957.666048323] [rosbag2_recorder]: subscribed to topic '/add_two_ints/_service_event' [info] [1713995957.666092458] [rosbag2_recorder]: recording... now ros2 bag is recording the service data published on the /add_two_ints service. to stop the recording, enter ctrl+c in the terminal. the data will be accumulated in a new bag directory with a name in the pattern of rosbag2_year_month_day-hour_minute_second . this directory will contain a metadata.yaml along with the bag file in the recorded format. 4 inspect service data ï you can see details  your recording by running: ros2 bag info <bag_file_name> running this command will return a list of information on the file: files: rosbag2_2024_04_24-14_59_17_0.mcap bag size: 15.1 kib storage id: mcap ros distro: rolling duration: 9.211s start: apr 24 2024 14:59:17.676 (1713995957.676) end: apr 24 2024 14:59:26.888 (1713995966.888) messages: 0 topic information: service: 1 service information: service: /add_two_ints | type: example_interfaces/srv/addtwoints | event count: 78 | serialization format: cdr 5 play service data ï before replaying the bag file, enter ctrl+c in the terminal where introspection_client is running. when introspection_client stops running, introspection_service also stops printing the result because there are no incoming requests. replaying the service data from the bag file will start sending the requests to introspection_service . enter the command: ros2 bag play --publish-service-requests <bag_file_name> the terminal will return the message: [info] [1713997477.870856190] [rosbag2_player]: set rate to 1 [info] [1713997477.877417477] [rosbag2_player]: adding keyboard callbacks. [info] [1713997477.877442404] [rosbag2_player]: press space for pause/resume [info] [1713997477.877447855] [rosbag2_player]: press cursor_right for play next message [info] [1713997477.877452655] [rosbag2_player]: press cursor_up for increase rate 10% [info] [1713997477.877456954] [rosbag2_player]: press cursor_down for decrease rate 10% [info] [1713997477.877573647] [rosbag2_player]: playback until timestamp: -1 your introspection_service terminal will once again start printing the following service messages: [info] [1713997478.090466075] [introspection_service]: incoming request a: 2 b: 3 this is because ros2 bag play sends the service request data from the bag file to the /add_two_ints service. we can also introspect service communication as ros2 bag play is playing it back to verify the introspection_service . run this command before ros2 bag play to see the introspection_service : ros2 service echo --flow-style /add_two_ints you can see the service request from the bag file and the service response from introspection_service . info: event_type: request_received stamp: sec: 1713998176 nanosec: 372700698 client_gid: [1, 15, 96, 219, 80, 2, 158, 123, 0, 0, 0, 0, 0, 0, 20, 4] sequence_number: 1 request: [{a: 2, b: 3}] response: [] --- info: event_type: response_sent stamp: sec: 1713998176 nanosec: 373016882 client_gid: [1, 15, 96, 219, 80, 2, 158, 123, 0, 0, 0, 0, 0, 0, 20, 4] sequence_number: 1 request: [] response: [{sum: 5}] summary ï you can record data passed on topics and services in your ros 2 system using the ros2 bag command. whether youâre sharing your work with others or introspecting your own experiments, itâs a great tool to know . next steps ï youâve completed the âbeginner: cli toolsâ tutorials! the next step is tackling the âbeginner: client librariesâ tutorials, starting with creating a workspace . related content ï a more thorough explanation of ros2 bag can be found in the readme here . for more information on service recording and playback can be found in the design document here . for more information on qos compatibility and ros2 bag , see rosbag2: overriding qos policies . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling