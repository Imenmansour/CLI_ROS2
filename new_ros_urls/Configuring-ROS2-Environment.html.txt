tutorials beginner: cli tools configuring environment edit on github configuring environment ï goal: this tutorial will show you how to prepare your ros 2 environment. tutorial level: beginner time: 5 minutes background ï ros 2 relies on the notion of combining workspaces using the shell environment. âworkspaceâ is a ros term for the location on your system where youâre developing with ros 2. the core ros 2 workspace is called the underlay. subsequent local workspaces are called overlays. when developing with ros 2, you will typically have several workspaces active concurrently. combining workspaces makes developing against different versions of ros 2, or against different sets of packages, easier. it also allows the installation of several ros 2 distributions (or âdistrosâ, e.g. dashing and eloquent) on the same computer and switching between them. this is accomplished by sourcing setup files every time you open a new shell, or by adding the source command to your shell startup script once. without sourcing the setup files, you wonât be able to access ros 2 commands, or find or use ros 2 packages. in other words, you wonât be able to use ros 2. prerequisites ï before starting these tutorials, install ros 2 by following the instructions on the ros 2 installation page. the commands used in this tutorial assume you followed the binary packages installation guide for your operating system (deb packages for linux). you can still follow along if you built from source, but the path to your setup files will likely be different. you also wonât be able to use the sudo apt install ros-<distro>-<package> command (used frequently in the beginner level tutorials) if you install from source. if you are using linux or macos, but are not already familiar with the shell, this tutorial will help. tasks ï 1 source the setup files ï you will need to run this command on every new shell you open to have access to the ros 2 commands, like so: linux macos windows # replace ".bash" with your shell if you're not using bash # possible values are: setup.bash, setup.sh, setup.zsh source /opt/ros/jazzy/setup.bash . ~/ros2_install/ros2-osx/setup.bash call c:\dev\ros2\local_setup.bat note the exact command depends on where you installed ros 2. if youâre having problems, ensure the file path leads to your installation. 2 add sourcing to your shell startup script ï if you donât want to have to source the setup file every time you open a new shell (skipping task 1), then you can add the command to your shell startup script: linux macos windows echo "source /opt/ros/jazzy/setup.bash" >> ~/.bashrc to undo this, locate your systemâs shell startup script and remove the appended source command. echo "source ~/ros2_install/ros2-osx/setup.bash" >> ~/.bash_profile to undo this, locate your systemâs shell startup script and remove the appended source command. only for powershell users, create a folder in âmy documentsâ called âwindowspowershellâ. within âwindowspowershellâ, create file âmicrosoft.powershell_profile.ps1â. inside the file, paste: c:\dev\ros2_jazzy\local_setup.ps1 powershell will request permission to run this script everytime a new shell is opened. to avoid that issue you can run: unblock-file c:\dev\ros2_jazzy\local_setup.ps1 to undo this, remove the new âmicrosoft.powershell_profile.ps1â file. 3 check environment variables ï sourcing ros 2 setup files will set several environment variables necessary for operating ros 2. if you ever have problems finding or using your ros 2 packages, make sure that your environment is properly set up using the following command: linux macos windows printenv | grep -i ros printenv | grep -i ros set | findstr -i ros check that variables like ros_distro and ros_version are set. ros_version = 2 ros_python_version = 3 ros_distro = jazzy if the environment variables are not set correctly, return to the ros 2 package installation section of the installation guide you followed. if you need more specific help (because environment setup files can come from different places), you can get answers from the community. 3.1 the ros_domain_id variable ï see the domain id article for details on ros domain ids. once you have determined a unique integer for your group of ros 2 nodes, you can set the environment variable with the following command: linux macos windows export ros_domain_id=<your_domain_id> to maintain this setting between shell sessions, you can add the command to your shell startup script: echo "export ros_domain_id=<your_domain_id>" >> ~/.bashrc export ros_domain_id=<your_domain_id> to maintain this setting between shell sessions, you can add the command to your shell startup script: echo "export ros_domain_id=<your_domain_id>" >> ~/.bash_profile set ros_domain_id=<your_domain_id> if you want to make this permanent between shell sessions, also run: setx ros_domain_id <your_domain_id> 3.2 the ros_automatic_discovery_range variable ï by default, ros 2 communication is not limited to localhost. ros_automatic_discovery_range environment variable allows you to limit ros 2 discovery range. using ros_automatic_discovery_range is helpful in certain settings, such as classrooms, where multiple robots may publish to the same topic causing strange behaviors. see improved dynamic discovery for more details. summary ï the ros 2 development environment needs to be correctly configured before use. this can be done in two ways: either sourcing the setup files in every new shell you open, or adding the source command to your startup script. if you ever face any problems locating or using packages with ros 2, the first thing you should do is check your environment variables and ensure they are set to the version and distro you intended. next steps ï now that you have a working ros 2 installation and you know how to source its setup files, you can start learning the ins and outs of ros 2 with the turtlesim tool . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling