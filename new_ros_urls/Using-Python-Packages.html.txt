how-to guides using python packages with ros 2 edit on github using python packages with ros 2 ï goal: explain how to interoperate with other python packages from the ros 2 ecosystem. note a cautionary note, if you intended to use pre-packaged binaries (either deb files, or the binary archive distributions), the python interpreter must match what was used to build the original binaries. if you intend to use something like virtualenv or pipenv , make sure to use the system interpreter. if you use something like conda , it is very likely that the interpreter will not match the system interpreter and will be incompatible with ros 2 binaries. installing via rosdep ï the fastest way to include third-party python packages is to use their corresponding rosdep keys, if available. rosdep keys can be checked via: https://github.com/ros/rosdistro/blob/master/rosdep/base.yaml https://github.com/ros/rosdistro/blob/master/rosdep/python.yaml these rosdep keys can be added to your package.xml file, which indicates to the build system that your package (and dependent packages) depend on those keys. in a new workspace, you can also quickly install all rosdep keys with: rosdep install -yr ./path/to/your/workspace if there arenât currently rosdep keys for the package that you are interested in, it is possible to add them by following the rosdep key contribution guide . to learn more  the rosdep tool and how it works, consult the rosdep documentation . installing via a package manager ï if you donât want to make a rosdep key, but the package is available in your system package manager (eg apt ), you can install and use the package that way: sudo apt install python3-serial if the package is available on the python package index (pypi) and you want to install globally on your system: python3 - m pip install - u pyserial if the package is available on pypi and you want to install locally to your user: python3 -m pip install -u --user pyserial installing via a virtual environment ï first, create a colcon workspace: mkdir -p ~/colcon_venv/src cd ~/colcon_venv/ then setup your virtual environment: # make a virtual env and activate it virtualenv -p python3 ./venv source ./venv/bin/activate # make sure that colcon doesnât try to build the venv touch ./venv/colcon_ignore next, install the python packages that you want in your virtual environment: python3 -m pip install gtsam pyserialâ etc now you can build your workspace and run your python node that depends on packages installed in your virtual environment. # source jazzy and build source /opt/ros/jazzy/setup.bash colcon build note if you want to release your package using bloom, you should add the packages you require to rosdep , see the rosdep key contribution guide . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling