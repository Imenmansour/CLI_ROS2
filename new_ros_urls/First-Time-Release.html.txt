how-to guides releasing a package first time release edit on github first time release ï this guide explains how to release ros 2 packages that you have not released before. due to numerous options available when releasing ros packages, this guide intends to cover the most common scenario and does not cover every corner-case. be part of a release team ï you must be part of a release team . if you are not part of a release team yet, follow either: join a release team start a new release team create a new release repository ï you need a release repository to release a package. follow create a new release repository . install dependencies ï install tools that you will use in the upcoming steps according to your platform: deb (eg. ubuntu) rpm (eg. rhel) other sudo apt install python3-bloom python3-catkin-pkg sudo dnf install python3-bloom python3-catkin_pkg pip3 install -u bloom catkin_pkg make sure you have rosdep initialized: sudo rosdep init rosdep update note that the rosdep init command may fail if it has already been initialized in the past; this can safely be ignored. set up a personal access token ï warning if the file ~/.config/bloom exists on your computer, it is likely that you have done this before so you should skip this section. during the release process, multiple https git operations will be performed that require password authentication. to avoid being repeatedly asked for a password, a personal access token (pat) will be set up. if you have multi-factor authentication setup on your github account, you must setup a personal access token. create a personal access token by: log in to github and go to personal access tokens . click the generate new token button. in the dropdown, select generate new token (classic) set note to something like bloom token . set expiration to no expiration . tick the public_repo and workflow checkboxes. click the generate token button. after you have created the token, you will end up back at the personal access tokens page. copy the alphanumeric token that is highlighted in green. save your github username and pat to a new file called ~/.config/bloom , with the format below: { "github_user": "<your-github-username>", "oauth_token": "<token-you-created-for-bloom>" } ensure repositories are up-to-date ï make sure that: your repository is hosted on a remote such as github. you have a clone of the repository on your computer and are on the right branch. both the remote repository and your clone are up-to-date. generate changelog ï generate a changelog.rst file per package in your repo using the following command: catkin_generate_changelog --all open all changelog.rst files in an editor. you will see that catkin_generate_changelog has auto-generated a forthcoming section with notes from commit messages: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ changelog for package your_package ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ forthcoming ----------- * you can modify this commit message * and this clean up the list of commit messages to concisely convey the notable changes that have been made to the packages since the last release, and commit all the changelog.rst files. do not modify the forthcoming header. bump the package version ï every release of the package must have a unique version number higher than the previous release. run: catkin_prepare_release which performs the following: increases the package version in package.xml replaces the heading forthcoming with version (date) (eg. 0.0.1 (2022-01-08) ) in changelog.rst commits those changes creates a tag (eg. 0.0.1 ) pushes the changes and the tag to your remote repository note by default the patch version of the package is incremented, such as from 0.0.0 to 0.0.1 . to increment the minor or major version instead, run catkin_prepare_release --bump minor or catkin_prepare_release --bump major . for more details, see catkin_prepare_release --help . bloom release ï run the following command, replacing my_repo with the name of your repository: bloom-release --new-track --rosdistro jazzy --track jazzy my_repo tip --new-track tells bloom to create a new track and configure it. --rosdistro jazzy indicates that this release is for the jazzy distro --track jazzy indicates that you want the track name to be jazzy you will be prompted to enter information to configure a new track. in a common scenario such as: your packages are in a repository called my_repo you are releasing a branch called main the repository is hosted on github at https://github.com/my_organization/my_repo.git your release repository is at https://github.com/ros2-gbp/my_repo-release.git you should respond to the prompts as following: configuration value release repository url https://github.com/ros2-gbp/my_repo-release.git repository name my_repo upstream repository uri https://github.com/my_organization/my_repo.git upstream vcs type version release tag upstream devel branch main ros distro patches directory release repository push url note an empty cell in the table indicates that the default value should be used. simply respond to the prompt by pressing enter. bloom will automatically create a pull request for you against rosdistro . next steps ï once your pull request has been submitted, usually within one or two days, one of the maintainers of rosdistro will review and merge your pull request. if your package build is successful, in 24-48 hours your packages will become available in the ros-testing repository, where you can test your pre-release binaries . approximately every two to four weeks, the distributionâs release manager manually synchronizes the contents of ros-testing into the main ros repository. this is when your packages actually become available to the rest of the ros community. to get updates on when the next synchronization (sync) is coming, subscribe to the packaging and release management category on ros discourse . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling