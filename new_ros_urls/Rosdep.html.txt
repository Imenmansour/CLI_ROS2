tutorials intermediate managing dependencies with rosdep edit on github managing dependencies with rosdep ï goal: manage external dependencies using rosdep . tutorial level: intermediate time: 5 minutes this tutorial will explain how to manage external dependencies using rosdep . warning currently rosdep only works on linux and macos; windows is not supported. there are long-term plans to add support for windows to https://github.com/ros-infrastructure/rosdep . what is rosdep? ï rosdep is a dependency management utility that can work with packages and external libraries. it is a command-line utility for identifying and installing dependencies to build or install a package. rosdep is not a package manager in its own right; it is a meta-package manager that uses its own knowledge of the system and the dependencies to find the appropriate package to install on a particular platform. the actual installation is done using the system package manager (e.g. apt on debian/ubuntu, dnf on fedora/rhel, etc). it is most often invoked before building a workspace, where it is used to install the dependencies of the packages within that workspace. it has the ability to work over a single package or over a directory of packages (e.g. workspace). note while the name suggests it is for ros, rosdep is semi-agnostic to ros. you can utilize this powerful tool in non-ros software projects by installing it as a standalone python package. successfully running rosdep relies on rosdep keys to be available, which can be downloaded from a public git repository with a few simple commands. a little  package.xml files ï the package.xml is the file in your software where rosdep finds the set of dependencies. it is important that the list of dependencies in the package.xml is complete and correct, which allows all of the tooling to determine the packages dependencies. missing or incorrect dependencies can lead to users not being able to use your package, to packages in a workspace being built out-of-order, and to packages not being able to be released. the dependencies in the package.xml file are generally referred to as ârosdep keysâ. these dependencies are manually populated in the package.xml file by the packageâs creators and should be an exhaustive list of any non-builtin libraries and packages it requires. these are represented in the following tags (see rep-149 for the full specification): <depend> ï these are dependencies that should be provided at both build time and run time for your package. for c++ packages, if in doubt, use this tag. pure python packages generally donât have a build phase, so should never use this and should use <exec_depend> instead. <build_depend> ï if you only use a particular dependency for building your package, and not at execution time, you can use the <build_depend> tag. with this type of dependency, an installed binary of your package does not require that particular package to be installed. however, that can create a problem if your package exports a header that includes a header from this dependency. in that case you also need a <build_export_depend> . <build_export_depend> ï if you export a header that includes a header from a dependency, it will be needed by other packages that <build_depend> on yours. this mainly applies to headers and cmake configuration files. library packages referenced by libraries you export should normally specify <depend> , because they are also needed at execution time. <exec_depend> ï this tag declares dependencies for shared libraries, executables, python modules, launch scripts and other files required when running your package. <test_depend> ï this tag declares dependencies needed only by tests. dependencies here should not be duplicated with keys specified by <build_depend> , <exec_depend> , or <depend> . how does rosdep work? ï rosdep will check for package.xml files in its path or for a specific package and find the rosdep keys stored within. these keys are then cross-referenced against a central index to find the appropriate ros package or software library in various package managers. finally, once the packages are found, they are installed and ready to go! rosdep works by retrieving the central index on to your local machine so that it doesnât have to access the network every time it runs (on debian/ubuntu the configuration for it is stored in /etc/ros/rosdep/sources.list.d/20-default.list ). the central index is known as rosdistro , which may be found online . weâll explore that more in the next section. how do i know what keys to put in my package.xml? ï great question, iâm glad you asked! if the package you want to depend in your package is ros-based, and has been released into the ros ecosystem [ 1 ] , e.g. nav2_bt_navigator , you may simply use the name of the package. you can find a list of all released ros packages in https://github.com/ros/rosdistro at <distro>/distribution.yaml (e.g. humble/distribution.yaml ) for your given ros distribution. if you want to depend on a non-ros package, something often called âsystem dependenciesâ, you will need to find the keys for a particular library. in general, there are two files of interest: rosdep/base.yaml contains the apt system dependencies rosdep/python.yaml contains the python dependencies to find a key, search for your library in these files and find the name. this is the key to put in a package.xml file. for example, imagine a package had a dependency on doxygen because it is a great piece of software that cares  quality documentation (hint hint). we would search rosdep/base.yaml for doxygen and come across: doxygen : arch : [ doxygen ] debian : [ doxygen ] fedora : [ doxygen ] freebsd : [ doxygen ] gentoo : [ app-doc/doxygen ] macports : [ doxygen ] nixos : [ doxygen ] openembedded : [ doxygen@meta-oe ] opensuse : [ doxygen ] rhel : [ doxygen ] ubuntu : [ doxygen ] that means our rosdep key is doxygen , which would resolve to those various names in different operating systemâs package managers for installation. what if my library isnât in rosdistro? ï if your library isnât in rosdistro , you can experience the greatness that is open-source software development: you can add it yourself! pull requests for rosdistro are typically merged well within a week. detailed instructions may be found here for how to contribute new rosdep keys. if for some reason these may not be contributed openly, it is possible to fork rosdistro and maintain a alternate index for use. how do i use the rosdep tool? ï rosdep installation ï if you are using rosdep with ros, it is conveniently packaged along with the ros distribution. this is the recommended way to get rosdep . you can install it with: apt-get install python3-rosdep note on debian and ubuntu, there is another, similarly named package called python3-rosdep2 . if that package is installed, make sure to remove it before installing python3-rosdep . if you are using rosdep outside of ros, the system package may not be available. in that case, you can install it directly from https://pypi.org : pip install rosdep rosdep operation ï now that we have some understanding of rosdep , package.xml , and rosdistro , weâre ready to use the utility itself! firstly, if this is the first time using rosdep , it must be initialized via: sudo rosdep init rosdep update this will initialize rosdep and update will update the locally cached rosdistro index. it is a good idea to update rosdep on occasion to get the latest index. finally, we can run rosdep install to install dependencies. typically, this is run over a workspace with many packages in a single call to install all dependencies. a call for that would appear as the following, if in the root of the workspace with directory src containing source code. rosdep install --from-paths src -y --ignore-src breaking that down: --from-paths src specifies the path to check for package.xml files to resolve keys for -y means to default yes to all prompts from the package manager to install without prompts --ignore-src means to ignore installing dependencies, even if a rosdep key exists, if the package itself is also in the workspace. there are additional arguments and options available. use rosdep -h to see them, or look at the more complete documentation for rosdep at http://docs.ros.org/en/independent/api/rosdep/html/ . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling