tutorials demos using quality-of-service settings for lossy networks edit on github using quality-of-service settings for lossy networks ï background ï  read the documentation page  qos settings for background information on available support in ros 2. in this demo, we will spawn a node that publishes a camera image and another that subscribes to the image and shows it on the screen. we will then simulate a lossy network connection between them and show how different quality of service settings handle the bad link. prerequisites ï this tutorial assumes you have a working ros 2 installation and opencv. see the opencv documentation for its installation instructions. you will also need the ros package image_tools . linux binaries from source sudo apt-get install ros-jazzy-image-tools # clone and build the demos repo using the branch that matches your installation git clone https://github.com/ros2/demos.git -b jazzy run the demo ï before running the demo, make sure you have a working webcam connected to your computer. once youâve installed ros 2, source your setup file: linux macos windows . <path to ros 2 install space>/setup.bash . <path to ros 2 install space>/setup.bash call <path to ros 2 install space>/local_setup.bat then run: ros2 run image_tools showimage nothing will happen yet. showimage is a subscriber node that is waiting for a publisher on the image topic. note: you have to close the showimage process with ctrl-c later. you canât just close the window. in a separate terminal, source the install file and run the publisher node: ros2 run image_tools cam2image this will publish an image from your webcam. in case you donât have a camera attached to your computer, there is a commandline option which publishes predefined images. ros2 run image_tools cam2image --ros-args -p burger_mode: = true in this window, youâll see terminal output: [ info ] [ 1715662452 .055277255 ] [ cam2image ] : publishing image #1 [ info ] [ 1715662452 .119336061 ] [ cam2image ] : publishing image #2 [ info ] [ 1715662452 .187315139 ] [ cam2image ] : publishing image #3 ... a window will pop up with the title âviewâ showing your camera feed. in the first window, youâll see output from the subscriber: [ info ] [ 1715662452 .188906764 ] [ showimage ] : received image #camera_frame received image #camera_frame [ info ] [ 1715662452 .252836919 ] [ showimage ] : received image #camera_frame received image #camera_frame [ info ] [ 1715662452 .320878578 ] [ showimage ] : received image #camera_frame received image #camera_frame ... note macos users: if these examples do not work or you receive an error like ddsi_conn_write failed -1 then youâll need to increase your system wide udp packet size:  sudo sysctl -w net.inet.udp.recvspace = 209715  sudo sysctl -w net.inet.udp.maxdgram = 65500 these changes will not persist a reboot. if you want the changes to persist, add these lines to /etc/sysctl.conf (create the file if it doesnât exist already): net.inet.udp.recvspace = 209715 net.inet.udp.maxdgram = 65500 command line options ï in one of your terminals, add a -h flag to the original command: ros2 run image_tools showimage -h add network traffic ï warning this section of the demo wonât work on rtiâs connext dds and fast-dds. when running multiple nodes in the same host, the those dds implementation use shared memory along with the loopback interface. degrading the loopback interface throughput wonât affect shared memory, thus traffic between the two nodes wonât be affected. note this next section is linux-specific. however, for macos and windows you can achieve a similar effect with the utilities ânetwork link conditionerâ (part of the xcode tool suite) and âclumsyâ ( http://jagt.github.io/clumsy/index.html ), respectively, but they will not be covered in this tutorial. we are going to use the linux network traffic control utility, tc ( http://linux.die.net/man/8/tc ). sudo tc qdisc add dev lo root netem loss 5 % this magical incantation will simulate 5% packet loss over the local loopback device. if you use a higher resolution of the images (e.g. --ros-args -p width:=640 -p height:=480 ) you might want to try a lower packet loss rate (e.g. 1% ). next we start the cam2image and showimage , and weâll soon notice that both programs seem to have slowed down the rate at which images are transmitted. this is caused by the behavior of the default qos settings. enforcing reliability on a lossy channel means that the publisher (in this case, cam2image ) will resend the network packets until it receives acknowledgement from the consumer (i.e. showimage ). letâs now try running both programs, but with more suitable settings. first of all, weâll use the -p reliability:=best_effort option to enable best effort communication. the publisher will now just attempt to deliver the network packets, and donât expect acknowledgement from the consumer. we see now that some of the frames on the showimage side were dropped, so the frame numbers in the shell running showimage wonât be consecutive anymore: when youâre done, remember to delete the queueing discipline: sudo tc qdisc delete dev lo root netem loss 5 % other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling