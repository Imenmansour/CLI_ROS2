tutorials beginner: cli tools launching nodes edit on github launching nodes ï goal: use a command line tool to launch multiple nodes at once. tutorial level: beginner time: 5 minutes background ï in most of the introductory tutorials, you have been opening new terminals for every new node you run. as you create more complex systems with more and more nodes running simultaneously, opening terminals and reentering configuration details becomes tedious. launch files allow you to start up and configure a number of executables containing ros 2 nodes simultaneously. running a single launch file with the ros2 launch command will start up your entire system - all nodes and their configurations - at once. prerequisites ï before starting these tutorials, install ros 2 by following the instructions on the ros 2 installation page. the commands used in this tutorial assume you followed the binary packages installation guide for your operating system (deb packages for linux). you can still follow along if you built from source, but the path to your setup files will likely be different. you also wonât be able to use the sudo apt install ros-<distro>-<package> command (used frequently in the beginner level tutorials) if you install from source. if you are using linux and are not already familiar with the shell, this tutorial will help. tasks ï running a launch file ï open a new terminal and run: ros2 launch turtlesim multisim.launch.py this command will run the following launch file: # turtlesim/launch/multisim.launch.py from launch import launchdescription import launch_ros.actions def generate_launch_description (): return launchdescription ([ launch_ros . actions . node ( namespace = "turtlesim1" , package = 'turtlesim' , executable = 'turtlesim_node' , output = 'screen' ), launch_ros . actions . node ( namespace = "turtlesim2" , package = 'turtlesim' , executable = 'turtlesim_node' , output = 'screen' ), ]) note the launch file above is written in python, but you can also use xml and yaml to create launch files. you can see a comparison of these different ros 2 launch formats in using python, xml, and yaml for ros 2 launch files . this will run two turtlesim nodes: for now, donât worry  the contents of this launch file. you can find more information on ros 2 launch in the ros 2 launch tutorials . (optional) control the turtlesim nodes ï now that these nodes are running, you can control them like any other ros 2 nodes. for example, you can make the turtles drive in opposite directions by opening up two additional terminals and running the following commands: in the second terminal: ros2 topic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}" in the third terminal: ros2 topic pub /turtlesim2/turtle1/cmd_vel geometry_msgs/msg/twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}" after running these commands, you should see something like the following: summary ï the significance of what youâve done so far is that youâve run two turtlesim nodes with one command. once you learn to write your own launch files, youâll be able to run multiple nodes - and set up their configuration - in a similar way, with the ros2 launch command. for more tutorials on ros 2 launch files, see the main launch file tutorial page . next steps ï in the next tutorial, recording and playing back data , youâll learn  another helpful tool, ros2 bag . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling