home repos fmi_adapter fmi_adapter humble iron jazzy rolling noetic older ardent bouncy crystal eloquent dashing galactic foxy lunar jade indigo hydro kinetic melodic fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 0 assets 16 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 2.1.2 license apache license 2.0 build type ament_cmake use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version humble last updated 2023-06-09 dev status maintained ci status no continuous integration released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors no additional authors. fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros 2 package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter_node fmi_adapter provides a ros node fmi_adapter_node (class fmiadapternode derived from lifecyclenode ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros node parameters and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter_node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . for this purpose, fmi_adapter depends on the fmilibrary_vendor package, which downloads and builds the fmi library using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.hpp from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.hpp" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. rclcpp::duration stepsize(0.001); auto adapter = std::make_shared<fmi_adapter::fmiadapter>(get_logger(), fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: auto  = create_<std_msgs::msg::float64>("angle_x", 1000, [this](std_msgs::msg::float64::sharedptr msg) { adapter->setinputvalue("anglex", now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter->getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter->dostepsuntil(..) . for example: auto timer = create_wall_timer(update_period, [this]() { adapter->dostepsuntil(now()); double y = adapter->getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter->getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter->setinitialvalue("dampingparam", 0.21); adapter->setinitialvalue("anglex", 1.3); the function adapter->initializefromrosparameters(get_node_parameters_interface()) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: as last setup step, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter->exitinitializationmode(now()); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 2.1.2 (2023-04-13) updated link to lifecycle_node.hpp. updated include get_env.h to env.h. contributors: ralph lange 2.1.1 (2021-06-11) adapted to statically typed parameters introduced in galactic. 2.1.0 (2021-03-24) adapted launch files to api changes. 2.0.0 (2021-03-24) added function \'getvalue\' to return value of any given variable name co-authored-by: sebastian zarnack < sebastian.zarnack@eas.iis.fraunhofer.de > improved readability of unit tests by chrono literals. replaced use of deprecated duration ctor. added virtual to lifecycle callbacks, as in interface. 0.1.8 (2020-05-14) prepared for foxy release. 0.1.7 (2020-01-30) fixed sporadic exception in case of small external steps. fixed fmulocation argument for fmi2_import_instantiate. 0.1.6 (2019-11-05) release for ros 2 eloquent. changed build files for use of fmilibrary_vendor package. 0.1.5 (2019-05-24) adapted to new dashing features, including qos, parameter declaration and node composition. 0.1.4 (2019-05-23) fixed link to fmu-sdk. 0.1.3 (2019-02-01) fixed install target location of shared library. improved code snippets on use of fmiadapter class in readme. 0.1.2 (2019-01-25) cleaned up dependency entries in package.xml. added explicit target dependencies for parallel building. 0.1.1 (2019-01-23) fixed missing testing and launch dependencies. 0.1.0 (2019-01-18) initial version for ros 2, ported from https://github.com/boschresearch/fmi_adapter/ wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 rcl_interfaces 1 rclcpp 1 rclcpp_components 1 rclcpp_lifecycle 2 std_msgs 1 fmilibrary_vendor 1 ament_cmake 1 launch 2 launch_ros 1 ament_cmake_gmock 1 ament_cmake_gtest 1 ament_cmake_pytest 1 ament_lint_auto 1 ament_lint_common 1 launch_testing 1 rcutils system dependencies no direct system dependencies. dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files no launch files found messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 0 assets 16 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 2.1.2 license apache license 2.0 build type ament_cmake use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version rolling last updated 2023-06-09 dev status maintained ci status no continuous integration released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors no additional authors. fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros 2 package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter_node fmi_adapter provides a ros node fmi_adapter_node (class fmiadapternode derived from lifecyclenode ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros node parameters and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter_node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . for this purpose, fmi_adapter depends on the fmilibrary_vendor package, which downloads and builds the fmi library using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.hpp from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.hpp" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. rclcpp::duration stepsize(0.001); auto adapter = std::make_shared<fmi_adapter::fmiadapter>(get_logger(), fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: auto  = create_<std_msgs::msg::float64>("angle_x", 1000, [this](std_msgs::msg::float64::sharedptr msg) { adapter->setinputvalue("anglex", now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter->getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter->dostepsuntil(..) . for example: auto timer = create_wall_timer(update_period, [this]() { adapter->dostepsuntil(now()); double y = adapter->getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter->getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter->setinitialvalue("dampingparam", 0.21); adapter->setinitialvalue("anglex", 1.3); the function adapter->initializefromrosparameters(get_node_parameters_interface()) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: as last setup step, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter->exitinitializationmode(now()); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 2.1.2 (2023-04-13) updated link to lifecycle_node.hpp. updated include get_env.h to env.h. contributors: ralph lange 2.1.1 (2021-06-11) adapted to statically typed parameters introduced in galactic. 2.1.0 (2021-03-24) adapted launch files to api changes. 2.0.0 (2021-03-24) added function \'getvalue\' to return value of any given variable name co-authored-by: sebastian zarnack < sebastian.zarnack@eas.iis.fraunhofer.de > improved readability of unit tests by chrono literals. replaced use of deprecated duration ctor. added virtual to lifecycle callbacks, as in interface. 0.1.8 (2020-05-14) prepared for foxy release. 0.1.7 (2020-01-30) fixed sporadic exception in case of small external steps. fixed fmulocation argument for fmi2_import_instantiate. 0.1.6 (2019-11-05) release for ros 2 eloquent. changed build files for use of fmilibrary_vendor package. 0.1.5 (2019-05-24) adapted to new dashing features, including qos, parameter declaration and node composition. 0.1.4 (2019-05-23) fixed link to fmu-sdk. 0.1.3 (2019-02-01) fixed install target location of shared library. improved code snippets on use of fmiadapter class in readme. 0.1.2 (2019-01-25) cleaned up dependency entries in package.xml. added explicit target dependencies for parallel building. 0.1.1 (2019-01-23) fixed missing testing and launch dependencies. 0.1.0 (2019-01-18) initial version for ros 2, ported from https://github.com/boschresearch/fmi_adapter/ wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 rcl_interfaces 1 rclcpp 1 rclcpp_components 1 rclcpp_lifecycle 2 std_msgs 1 fmilibrary_vendor 1 ament_cmake 1 launch 2 launch_ros 1 ament_cmake_gmock 1 ament_cmake_gtest 1 ament_cmake_pytest 1 ament_lint_auto 1 ament_lint_common 1 launch_testing 1 rcutils system dependencies no direct system dependencies. dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files no launch files found messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 0 assets 16 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 2.1.2 license apache license 2.0 build type ament_cmake use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version rolling last updated 2023-06-09 dev status maintained ci status no continuous integration released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors no additional authors. fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros 2 package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter_node fmi_adapter provides a ros node fmi_adapter_node (class fmiadapternode derived from lifecyclenode ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros node parameters and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter_node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . for this purpose, fmi_adapter depends on the fmilibrary_vendor package, which downloads and builds the fmi library using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.hpp from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.hpp" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. rclcpp::duration stepsize(0.001); auto adapter = std::make_shared<fmi_adapter::fmiadapter>(get_logger(), fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: auto  = create_<std_msgs::msg::float64>("angle_x", 1000, [this](std_msgs::msg::float64::sharedptr msg) { adapter->setinputvalue("anglex", now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter->getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter->dostepsuntil(..) . for example: auto timer = create_wall_timer(update_period, [this]() { adapter->dostepsuntil(now()); double y = adapter->getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter->getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter->setinitialvalue("dampingparam", 0.21); adapter->setinitialvalue("anglex", 1.3); the function adapter->initializefromrosparameters(get_node_parameters_interface()) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: as last setup step, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter->exitinitializationmode(now()); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 2.1.2 (2023-04-13) updated link to lifecycle_node.hpp. updated include get_env.h to env.h. contributors: ralph lange 2.1.1 (2021-06-11) adapted to statically typed parameters introduced in galactic. 2.1.0 (2021-03-24) adapted launch files to api changes. 2.0.0 (2021-03-24) added function \'getvalue\' to return value of any given variable name co-authored-by: sebastian zarnack < sebastian.zarnack@eas.iis.fraunhofer.de > improved readability of unit tests by chrono literals. replaced use of deprecated duration ctor. added virtual to lifecycle callbacks, as in interface. 0.1.8 (2020-05-14) prepared for foxy release. 0.1.7 (2020-01-30) fixed sporadic exception in case of small external steps. fixed fmulocation argument for fmi2_import_instantiate. 0.1.6 (2019-11-05) release for ros 2 eloquent. changed build files for use of fmilibrary_vendor package. 0.1.5 (2019-05-24) adapted to new dashing features, including qos, parameter declaration and node composition. 0.1.4 (2019-05-23) fixed link to fmu-sdk. 0.1.3 (2019-02-01) fixed install target location of shared library. improved code snippets on use of fmiadapter class in readme. 0.1.2 (2019-01-25) cleaned up dependency entries in package.xml. added explicit target dependencies for parallel building. 0.1.1 (2019-01-23) fixed missing testing and launch dependencies. 0.1.0 (2019-01-18) initial version for ros 2, ported from https://github.com/boschresearch/fmi_adapter/ wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 rcl_interfaces 1 rclcpp 1 rclcpp_components 1 rclcpp_lifecycle 2 std_msgs 1 fmilibrary_vendor 1 ament_cmake 1 launch 2 launch_ros 1 ament_cmake_gmock 1 ament_cmake_gtest 1 ament_cmake_pytest 1 ament_lint_auto 1 ament_lint_common 1 launch_testing 1 rcutils system dependencies no direct system dependencies. dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files no launch files found messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 0 assets 16 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 2.1.2 license apache license 2.0 build type ament_cmake use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version rolling last updated 2023-06-09 dev status maintained ci status no continuous integration released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors no additional authors. fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros 2 package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter_node fmi_adapter provides a ros node fmi_adapter_node (class fmiadapternode derived from lifecyclenode ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros node parameters and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter_node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . for this purpose, fmi_adapter depends on the fmilibrary_vendor package, which downloads and builds the fmi library using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.hpp from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.hpp" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. rclcpp::duration stepsize(0.001); auto adapter = std::make_shared<fmi_adapter::fmiadapter>(get_logger(), fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: auto  = create_<std_msgs::msg::float64>("angle_x", 1000, [this](std_msgs::msg::float64::sharedptr msg) { adapter->setinputvalue("anglex", now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter->getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter->dostepsuntil(..) . for example: auto timer = create_wall_timer(update_period, [this]() { adapter->dostepsuntil(now()); double y = adapter->getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter->getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter->setinitialvalue("dampingparam", 0.21); adapter->setinitialvalue("anglex", 1.3); the function adapter->initializefromrosparameters(get_node_parameters_interface()) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: as last setup step, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter->exitinitializationmode(now()); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 2.1.2 (2023-04-13) updated link to lifecycle_node.hpp. updated include get_env.h to env.h. contributors: ralph lange 2.1.1 (2021-06-11) adapted to statically typed parameters introduced in galactic. 2.1.0 (2021-03-24) adapted launch files to api changes. 2.0.0 (2021-03-24) added function \'getvalue\' to return value of any given variable name co-authored-by: sebastian zarnack < sebastian.zarnack@eas.iis.fraunhofer.de > improved readability of unit tests by chrono literals. replaced use of deprecated duration ctor. added virtual to lifecycle callbacks, as in interface. 0.1.8 (2020-05-14) prepared for foxy release. 0.1.7 (2020-01-30) fixed sporadic exception in case of small external steps. fixed fmulocation argument for fmi2_import_instantiate. 0.1.6 (2019-11-05) release for ros 2 eloquent. changed build files for use of fmilibrary_vendor package. 0.1.5 (2019-05-24) adapted to new dashing features, including qos, parameter declaration and node composition. 0.1.4 (2019-05-23) fixed link to fmu-sdk. 0.1.3 (2019-02-01) fixed install target location of shared library. improved code snippets on use of fmiadapter class in readme. 0.1.2 (2019-01-25) cleaned up dependency entries in package.xml. added explicit target dependencies for parallel building. 0.1.1 (2019-01-23) fixed missing testing and launch dependencies. 0.1.0 (2019-01-18) initial version for ros 2, ported from https://github.com/boschresearch/fmi_adapter/ wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 rcl_interfaces 1 rclcpp 1 rclcpp_components 1 rclcpp_lifecycle 2 std_msgs 1 fmilibrary_vendor 1 ament_cmake 1 launch 2 launch_ros 1 ament_cmake_gmock 1 ament_cmake_gtest 1 ament_cmake_pytest 1 ament_lint_auto 1 ament_lint_common 1 launch_testing 1 rcutils system dependencies no direct system dependencies. dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files no launch files found messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 1 assets 5 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 1.0.4 license apache license 2.0 build type catkin use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version melodic_and_noetic last updated 2022-11-22 dev status maintained ci status continuous integration : 10 / 10 latest build history: tue, 22 nov 2022 11:07:19 gmt (last 5 of 7 builds) #8 22-nov-2022 11:00 10 / 10 #7 02-jun-2022 09:00 10 / 10 #6 07-jun-2021 10:00 10 / 10 #5 07-jun-2021 09:00 10 / 10 #4 23-apr-2021 07:01 10 / 10 released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors ralph lange fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter node fmi_adapter provides a ros node ( fmi_adapter_node.cpp ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period according to the ros clock. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros parameter server and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call roslaunch fmi_adapter fmi_adapter_node.launch fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . this library is downloaded, compiled and linked in the cmakelists.txt of this package using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.h from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.h" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. ros::duration stepsize(0.001); fmi_adapter::fmiadapter adapter(fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: ros::subscriber subscriber = nhandle.subscribe<std_msgs::float64>("angle_x", 1000, [&adapter](const std_msgs::float64::constptr& msg) { adapter.setinputvalue("anglex", ros::time::now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter.getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter.dostepsuntil(..) . for example: ros::timer timer = nhandle.createtimer(ros::duration(0.01), [&](const ros::timerevent& event) { adapter.dostepsuntil(event.current_expected); double y = adapter.getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter.getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter.setinitialvalue("dampingparam", 0.21); adapter.setinitialvalue("anglex", 1.3); the function adapter.initializefromrosparameters(nodehandle) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: just before starting the spin thread, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter.exitinitializationmode(ros::time::now()); ros::spin(); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 1.0.4 (2021-03-22) updated to version 2.2.3 of fmilibrary. 1.0.3 (2020-01-30) fixed sporadic exception in case of small external steps. updated to fmilibrary version 2.1 and to new location of fmilibrary sources. fixed fmulocation argument for fmi2_import_instantiate. 1.0.2 (2018-10-12) added parameter to configure update period of fmi_adapter node. introduced functions for single step and replaced calcuntil with dostepsuntil. enable automatic use of default experiment step-size from fmu in fmiadapter ctor. added function to query default experiment step-size given in the fmu. added step_size parameter and function to query whether the fmu supports a variable communication step size. 1.0.1 (2018-07-16) throwing runtime_error in case of failed fmi2 function call. 1.0.0 (2018-07-13) initial version. wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 catkin 1 rostest 1 roscpp 2 std_msgs system dependencies name git dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files launch/fmi_adapter_node.launch fmu_path messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki no version for distro ardent . known supported distros are highlighted in the buttons above. no version for distro bouncy . known supported distros are highlighted in the buttons above. no version for distro crystal . known supported distros are highlighted in the buttons above. no version for distro eloquent . known supported distros are highlighted in the buttons above. fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 0 assets 16 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 2.0.0 license apache license 2.0 build type ament_cmake use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version dashing last updated 2022-11-23 dev status maintained ci status no continuous integration released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors no additional authors. fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros 2 package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter_node fmi_adapter provides a ros node fmi_adapter_node (class fmiadapternode derived from lifecyclenode ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros node parameters and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter_node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . for this purpose, fmi_adapter depends on the fmilibrary_vendor package, which downloads and builds the fmi library using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.hpp from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.hpp" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. rclcpp::duration stepsize(0.001); auto adapter = std::make_shared<fmi_adapter::fmiadapter>(get_logger(), fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: auto  = create_<std_msgs::msg::float64>("angle_x", 1000, [this](std_msgs::msg::float64::sharedptr msg) { adapter->setinputvalue("anglex", now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter->getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter->dostepsuntil(..) . for example: auto timer = create_wall_timer(update_period, [this]() { adapter->dostepsuntil(now()); double y = adapter->getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter->getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter->setinitialvalue("dampingparam", 0.21); adapter->setinitialvalue("anglex", 1.3); the function adapter->initializefromrosparameters(get_node_parameters_interface()) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: as last setup step, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter->exitinitializationmode(now()); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 2.0.0 (2021-03-24) added function \'getvalue\' to return value of any given variable name co-authored-by: sebastian zarnack < sebastian.zarnack@eas.iis.fraunhofer.de > improved readability of unit tests by chrono literals. replaced use of deprecated duration ctor. added virtual to lifecycle callbacks, as in interface. 0.1.8 (2020-05-14) prepared for foxy release. 0.1.7 (2020-01-30) fixed sporadic exception in case of small external steps. fixed fmulocation argument for fmi2_import_instantiate. 0.1.6 (2019-11-05) release for ros 2 eloquent. changed build files for use of fmilibrary_vendor package. 0.1.5 (2019-05-24) adapted to new dashing features, including qos, parameter declaration and node composition. 0.1.4 (2019-05-23) fixed link to fmu-sdk. 0.1.3 (2019-02-01) fixed install target location of shared library. improved code snippets on use of fmiadapter class in readme. 0.1.2 (2019-01-25) cleaned up dependency entries in package.xml. added explicit target dependencies for parallel building. 0.1.1 (2019-01-23) fixed missing testing and launch dependencies. 0.1.0 (2019-01-18) initial version for ros 2, ported from https://github.com/boschresearch/fmi_adapter/ wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 rcl_interfaces 1 rclcpp 1 rclcpp_components 1 rclcpp_lifecycle 2 std_msgs 1 fmilibrary_vendor 1 ament_cmake 1 launch 2 launch_ros 1 ament_cmake_gmock 1 ament_cmake_gtest 1 ament_cmake_pytest 1 ament_lint_auto 1 ament_lint_common 1 launch_testing 1 rcutils system dependencies no direct system dependencies. dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files no launch files found messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki no version for distro galactic . known supported distros are highlighted in the buttons above. fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 0 assets 16 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 2.1.2 license apache license 2.0 build type ament_cmake use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version foxy last updated 2023-06-09 dev status maintained ci status no continuous integration released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors no additional authors. fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros 2 package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter_node fmi_adapter provides a ros node fmi_adapter_node (class fmiadapternode derived from lifecyclenode ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros node parameters and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter_node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . for this purpose, fmi_adapter depends on the fmilibrary_vendor package, which downloads and builds the fmi library using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.hpp from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.hpp" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. rclcpp::duration stepsize(0.001); auto adapter = std::make_shared<fmi_adapter::fmiadapter>(get_logger(), fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: auto  = create_<std_msgs::msg::float64>("angle_x", 1000, [this](std_msgs::msg::float64::sharedptr msg) { adapter->setinputvalue("anglex", now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter->getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter->dostepsuntil(..) . for example: auto timer = create_wall_timer(update_period, [this]() { adapter->dostepsuntil(now()); double y = adapter->getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter->getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter->setinitialvalue("dampingparam", 0.21); adapter->setinitialvalue("anglex", 1.3); the function adapter->initializefromrosparameters(get_node_parameters_interface()) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: as last setup step, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter->exitinitializationmode(now()); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 2.1.2 (2023-04-13) updated link to lifecycle_node.hpp. updated include get_env.h to env.h. contributors: ralph lange 2.1.1 (2021-06-11) adapted to statically typed parameters introduced in galactic. 2.1.0 (2021-03-24) adapted launch files to api changes. 2.0.0 (2021-03-24) added function \'getvalue\' to return value of any given variable name co-authored-by: sebastian zarnack < sebastian.zarnack@eas.iis.fraunhofer.de > improved readability of unit tests by chrono literals. replaced use of deprecated duration ctor. added virtual to lifecycle callbacks, as in interface. 0.1.8 (2020-05-14) prepared for foxy release. 0.1.7 (2020-01-30) fixed sporadic exception in case of small external steps. fixed fmulocation argument for fmi2_import_instantiate. 0.1.6 (2019-11-05) release for ros 2 eloquent. changed build files for use of fmilibrary_vendor package. 0.1.5 (2019-05-24) adapted to new dashing features, including qos, parameter declaration and node composition. 0.1.4 (2019-05-23) fixed link to fmu-sdk. 0.1.3 (2019-02-01) fixed install target location of shared library. improved code snippets on use of fmiadapter class in readme. 0.1.2 (2019-01-25) cleaned up dependency entries in package.xml. added explicit target dependencies for parallel building. 0.1.1 (2019-01-23) fixed missing testing and launch dependencies. 0.1.0 (2019-01-18) initial version for ros 2, ported from https://github.com/boschresearch/fmi_adapter/ wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 rcl_interfaces 1 rclcpp 1 rclcpp_components 1 rclcpp_lifecycle 2 std_msgs 1 fmilibrary_vendor 1 ament_cmake 1 launch 2 launch_ros 1 ament_cmake_gmock 1 ament_cmake_gtest 1 ament_cmake_pytest 1 ament_lint_auto 1 ament_lint_common 1 launch_testing 1 rcutils system dependencies no direct system dependencies. dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files no launch files found messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki no version for distro lunar . known supported distros are highlighted in the buttons above. no version for distro jade . known supported distros are highlighted in the buttons above. no version for distro indigo . known supported distros are highlighted in the buttons above. no version for distro hydro . known supported distros are highlighted in the buttons above. no version for distro kinetic . known supported distros are highlighted in the buttons above. fmi_adapter package from fmi_adapter repo fmi_adapter fmi_adapter_examples github-boschresearch-fmi_adapter github-boschresearch-fmi_adapter api docs browse code wiki overview 1 assets 5 dependencies 0 tutorials 0 q & a package summary tags no category tags. version 1.0.4 license apache license 2.0 build type catkin use recommended repository summary checkout uri https://github.com/boschresearch/fmi_adapter.git vcs type git vcs version melodic_and_noetic last updated 2022-11-22 dev status maintained ci status continuous integration : 10 / 10 latest build history: tue, 22 nov 2022 11:23:02 gmt (last 5 of 7 builds) #18 22-nov-2022 11:17 10 / 10 #17 02-jun-2022 09:17 10 / 10 #16 07-jun-2021 09:17 10 / 10 #15 23-apr-2021 07:17 10 / 10 #14 23-apr-2021 06:17 10 / 10 released released tags no category tags. contributing help wanted ( 0 ) good first issues ( 0 ) pull requests to review ( 0 ) package description wraps fmus for co-simulation additional links website repository maintainers ralph lange authors ralph lange fmi_adapter/readme.md general information  this repository, including legal information, build instructions and known issues/limitations, are given in readme.md in the repository root. the fmi_adapter package fmi_adapter is a small ros package for wrapping functional mockup units (fmus) for co-simulation of physical models into ros nodes. fmus are defined in the fmi standard . currently, this package supports co-simulation fmus according to the fmi 2.0 standard only. fmus can be created with a variety of modeling and simulation tools. examples are dymola , matlab/simulink , openmodelica , simulationx , and wolfram system modeler . technically, a co-simulation fmu is a zip file (with suffix .fmu) containing a physical model and the corresponding solver as a shared library together with an xml file describing the inputs, outputs and parameters of the model and details of the solver configuration. an addition, the zip file may contain the source code of the model and solver in the c programming language. fmi_adapter node fmi_adapter provides a ros node ( fmi_adapter_node.cpp ), which takes an fmu and creates subscribers and publishers for the input and output variables of the fmu, respectively. then, it runs the fmu's solver with a user-definable update period according to the ros clock. this approach is illustrated in the following diagram. the fmi_adapter_node also searches for counterparts for each fmu parameter and variable in the ros parameter server and initializes the fmu correspondingly. for this purpose, this package provide a launch file with argument fmu_path . simply call roslaunch fmi_adapter fmi_adapter_node.launch fmu_path:=[pathtothefmufile]  see the readme.md of the fmi_adapter_examples package for a step-by-step description how to use the fmi_adapter node with a damped pendulum model and fmu. fmi_adapter library fmi_adapter provides a library with convenience functions based on common ros types to load an fmu during runtime, to retrieve the input, output, and parameter names, to set timestamped input values, to run the fmu's numeric solver, and to query the resulting output. these functions are provided by the class fmiadapter . instances of this class may be integrated in application-specific ros nodes or libraries as illustrated in the following architecture diagram. for parsing the xml description of an fmu and for running the fmu's solver, fmi_adapter uses the c library fmi library . this library is downloaded, compiled and linked in the cmakelists.txt of this package using cmake's externalproject_add command. running an fmu inside a ros node or library in the following, we give some code snippets how to load and run an fmu file from an application-specific ros node or library. step 1: include the fmiadapter.h from the fmi_adapter package in your c++ code. #include "fmi_adapter/fmiadapter.h" step 2: instantiate the adapter class with the path to the fmu file and the desired simulation step size. if the step-size argument is omitted, the default step size specified in the fmu file will be used. ros::duration stepsize(0.001); fmi_adapter::fmiadapter adapter(fmupath, stepsize); step 3: create subscribers or timers to set the fmu's input values. for example: ros::subscriber subscriber = nhandle.subscribe<std_msgs::float64>("angle_x", 1000, [&adapter](const std_msgs::float64::constptr& msg) { adapter.setinputvalue("anglex", ros::time::now(), msg->data); }); in this example, angle_x is the topic name whereas anglex is the corresponding input variable of the fmu. use adapter.getinputvariablenames() to get a list of all input variables. step 4: create a timer or subscriber that triggers the simulation of the fmu using adapter.dostepsuntil(..) . for example: ros::timer timer = nhandle.createtimer(ros::duration(0.01), [&](const ros::timerevent& event) { adapter.dostepsuntil(event.current_expected); double y = adapter.getoutputvalue("angley"); // ... e.g., publish y on a topic ... }); use adapter.getoutputvariablenames() to get a list of all output variables. step 5: set parameters and initial values of the fmu: adapter.setinitialvalue("dampingparam", 0.21); adapter.setinitialvalue("anglex", 1.3); the function adapter.initializefromrosparameters(nodehandle) may be used to initialize all parameters from the corresponding ros parameters.  note that all characters in the fmu parameter names that are not supported by ros are replaced by an '_', cf. fmiadapter::rosifyname(name) . step 6: just before starting the spin thread, exit the fmu's initialization mode and set the ros time that refers to the fmu's internal timepoint 0.0. adapter.exitinitializationmode(ros::time::now()); ros::spin(); papers if you want to cite this repository/package,  cite the following book chapter ( pdf available at springer link ) instead: ralph lange, silvio traversaro, oliver lenord, and christian bertsch: integrating the functional mock-up interface with ros and gazebo. in: anis koubaa (ed.) robot operating system (ros): the complete reference (volume 5) , springer, pp. 187231, 2021. @inbook{lange_et_al_2021_integrating_the_fmi_with_ros_and_gazebo, author = {ralph lange and silvio traversaro and oliver lenord and christian bertsch}, title = {integrating the functional mock-up interface with ros and gazebo}, editor = {anis koubaa}, booktitle = {robot operating system (ros): the complete reference (volume 5)}, year = {2021}, publisher = {springer}, pages = {187--231}, doi = {10.1007/978-3-030-45956-7_7} } changelog changelog for package fmi_adapter 1.0.4 (2021-03-22) updated to version 2.2.3 of fmilibrary. 1.0.3 (2020-01-30) fixed sporadic exception in case of small external steps. updated to fmilibrary version 2.1 and to new location of fmilibrary sources. fixed fmulocation argument for fmi2_import_instantiate. 1.0.2 (2018-10-12) added parameter to configure update period of fmi_adapter node. introduced functions for single step and replaced calcuntil with dostepsuntil. enable automatic use of default experiment step-size from fmu in fmiadapter ctor. added function to query default experiment step-size given in the fmu. added step_size parameter and function to query whether the fmu supports a variable communication step size. 1.0.1 (2018-07-16) throwing runtime_error in case of failed fmi2 function call. 1.0.0 (2018-07-13) initial version. wiki tutorials this package does not provide any links to tutorials in it's rosindex metadata . you can check on the ros wiki tutorials page for the package. package dependencies deps name 1 catkin 1 rostest 1 roscpp 2 std_msgs system dependencies name git dependant packages name repo deps fmi_adapter_examples github-boschresearch-fmi_adapter launch files launch/fmi_adapter_node.launch fmu_path messages no message files found. services no service files found plugins no plugins found. recent questions tagged fmi_adapter at robotics stack exchange no questions yet, you can ask one here . failed to get question list, you can ticket an issue here api docs browse code wiki