tutorials advanced simulators webots the ros2supervisor node edit on github the ros2supervisor node ï goal: extend the interface with a default supervisor robot, named ros2supervisor . tutorial level: advanced time: 10 minutes background ï in this tutorial, you will learn how to enable the ros2supervisor node which enhances the interface by creating additional services and topics to interact with the simulation. you can, for example, record animations or spawn webots nodes directly from the ros 2 interface while the simulation is running. these instructions list in details the current implemented features and how to use them. prerequisites ï before proceeding with this tutorial, make sure you have completed the following: understanding of ros 2 nodes and topics covered in the beginner tutorials . knowledge of webots and ros 2 and its interface package. familiarity with setting up a robot simulation (basic) . the ros2supervisor ï the ros2supervisor is made of two main parts: a webots robot node added to the simulation world. its supervisor field is set to true. a ros 2 node that connects to the webots robot as an extern controller (in a similar way to your own robot plugin). the ros 2 node acts as a controller that calls supervisor api functions to control or interact with the simulation world. user interactions with the ros 2 node are mainly performed through services and topics. these nodes can be automatically created at the webots launch using the ros2_supervisor parameter in the webotslauncher . webots = webotslauncher ( world = pathjoinsubstitution ([ package_dir , 'worlds' , world ]), mode = mode , ros2_supervisor = true ) the webots._supervisor object must also be included in the launchdescription returned by the launch file. return launchdescription ([ webots , webots . _supervisor , # this action will kill all nodes once the webots simulation has exited launch . actions . registereventhandler ( event_handler = launch . event_handlers . onprocessexit ( target_action = webots , on_exit = [ launch . actions . emitevent ( event = launch . events . shutdown ()) ], ) ) ]) more information  launch files for webots_ros2 projects can be found in setting up a robot simulation (basic) . clock topic ï the ros2supervisor node is responsible to get the time of the webots simulation and publish it to the /clock topic. this means that it is mandatory to spawn the ros2supervisor if some other nodes have their use_sim_time parameter set to true . more information  the /clock topic can be found in the ros wiki . import a webots node ï the ros2supervisor node also allows you to spawn webots nodes from strings through a service. the service is named /ros2supervisor/spawn_node_from_string and is of type webots_ros2_msgs/srv/spawnnodefromstring . the spawnnodefromstring type expects a data string as input and returns a success boolean. from the given string, the supervisor node is getting the name of the imported node and adding it to an intern list for potential later removal (see remove a webots imported node ). the node is imported using the importmfnodefromstring(nodestring) api function . here is an example to import a simple robot named imported_robot : ros2 service call /ros2supervisor/spawn_node_from_string webots_ros2_msgs/srv/spawnnodefromstring "data: robot { name \"imported_robot\" }" note if you try to import some protos in the node string, their respective urls must be declared in the .wbt world file as externproto or as importable externproto. remove a webots imported node ï once a node has been imported with the /ros2supervisor/spawn_node_from_string service, it can also be removed. this can be achieved by sending the name of the node to the topic named /ros2supervisor/remove_node of type std_msgs/msg/string . if the node is indeed in the imported list, it is removed with the remove() api method . here is an example on how to remove the imported_robot robot: ros2 topic pub --once /ros2supervisor/remove_node std_msgs/msg/string "{data: imported_robot}" record animations ï the ros2supervisor node also creates two additional services to record html5 animations. the /ros2supervisor/animation_start_recording service is of type webots_ros2_msgs/srv/setstring and allows to start the animation. the setstring type expects a value string as input and returns a success boolean. the input value represents the absolute path to the directory where the animations files should be saved. here is an example on how to start an animation: ros2 service call /ros2supervisor/animation_start_recording webots_ros2_msgs/srv/setstring "{value: " <absolute_path>/index.html "}" the /ros2supervisor/animation_stop_recording service is of type webots_ros2_msgs/srv/getbool and allows to stop the animation. ros2 service call /ros2supervisor/animation_stop_recording webots_ros2_msgs/srv/getbool "{ask: true}" summary ï in this tutorial, you learned how to enable the ros2supervisor and how to extend the interface with the webots simulation. the node creates multiple services and topics to interact with and modify the simulation. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling