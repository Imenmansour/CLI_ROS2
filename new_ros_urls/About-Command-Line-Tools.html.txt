concepts basic concepts introspection with command line tools edit on github introspection with command line tools ï ros 2 includes a suite of command-line tools for introspecting a ros 2 system. usage ï the main entry point for the tools is the command ros2 , which itself has various sub-commands for introspecting and working with nodes, topics, services, and more. to see all available sub-commands run: ros2 --help examples of sub-commands that are available include: action : introspect/interact with ros actions bag : record/play a rosbag component : manage component containers daemon : introspect/configure the ros 2 daemon doctor : check ros setup for potential issues interface : show information  ros interfaces launch : run/introspect a launch file lifecycle : introspect/manage nodes with managed lifecycles multicast : multicast debugging commands node : introspect ros nodes param : introspect/configure parameters on a node pkg : introspect ros packages run : run ros nodes security : configure security settings service : introspect/call ros services test : run a ros launch test topic : introspect/publish ros topics trace : tracing tools to get information on ros nodes execution (only available on linux) wtf : an alias for doctor example ï to produce the typical talker-listener example using command-line tools, the topic sub-command can be used to publish and echo messages on a topic. publish messages in one terminal with:  ros2 topic pub /chatter std_msgs/msg/string "data: hello world" publisher: beginning loop publishing #1: std_msgs.msg.string(data='hello world') publishing #2: std_msgs.msg.string(data='hello world') echo messages received in another terminal with:  ros2 topic echo /chatter data: hello world data: hello world behind the scenes ï ros 2 uses a distributed discovery process for nodes to connect to each other. as this process purposefully does not use a centralized discovery mechanism, it can take time for ros nodes to discover all other participants in the ros graph. because of this, there is a long-running daemon in the background that stores information  the ros graph to provide faster responses to queries, e.g. the list of node names. the daemon is automatically started when the relevant command-line tools are used for the first time. you can run ros2 daemon --help for more options for interacting with the daemon. implementation ï the source code for the ros2 command is available at https://github.com/ros2/ros2cli . the ros2 tool has been implemented as a framework that can be extended via plugins. for example, the sros2 package provides a security sub-command that is automatically detected by the ros2 tool if the sros2 package is installed. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling