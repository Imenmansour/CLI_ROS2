how-to guides visualizing ros 2 data with foxglove studio edit on github visualizing ros 2 data with foxglove studio ï foxglove studio is an open source visualization and debugging tool for your robotics data. it is available in a variety of ways to make development as convenient as possible â it can be run as a standalone desktop app, accessed via your browser, or even self-hosted on your own domain. view the source code on github . installation ï to use the web app, simply open google chrome and navigate to studio.foxglove.dev . to use the desktop app for linux, macos, or windows, download it directly from the foxglove studio website . connect to a data source ï on opening foxglove studio, you will see a dialog with a list of all possible data sources . to connect to your ros 2 stack, click âopen connectionâ, select the ârosbridge (ros 1 & 2)â tab, and configure your âwebsocket urlâ. you could also drag-and-drop any local ros 2 .db3 files directly into the application to load them for playback. note in order to load custom message definitions in your ros 2 files , try converting them to the mcap file format . check out the foxglove studio docs for more detailed instructions. building layouts with panels ï panels are modular visualization interfaces that can be configured and arranged into studio layouts . you can also save your layouts for future use, for your own personal reference or with your larger robotics team. find the full list of available panels in the sidebarâs âadd panelâ tab. weâve highlighted some particularly useful ones below: 1 3d: display visualization markers in a 3d scene ï publish marker messages to add primitive shapes (arrows, spheres, etc.) and more complex visualizations (occupancy grids, point clouds, etc.) to your 3d panelâs scene. choose the topics you want to display via the topic picker on the left, and configure each topicâs visualization settings in the âedit topic settingsâ menu. reference the docs for a full list of supported message types and some useful user interactions . 2 diagnostics: filter and sort diagnostics messages ï display the status of seen nodes (i.e. stale, error, warn, or ok) from topics with a diagnostic_msgs/msg/diagnosticarray datatype in a running feed, and display the diagnostics data for a given diagnostic_name/hardware_id . reference the docs for more details. 3 image: view camera feed images ï select a sensor_msgs/msg/image or sensor_msgs/msg/compressedimage topic to display. reference the docs for more details. 4 log: view log messages ï to view rcl_interfaces/msg/log messages live, use the desktop app to connect to your running ros stack. to view rcl_interfaces/msg/log messages from a pre-recorded data file, you can drag-and-drop your file into either the web or desktop app. next, add a log panel to your layout. if youâve connected to your ros stack correctly, you should now see a list of your log messages, with the ability to filter them by node name or severity level. reference the docs for more details. 5 plot: plot arbitrary values over time ï plot arbitrary values from your topicsâ message paths over playback time. specify the topic values you want to plot along the y-axis. for the x-axis, choose between plotting the y-axis valueâs timestamp, element index, or another custom topic message path. reference the docs for more details. 6 raw messages: view incoming topic messages ï display incoming topic data in an easy-to-read collapsible json tree format. reference the docs for more details. 7 teleop: teleoperate your robot ï teleoperate your physical robot by publishing geometry_msgs/msg/twist messages on a given topic back to your live ros stack. reference the docs for more details. 8 urdf viewer: view and manipulate your urdf model ï to visualize and control your robot model in foxglove studio, open the web or desktop application and add a urdf viewer panel to your layout. then, drag and drop your urdf file into that panel to visualize your robot model. select any topic publishing a jointstate message to update the visualization based on the published joint states (defaults to /joint_states ). toggle to âmanual joint controlâ to set joint positions using the provided controls. reference the docs for more details. other basic actions ï 1 view your ros graph ï using the desktop app , connect to your running ros stack. next, add a topic graph panel to your layout. if youâve connected to your ros stack correctly, you should now see a computational graph of your ros nodes, topics, and services in that panel. use the controls on the right side of the panel to select which topics to display or to toggle services. 2 view and edit your ros params ï using the desktop app , connect to your running ros stack. next, add a parameters panel to your layout. if youâve connected to your ros stack correctly, you should now see a live view of your current rosparams . you can edit these parameter values to publish rosparam updates back to your ros stack. 3 publish messages back to your live ros stack ï using the desktop app , connect to your running ros stack. next, add a publish panel to your layout. specify the topic you want to publish on to infer its datatype and populate the text field with a json message template. selecting a datatype in the dropdown of common ros datatypes will also populate the text field with a json message template. edit the template to customize your message before hitting âpublishâ. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling