tutorials beginner: cli tools understanding topics edit on github understanding topics ï goal: use rqt_graph and command line tools to introspect ros 2 topics. tutorial level: beginner time: 20 minutes background ï ros 2 breaks complex systems down into many modular nodes. topics are a vital element of the ros graph that act as a bus for nodes to exchange messages. a node may publish data to any number of topics and simultaneously have s to any number of topics. topics are one of the main ways in which data is moved between nodes and therefore between different parts of the system. prerequisites ï the previous tutorial provides some useful background information on nodes that is built upon here. as always, donât forget to source ros 2 in every new terminal you open . tasks ï 1 setup ï by now you should be comfortable starting up turtlesim. open a new terminal and run: ros2 run turtlesim turtlesim_node open another terminal and run: ros2 run turtlesim turtle_teleop_key recall from the previous tutorial that the names of these nodes are /turtlesim and /teleop_turtle by default. 2 rqt_graph ï throughout this tutorial, we will use rqt_graph to visualize the changing nodes and topics, as well as the connections between them. the turtlesim tutorial tells you how to install rqt and all its plugins, including rqt_graph . to run rqt_graph, open a new terminal and enter the command: rqt_graph you can also open rqt_graph by opening rqt and selecting plugins > introspection > node graph . you should see the above nodes and topic, as well as two actions around the periphery of the graph (letâs ignore those for now). if you hover your mouse over the topic in the center, youâll see the color highlighting like in the image above. the graph is depicting how the /turtlesim node and the /teleop_turtle node are communicating with each other over a topic. the /teleop_turtle node is publishing data (the keystrokes you enter to move the turtle around) to the /turtle1/cmd_vel topic, and the /turtlesim node is subscribed to that topic to receive the data. the highlighting feature of rqt_graph is very helpful when examining more complex systems with many nodes and topics connected in many different ways. rqt_graph is a graphical introspection tool. now weâll look at some command line tools for introspecting topics. 3 ros2 topic list ï running the ros2 topic list command in a new terminal will return a list of all the topics currently active in the system: /parameter_events /rosout /turtle1/cmd_vel /turtle1/color_sensor /turtle1/pose ros2 topic list -t will return the same list of topics, this time with the topic type appended in brackets: /parameter_events [rcl_interfaces/msg/parameterevent] /rosout [rcl_interfaces/msg/log] /turtle1/cmd_vel [geometry_msgs/msg/twist] /turtle1/color_sensor [turtlesim/msg/color] /turtle1/pose [turtlesim/msg/pose] these attributes, particularly the type, are how nodes know theyâre talking  the same information as it moves over topics. if youâre wondering where all these topics are in rqt_graph, you can uncheck all the boxes under hide: for now, though, leave those options checked to avoid confusion. 4 ros2 topic echo ï to see the data being published on a topic, use: ros2 topic echo <topic_name> since we know that /teleop_turtle publishes data to /turtlesim over the /turtle1/cmd_vel topic, letâs use echo to introspect that topic: ros2 topic echo /turtle1/cmd_vel at first, this command wonât return any data. thatâs because itâs waiting for /teleop_turtle to publish something. return to the terminal where turtle_teleop_key is running and use the arrows to move the turtle around. watch the terminal where your echo is running at the same time, and youâll see position data being published for every movement you make: linear: x: 2.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 0.0 --- now return to rqt_graph and uncheck the debug box. /_ros2cli_26646 is the node created by the echo command we just ran (the number might be different). now you can see that the publisher is publishing data over the cmd_vel topic, and two subscribers are subscribed to it. 5 ros2 topic info ï topics donât have to only be one-to-one communication; they can be one-to-many, many-to-one, or many-to-many. another way to look at this is running: ros2 topic info /turtle1/cmd_vel which will return: type: geometry_msgs/msg/twist publisher count: 1  count: 2 6 ros2 interface show ï nodes send data over topics using messages. publishers and subscribers must send and receive the same type of message to communicate. the topic types we saw earlier after running ros2 topic list -t let us know what message type is used on each topic. recall that the cmd_vel topic has the type: geometry_msgs/msg/twist this means that in the package geometry_msgs there is a msg called twist . now we can run ros2 interface show <msg type> on this type to learn its details. specifically, what structure of data the message expects. ros2 interface show geometry_msgs/msg/twist for the message type from above it yields: # this expresses velocity in free space broken into its linear and angular parts. vector3 linear float64 x float64 y float64 z vector3 angular float64 x float64 y float64 z this tells you that the /turtlesim node is expecting a message with two vectors, linear and angular , of three elements each. if you recall the data we saw /teleop_turtle passing to /turtlesim with the echo command, itâs in the same structure: linear: x: 2.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 0.0 --- 7 ros2 topic pub ï now that you have the message structure, you can publish data to a topic directly from the command line using: ros2 topic pub <topic_name> <msg_type> '<args>' the '<args>' argument is the actual data youâll pass to the topic, in the structure you just discovered in the previous section. itâs important to note that this argument needs to be input in yaml syntax. input the full command like so: ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}" --once is an optional argument meaning âpublish one message then exitâ. you will see the following output in the terminal: publisher: beginning loop publishing #1: geometry_msgs.msg.twist(linear=geometry_msgs.msg.vector3(x=2.0, y=0.0, z=0.0), angular=geometry_msgs.msg.vector3(x=0.0, y=0.0, z=1.8)) and you will see your turtle move like so: the turtle (and commonly the real robots which it is meant to emulate) require a steady stream of commands to operate continuously. so, to get the turtle to keep moving, you can run: ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}" the difference here is the removal of the --once option and the addition of the --rate 1 option, which tells ros2 topic pub to publish the command in a steady stream at 1 hz. you can refresh rqt_graph to see whatâs happening graphically. you will see that the ros2 topic pub ... node ( /_ros2cli_30358 ) is publishing over the /turtle1/cmd_vel topic, which is being received by both the ros2 topic echo ... node ( /_ros2cli_26646 ) and the /turtlesim node now. finally, you can run echo on the pose topic and recheck rqt_graph: ros2 topic echo /turtle1/pose you can see that the /turtlesim node is also publishing to the pose topic, which the new echo node has subscribed to. when publishing messages with timestamps, pub has two methods to automatically fill them out with the current time. for messages with a std_msgs/msg/header , the header field can be set to auto to fill out the stamp field. ros2 topic pub /pose geometry_msgs/msg/posestamped '{header: "auto", pose: {position: {x: 1.0, y: 2.0, z: 3.0}}}' if the message does not use a full header, but just has a field with type builtin_interfaces/msg/time , that can be set to the value now . ros2 topic pub /reference sensor_msgs/msg/timereference '{header: "auto", time_ref: "now", source: "dumy"}' 8 ros2 topic hz ï for one last introspection on this process, you can view the rate at which data is published using: ros2 topic hz /turtle1/pose it will return data on the rate at which the /turtlesim node is publishing data to the pose topic. average rate: 59.354 min: 0.005s max: 0.027s std dev: 0.00284s window: 58 recall that you set the rate of turtle1/cmd_vel to publish at a steady 1 hz using ros2 topic pub --rate 1 . if you run the above command with turtle1/cmd_vel instead of turtle1/pose , you will see an average reflecting that rate. 9 clean up ï at this point youâll have a lot of nodes running. donât forget to stop them by entering ctrl+c in each terminal. summary ï nodes publish information over topics, which allows any number of other nodes to subscribe to and access that information. in this tutorial you examined the connections between several nodes over topics using rqt_graph and command line tools. you should now have a good idea of how data moves around a ros 2 system. next steps ï next youâll learn  another communication type in the ros graph with the tutorial understanding services . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling