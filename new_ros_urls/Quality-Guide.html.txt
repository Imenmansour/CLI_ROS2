the ros 2 project contributing quality guide: ensuring code quality edit on github quality guide: ensuring code quality ï this page gives guidance  how to improve the software quality of ros 2 packages, focusing on more specific areas than the quality practices section of the developer guide . the sections below intend to address ros 2 core, application and ecosystem packages and the core client libraries, c++ and python. the solutions presented are motivated by design and implementation considerations to improve quality attributes like âreliabilityâ, âsecurityâ, âmaintainabilityâ, âdeterminismâ, etc. which relate to non-functional requirements. static code analysis as part of the ament package build ï context : you have developed your c++ production code. you have created a ros 2 package with build support with ament . problem : library level static code analysis is not run as part of the package build procedure. library level static code analysis needs to be executed manually. risk of forgetting to execute library level static code analysis before building a new package version. solution : use the integration capabilities of ament to execute static code analysis as part of the package build procedure. implementation : insert into the packages cmakelists.txt file. ... if ( build_testing ) find_package ( ament_lint_auto required ) ament_lint_auto_find_test_dependencies () ... endif () ... insert the ament_lint test dependencies into the packages package.xml file. ... <package format = "2" > ... <test_depend>ament_lint_auto</test_depend> <test_depend>ament_lint_common</test_depend> ... </package> examples : rclcpp : rclcpp/rclcpp/cmakelists.txt rclcpp/rclcpp/package.xml rclcpp_lifecycle : rclcpp/rclcpp_lifecycle/cmakelists.txt rclcpp/rclcpp_lifecycle/package.xml resulting context : the static code analysis tools supported by ament are run as part of the package build. static code analysis tools not supported by ament need to be executed separately. static thread safety analysis via code annotation ï context: you are developing/debugging your multithreaded c++ production code you access data from multiple threads in c++ code problem: data races and deadlocks can lead to critical bugs. solution: utilize clangâs static thread safety analysis by annotating threaded code context for implementation: to enable thread safety analysis, code must be annotated to let the compiler know more  the semantics of the code. these annotations are clang-specific attributes - e.g. __attribute__(capability())) . instead of using those attributes directly, ros 2 provides preprocessor macros that are erased when using other compilers. these macros can be found in rcpputils/thread_safety_annotations.hpp the thread safety analysis documentation states thread safety analysis can be used with any threading library, but it does require that the threading api be wrapped in classes and methods which have the appropriate annotations we have decided that we want ros 2 developers to be able to use std:: threading primitives directly for their development. we do not want to provide our own wrapped types as is suggested above. there are three c++ standard libraries to be aware of the gnu standard library libstdc++ - default on linux, explicitly via the compiler option -stdlib=libstdc++ the llvm standard library libc++ (also called libcxx ) - default on macos, explicitly set by the compiler option -stdlib=libc++ the windows c++ standard library - not relevant to this use case libcxx annotates its std::mutex and std::lock_guard implementations for thread safety analysis. when using gnu libstdc++ , those annotations are not present, so thread safety analysis cannot be used on non-wrapped std:: types. therefore, to use thread safety analysis directly with std:: types, we must use libcxx implementation: the code migration suggestions here are by no means complete - when writing (or annotating existing) threaded code, you are encouraged to utilize as many of the annotations as is logical for your use case. however, this step-by-step is a great place to start! enabling analysis for package/target when the c++ compiler is clang, enable the -wthread-safety flag. example below for cmake-based projects if ( cmake_cxx_compiler_id matches "clang" ) add_compile_options ( -wthread-safety ) # for your whole package target_compile_options ( { my_target } public -wthread-safety ) # for a single library or executable endif () annotating code step 1 - annotate data members find anywhere that std::mutex is used to protect some member data add the rcpputils_tsa_guarded_by(mutex_name) annotation to the data that is protected by the mutex class foo { public : void incr ( int amount ) { std :: lock_guard < std :: mutex > lock ( mutex_ ); bar += amount ; } void get () const { return bar ; } private : mutable std :: mutex mutex_ ; int bar rcpputils_tsa_guarded_by ( mutex_ ) = 0 ; }; step 2 - fix warnings in the above example - foo::get will produce a compiler warning! to fix it, lock before returning bar void get () const { std :: lock_guard < std :: mutex > lock ( mutex_ ); return bar ; } step 3 - (optional but recommended) refactor existing code to private-mutex pattern a recommended pattern in threaded c++ code is to always keep your mutex as a private: member of the data structure. this makes data safety the concern of the containing structure, offloading that responsibility from users of the structure and minimizing the surface area of affected code. making your locks private may require rethinking the interfaces to your data. this is a great exercise - here are a few things to consider you may want to provide specialized interfaces for performing analysis that requires complex locking logic, e.g. counting members in a filtered set of a mutex-guarded map structure, instead of actually returning the underlying structure to consumers consider copying to avoid blocking, where the amount of data is small. this can let other threads get on with accessing the shared data, which can potentially lead to better overall performance. step 4 - (optional) enable negative capability analysis https://clang.llvm.org/docs/threadsafetyanalysis.html#negative-capabilities negative capability analysis lets you specify âthis lock must not be held when calling this functionâ. it can reveal potential deadlock cases that other annotations cannot. where you specified -wthread-safety , add the additional flag -wthread-safety-negative on any function that acquires a lock, use the rcpputils_tsa_requires(!mutex) pattern how to run the analysis the ros ci build farm runs a nightly job with libcxx , which will surface any issues in the ros 2 core stack by being marked âunstableâ when thread safety analysis raises warnings for local runs, you have the following options, all equivalent use the colcon clang-libcxx mixin (see the documentation for configuring mixins) colcon build -- mixin clang - libcxx passing compiler to cmake colcon build -- cmake - args - dcmake_c_compiler = clang - dcmake_cxx_compiler = clang ++ - dcmake_cxx_flags = '-stdlib=libc++ -d_libcpp_enable_thread_safety_annotations' - dforce_build_vendor_pkg = on -- no - warn - unused - cli overriding system compiler cc = clang cxx = clang ++ colcon build -- cmake - args - dcmake_cxx_flags = '-stdlib=libc++ -d_libcpp_enable_thread_safety_annotations' - dforce_build_vendor_pkg = on -- no - warn - unused - cli resulting context: potential deadlocks and race conditions will be surfaced at compile time, when using clang and libcxx dynamic analysis (data races & deadlocks) ï context: you are developing/debugging your multithreaded c++ production code. you use pthreads or c++11 threading + llvm libc++ (in case of threadsanitizer). you do not use libc/libstdc++ static linking (in case of threadsanitizer). you do not build non-position-independent executables (in case of threadsanitizer). problem: data races and deadlocks can lead to critical bugs. data races and deadlocks cannot be detected using static analysis (reason: limitation of static analysis). data races and deadlocks must not show up during development debugging / testing (reason: usually not all possible control paths through production code exercised). solution: use a dynamic analysis tool which focuses on finding data races and deadlocks (here clang threadsanitizer). implementation: compile and link the production code with clang using the option -fsanitize=thread (this instruments the production code). in case different production code shall be executed during analysis consider conditional compilation e.g. threadsanitizers _has_feature(thread_sanitizer) . in case some code shall not be instrumented consider threadsanitizers _/*attribute*/_((no_sanitize(âthreadâ))) . in case some files shall not be instrumented consider file or function-level exclusion threadsanitizers blacklisting , more specific: threadsanitizers sanitizer special case list or with threadsanitizers no_sanitize(âthreadâ) and use the option --fsanitize-blacklist . resulting context: higher chance to find data races and deadlocks in production code before deploying it. analysis result may lack reliability, tool in beta phase stage (in case of threadsanitizer). overhead due to production code instrumentation (maintenance of separate branches for instrumented/not instrumented production code, etc.). instrumented code needs more memory per thread (in case of threadsanitizer). instrumented code maps a lot virtual address space (in case of threadsanitizer). other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling