tutorials demos configure service introspection edit on github configure service introspection ï goal: configure service introspection for a service client and a server. tutorial level: advanced time: 15 minutes overview ï ros 2 applications usually consist of services to execute specific procedures in remote nodes. it is possible to introspect service data communication with service introspection. in this demo, weâll be highlighting how to configure service introspection state for a service client and a server and monitor service communication with ros2 service echo . installing the demo ï see the installation instructions for details on installing ros 2. if youâve installed ros 2 binary packages, ensure that you have ros-jazzy-demo-nodes-cpp installed. if you downloaded the archive or built ros 2 from source, it will already be part of the installation. introspection configuration state ï there are 3 configuration states for service introspection. service introspection configuration state ï rcl_service_introspection_off disabled rcl_service_introspection_metadata only metadata without any user data contents rcl_service_introspection_contents user data contents with metadata introspection demo ï this demo shows how to manage service introspection and monitor the service data communication with using ros2 service echo . introspectionservicenode: https://github.com/ros2/demos/blob/jazzy/demo_nodes_cpp/src/services/introspection_service.cpp namespace demo_nodes_cpp { class introspectionservicenode : public rclcpp :: node { public : demo_nodes_cpp_public explicit introspectionservicenode ( const rclcpp :: nodeoptions & options ) : node ( "introspection_service" , options ) { auto handle_add_two_ints = [ this ]( const std :: shared_ptr < rmw_request_id_t > request_header , const std :: shared_ptr < example_interfaces :: srv :: addtwoints :: request > request , std :: shared_ptr < example_interfaces :: srv :: addtwoints :: response > response ) -> void { ( void ) request_header ; rclcpp_info ( this -> get_logger (), "incoming request \n a: %" prid64 " b: %" prid64 , request -> a , request -> b ); response -> sum = request -> a + request -> b ; }; // create a service that will use the callback function to handle requests. srv_ = create_service < example_interfaces :: srv :: addtwoints > ( "add_two_ints" , handle_add_two_ints ); auto on_set_parameter_callback = []( std :: vector < rclcpp :: parameter > parameters ) { rcl_interfaces :: msg :: setparametersresult result ; result . successful = true ; for ( const rclcpp :: parameter & param : parameters ) { if ( param . get_name () != "service_configure_introspection" ) { continue ; } if ( param . get_type () != rclcpp :: parametertype :: parameter_string ) { result . successful = false ; result . reason = "must be a string" ; break ; } if ( param . as_string () != "disabled" && param . as_string () != "metadata" && param . as_string () != "contents" ) { result . successful = false ; result . reason = "must be one of 'disabled', 'metadata', or 'contents'" ; break ; } } return result ; }; auto post_set_parameter_callback = [ this ]( const std :: vector < rclcpp :: parameter > & parameters ) { for ( const rclcpp :: parameter & param : parameters ) { if ( param . get_name () != "service_configure_introspection" ) { continue ; } rcl_service_introspection_state_t introspection_state = rcl_service_introspection_off ; if ( param . as_string () == "disabled" ) { introspection_state = rcl_service_introspection_off ; } else if ( param . as_string () == "metadata" ) { introspection_state = rcl_service_introspection_metadata ; } else if ( param . as_string () == "contents" ) { introspection_state = rcl_service_introspection_contents ; } this -> srv_ -> configure_introspection ( this -> get_clock (), rclcpp :: systemdefaultsqos (), introspection_state ); break ; } }; on_set_parameters_callback_handle_ = this -> add_on_set_parameters_callback ( on_set_parameter_callback ); post_set_parameters_callback_handle_ = this -> add_post_set_parameters_callback ( post_set_parameter_callback ); this -> declare_parameter ( "service_configure_introspection" , "disabled" ); } private : rclcpp :: service < example_interfaces :: srv :: addtwoints >:: sharedptr srv_ ; rclcpp :: node_interfaces :: onsetparameterscallbackhandle :: sharedptr on_set_parameters_callback_handle_ ; rclcpp :: node_interfaces :: postsetparameterscallbackhandle :: sharedptr post_set_parameters_callback_handle_ ; }; } // namespace demo_nodes_cpp service introspection is disable in default, so users need to enable it to call configure_introspection on service server. in this demo, introspectionservicenode uses a parameter named `service_configure_introspection to configure the service introspection state. 1st we need to start introspectionservicenode .  ros2 run demo_nodes_cpp introspection_service to change service introspection state, we need to set the configure_introspection parameter as following. ### user data contents with metadata  ros2 param set /introspection_service service_configure_introspection contents ### or only metadata  ros2 param set /introspection_service service_configure_introspection metadata ### to disable  ros2 param set /introspection_service service_configure_introspection disabled introspectionclientnode: https://github.com/ros2/demos/blob/jazzy/demo_nodes_cpp/src/services/introspection_client.cpp namespace demo_nodes_cpp { class introspectionclientnode : public rclcpp :: node { public : demo_nodes_cpp_public explicit introspectionclientnode ( const rclcpp :: nodeoptions & options ) : node ( "introspection_client" , options ) { client_ = create_client < example_interfaces :: srv :: addtwoints > ( "add_two_ints" ); auto on_set_parameter_callback = []( std :: vector < rclcpp :: parameter > parameters ) { rcl_interfaces :: msg :: setparametersresult result ; result . successful = true ; for ( const rclcpp :: parameter & param : parameters ) { if ( param . get_name () != "client_configure_introspection" ) { continue ; } if ( param . get_type () != rclcpp :: parametertype :: parameter_string ) { result . successful = false ; result . reason = "must be a string" ; break ; } if ( param . as_string () != "disabled" && param . as_string () != "metadata" && param . as_string () != "contents" ) { result . successful = false ; result . reason = "must be one of 'disabled', 'metadata', or 'contents'" ; break ; } } return result ; }; auto post_set_parameter_callback = [ this ]( const std :: vector < rclcpp :: parameter > & parameters ) { for ( const rclcpp :: parameter & param : parameters ) { if ( param . get_name () != "client_configure_introspection" ) { continue ; } rcl_service_introspection_state_t introspection_state = rcl_service_introspection_off ; if ( param . as_string () == "disabled" ) { introspection_state = rcl_service_introspection_off ; } else if ( param . as_string () == "metadata" ) { introspection_state = rcl_service_introspection_metadata ; } else if ( param . as_string () == "contents" ) { introspection_state = rcl_service_introspection_contents ; } this -> client_ -> configure_introspection ( this -> get_clock (), rclcpp :: systemdefaultsqos (), introspection_state ); break ; } }; on_set_parameters_callback_handle_ = this -> add_on_set_parameters_callback ( on_set_parameter_callback ); post_set_parameters_callback_handle_ = this -> add_post_set_parameters_callback ( post_set_parameter_callback ); this -> declare_parameter ( "client_configure_introspection" , "disabled" ); timer_ = this -> create_wall_timer ( std :: chrono :: milliseconds ( 500 ), [ this ]() { if ( ! client_ -> service_is_ready ()) { return ; } if ( ! request_in_progress_ ) { auto request = std :: make_shared < example_interfaces :: srv :: addtwoints :: request > (); request -> a = 2 ; request -> b = 3 ; request_in_progress_ = true ; client_ -> async_send_request ( request , [ this ]( rclcpp :: client < example_interfaces :: srv :: addtwoints >:: sharedfuture cb_f ) { request_in_progress_ = false ; rclcpp_info ( get_logger (), "result of add_two_ints: %ld" , cb_f . get () -> sum ); } ); return ; } }); } private : rclcpp :: client < example_interfaces :: srv :: addtwoints >:: sharedptr client_ ; rclcpp :: timerbase :: sharedptr timer_ ; rclcpp :: node_interfaces :: onsetparameterscallbackhandle :: sharedptr on_set_parameters_callback_handle_ ; rclcpp :: node_interfaces :: postsetparameterscallbackhandle :: sharedptr post_set_parameters_callback_handle_ ; bool request_in_progress_ { false }; }; } // namespace demo_nodes_cpp and then, we start and configure introspectionclientnode in the same way.  ros2 run demo_nodes_cpp introspection_client change service introspection state to set configure_introspection parameter as following. ### user data contents with metadata  ros2 param set /introspection_client client_configure_introspection contents ### or only metadata  ros2 param set /introspection_client client_configure_introspection metadata ### to disable  ros2 param set /introspection_client client_configure_introspection disabled in this tutorial the following is example output with service introspection state contents on introspectionservicenode and metadata on introspectionclientnode . to monitor service communication between introspectionclientnode and introspectionservicenode , letâs run it:  ros2 service echo --flow-style /add_two_ints info: event_type: request_sent stamp: sec: 1709432402 nanosec: 680094264 client_gid: [ 1 , 15 , 0 , 18 , 86 , 208 , 115 , 86 , 0 , 0 , 0 , 0 , 0 , 0 , 21 , 3 ] sequence_number: 247 request: [] response: [] --- info: event_type: request_received stamp: sec: 1709432402 nanosec: 680459568 client_gid: [ 1 , 15 , 0 , 18 , 86 , 208 , 115 , 86 , 0 , 0 , 0 , 0 , 0 , 0 , 20 , 4 ] sequence_number: 247 request: [{ a: 2 , b: 3 }] response: [] --- info: event_type: response_sent stamp: sec: 1709432402 nanosec: 680765280 client_gid: [ 1 , 15 , 0 , 18 , 86 , 208 , 115 , 86 , 0 , 0 , 0 , 0 , 0 , 0 , 20 , 4 ] sequence_number: 247 request: [] response: [{ sum: 5 }] --- info: event_type: response_received stamp: sec: 1709432402 nanosec: 681027998 client_gid: [ 1 , 15 , 0 , 18 , 86 , 208 , 115 , 86 , 0 , 0 , 0 , 0 , 0 , 0 , 21 , 3 ] sequence_number: 247 request: [] response: [] --- ... you can see the event_type: request_sent and event_type: response_received , those introspection service event take place in introspectionclientnode . and those events does not include any contents in request and response field, this is because introspectionclientnode âs service introspection state is set to metadata . on the other hand, event_type: request_received and event_type: response_sent event from introspectionservicenode includes request: [{a: 2, b: 3}] and response: [{sum: 5}] as introspection state is set to contents . related content ï service introspection client example (rclcpp) and service introspection service example (rclcpp) . service introspection client and service example (rclpy) . service introspection rep-2012 . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling