tutorials intermediate launch using event handlers edit on github using event handlers ï goal: learn  event handlers in ros 2 launch files tutorial level: intermediate time: 15 minutes background ï launch in ros 2 is a system that executes and manages user-defined processes. it is responsible for monitoring the state of processes it launched, as well as reporting and reacting to changes in the state of those processes. these changes are called events and can be handled by registering an event handler with the launch system. event handlers can be registered for specific events and can be useful for monitoring the state of processes. additionally, they can be used to define a complex set of rules which can be used to dynamically modify the launch file. this tutorial shows usage examples of event handlers in ros 2 launch files. prerequisites ï this tutorial uses the turtlesim package. this tutorial also assumes you have created a new package of build type ament_python called launch_tutorial . this tutorial extends the code shown in the using substitutions in launch files tutorial. using event handlers ï 1 event handlers example launch file ï create a new file called example_event_handlers_launch.py file in the launch folder of the launch_tutorial package. from launch_ros.actions import node from launch import launchdescription from launch.actions import ( declarelaunchargument , emitevent , executeprocess , loginfo , registereventhandler , timeraction ) from launch.conditions import ifcondition from launch.event_handlers import ( onexecutioncomplete , onprocessexit , onprocessio , onprocessstart , onshutdown ) from launch.events import shutdown from launch.substitutions import ( environmentvariable , findexecutable , launchconfiguration , localsubstitution , pythonexpression ) def generate_launch_description (): turtlesim_ns = launchconfiguration ( 'turtlesim_ns' ) use_provided_red = launchconfiguration ( 'use_provided_red' ) new_background_r = launchconfiguration ( 'new_background_r' ) turtlesim_ns_launch_arg = declarelaunchargument ( 'turtlesim_ns' , default_value = 'turtlesim1' ) use_provided_red_launch_arg = declarelaunchargument ( 'use_provided_red' , default_value = 'false' ) new_background_r_launch_arg = declarelaunchargument ( 'new_background_r' , default_value = '200' ) turtlesim_node = node ( package = 'turtlesim' , namespace = turtlesim_ns , executable = 'turtlesim_node' , name = 'sim' ) spawn_turtle = executeprocess ( cmd = [[ findexecutable ( name = 'ros2' ), ' service call ' , turtlesim_ns , '/spawn ' , 'turtlesim/srv/spawn ' , '"{x: 2, y: 2, theta: 0.2}"' ]], shell = true ) change_background_r = executeprocess ( cmd = [[ findexecutable ( name = 'ros2' ), ' param set ' , turtlesim_ns , '/sim background_r ' , '120' ]], shell = true ) change_background_r_conditioned = executeprocess ( condition = ifcondition ( pythonexpression ([ new_background_r , ' == 200' , ' and ' , use_provided_red ]) ), cmd = [[ findexecutable ( name = 'ros2' ), ' param set ' , turtlesim_ns , '/sim background_r ' , new_background_r ]], shell = true ) return launchdescription ([ turtlesim_ns_launch_arg , use_provided_red_launch_arg , new_background_r_launch_arg , turtlesim_node , registereventhandler ( onprocessstart ( target_action = turtlesim_node , on_start = [ loginfo ( msg = 'turtlesim started, spawning turtle' ), spawn_turtle ] ) ), registereventhandler ( onprocessio ( target_action = spawn_turtle , on_stdout = lambda event : loginfo ( msg = 'spawn request says " {} "' . format ( event . text . decode () . strip ()) ) ) ), registereventhandler ( onexecutioncomplete ( target_action = spawn_turtle , on_completion = [ loginfo ( msg = 'spawn finished' ), change_background_r , timeraction ( period = 2.0 , actions = [ change_background_r_conditioned ], ) ] ) ), registereventhandler ( onprocessexit ( target_action = turtlesim_node , on_exit = [ loginfo ( msg = ( environmentvariable ( name = 'user' ), ' closed the turtlesim window' )), emitevent ( event = shutdown ( reason = 'window closed' )) ] ) ), registereventhandler ( onshutdown ( on_shutdown = [ loginfo ( msg = [ 'launch was asked to shutdown: ' , localsubstitution ( 'event.reason' )] )] ) ), ]) registereventhandler actions for the onprocessstart , onprocessio , onexecutioncomplete , onprocessexit , and onshutdown events were defined in the launch description. the onprocessstart event handler is used to register a callback function that is executed when the turtlesim node starts. it logs a message to the console and executes the spawn_turtle action when the turtlesim node starts. registereventhandler ( onprocessstart ( target_action = turtlesim_node , on_start = [ loginfo ( msg = 'turtlesim started, spawning turtle' ), spawn_turtle ] ) ), the onprocessio event handler is used to register a callback function that is executed when the spawn_turtle action writes to its standard output. it logs the result of the spawn request. registereventhandler ( onprocessio ( target_action = spawn_turtle , on_stdout = lambda event : loginfo ( msg = 'spawn request says " {} "' . format ( event . text . decode () . strip ()) ) ) ), the onexecutioncomplete event handler is used to register a callback function that is executed when the spawn_turtle action completes. it logs a message to the console and executes the change_background_r and change_background_r_conditioned actions when the spawn action completes. registereventhandler ( onexecutioncomplete ( target_action = spawn_turtle , on_completion = [ loginfo ( msg = 'spawn finished' ), change_background_r , timeraction ( period = 2.0 , actions = [ change_background_r_conditioned ], ) ] ) ), the onprocessexit event handler is used to register a callback function that is executed when the turtlesim node exits. it logs a message to the console and executes the emitevent action to emit a shutdown event when the turtlesim node exits. it means that the launch process will shutdown when the turtlesim window is closed. registereventhandler ( onprocessexit ( target_action = turtlesim_node , on_exit = [ loginfo ( msg = ( environmentvariable ( name = 'user' ), ' closed the turtlesim window' )), emitevent ( event = shutdown ( reason = 'window closed' )) ] ) ), finally, the onshutdown event handler is used to register a callback function that is executed when the launch file is asked to shutdown. it logs a message to the console why the launch file is asked to shutdown. it logs the message with a reason for shutdown like the closure of turtlesim window or ctrl - c signal made by the user. registereventhandler ( onshutdown ( on_shutdown = [ loginfo ( msg = [ 'launch was asked to shutdown: ' , localsubstitution ( 'event.reason' )] )] ) ), build the package ï go to the root of the workspace, and build the package: colcon build also remember to source the workspace after building. launching example ï now you can launch the example_event_handlers_launch.py file using the ros2 launch command. ros2 launch launch_tutorial example_event_handlers_launch.py turtlesim_ns:='turtlesim3' use_provided_red:='true' new_background_r:=200 this will do the following: start a turtlesim node with a blue background spawn the second turtle change the color to purple change the color to pink after two seconds if the provided background_r argument is 200 and use_provided_red argument is true shutdown the launch file when the turtlesim window is closed additionally, it will log messages to the console when: the turtlesim node starts the spawn action is executed the change_background_r action is executed the change_background_r_conditioned action is executed the turtlesim node exits the launch process is asked to shutdown. documentation ï the launch documentation provides detailed information  available event handlers. summary ï in this tutorial, you learned  using event handlers in launch files. you learned  their syntax and usage examples to define a complex set of rules to dynamically modify launch files. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling