tutorials beginner: client libraries using colcon to build packages edit on github using colcon to build packages ï goal: build a ros 2 workspace with colcon . tutorial level: beginner time: 20 minutes this is a brief tutorial on how to create and build a ros 2 workspace with colcon . it is a practical tutorial and not designed to replace the core documentation. background ï colcon is an iteration on the ros build tools catkin_make , catkin_make_isolated , catkin_tools and ament_tools . for more information on the design of colcon see this document . the source code can be found in the colcon github organization . prerequisites ï install colcon ï linux macos windows sudo apt install python3-colcon-common-extensions python3 -m pip install colcon-common-extensions pip install -u colcon-common-extensions install ros 2 ï to build the samples, you will need to install ros 2. follow the installation instructions . attention if installing from deb packages, this tutorial requires the desktop installation . basics ï a ros workspace is a directory with a particular structure. commonly there is a src subdirectory. inside that subdirectory is where the source code of ros packages will be located. typically the directory starts otherwise empty. colcon does out of source builds. by default it will create the following directories as peers of the src directory: the build directory will be where intermediate files are stored. for each package a subfolder will be created in which e.g. cmake is being invoked. the install directory is where each package will be installed to. by default each package will be installed into a separate subdirectory. the log directory contains various logging information  each colcon invocation. note compared to catkin there is no devel directory. create a workspace ï first, create a directory ( ros2_ws ) to contain our workspace: linux macos windows mkdir -p ~/ros2_ws/src cd ~/ros2_ws mkdir -p ~/ros2_ws/src cd ~/ros2_ws md \d ev \r os2_ws \s rc cd \d ev \r os2_ws at this point the workspace contains a single empty directory src : . âââ src 1 directory, 0 files add some sources ï letâs clone the examples repository into the src directory of the workspace: git clone https://github.com/ros2/examples src/examples -b jazzy now the workspace should have the source code to the ros 2 examples: . âââ src âââ examples âââ contributing.md âââ license âââ rclcpp âââ rclpy âââ readme.md 4 directories, 3 files source an underlay ï it is important that we have sourced the environment for an existing ros 2 installation that will provide our workspace with the necessary build dependencies for the example packages. this is achieved by sourcing the setup script provided by a binary installation or a source installation, ie. another colcon workspace (see installation ). we call this environment an underlay . our workspace, ros2_ws , will be an overlay on top of the existing ros 2 installation. in general, it is recommended to use an overlay when you plan to iterate on a small number of packages, rather than putting all of your packages into the same workspace. build the workspace ï attention to build packages on windows you need to be in a visual studio environment, see building the ros 2 code for more details. in the root of the workspace, run colcon build . since build types such as ament_cmake do not support the concept of the devel space and require the package to be installed, colcon supports the option --symlink-install . this allows the installed files to be changed by changing the files in the source space (e.g. python files or other non-compiled resources) for faster iteration. linux macos windows colcon build --symlink-install colcon build --symlink-install colcon build --symlink-install --merge-install windows doesnât allow long paths, so merge-install will combine all the paths into the install directory. after the build is finished, we should see the build , install , and log directories: . âââ build âââ install âââ log âââ src 4 directories, 0 files run tests ï to run tests for the packages we just built, run the following: linux macos windows colcon test colcon test remember to use a x64 native tools command prompt for vs 2019 for executing the following command, as we are going to build a workspace. colcon test --merge-install you also need to specify --merge-install here since we used it for building above. source the environment ï when colcon has completed building successfully, the output will be in the install directory. before you can use any of the installed executables or libraries, you will need to add them to your path and library paths. colcon will have generated bash/bat files in the install directory to help set up the environment. these files will add all of the required elements to your path and library paths as well as provide any bash or shell commands exported by packages. linux macos windows source install/setup.bash . install/setup.bash call install \s etup.bat or with powershell: install \s etup.ps1 try a demo ï with the environment sourced, we can run executables built by colcon. letâs run a subscriber node from the examples: ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function in another terminal, letâs run a publisher node (donât forget to source the setup script): ros2 run examples_rclcpp_minimal_publisher publisher_member_function you should see messages from the publisher and subscriber with numbers incrementing. create your own package ï colcon uses the package.xml specification defined in rep 149 ( format 2 is also supported). colcon supports multiple build types. the recommended build types are ament_cmake and ament_python . also supported are pure cmake packages. an example of an ament_python build is the ament_index_python package , where the setup.py is the primary entry point for building. a package such as demo_nodes_cpp uses the ament_cmake build type, and uses cmake as the build tool. for convenience, you can use the tool ros2 pkg create to create a new package based on a template. note for catkin users, this is the equivalent of catkin_create_package . setup colcon_cd ï the command colcon_cd allows you to quickly change the current working directory of your shell to the directory of a package. as an example colcon_cd some_ros_package would quickly bring you to the directory ~/ros2_ws/src/some_ros_package . linux macos windows echo "source /usr/share/colcon_cd/function/colcon_cd.sh" >> ~/.bashrc echo "export _colcon_cd_root=/opt/ros/jazzy/" >> ~/.bashrc echo "source /usr/local/share/colcon_cd/function/colcon_cd.sh" >> ~/.bashrc echo "export _colcon_cd_root=~/ros2_install" >> ~/.bashrc not yet available depending on the way you installed colcon_cd and where your workspace is, the instructions above may vary,  refer to the documentation for more details. to undo this in linux and macos, locate your systemâs shell startup script and remove the appended source and export commands. setup colcon tab completion ï the colcon command supports command completion for bash and bash-like shells. the colcon-argcomplete package must be installed, and some setup may be required to make it work. tips ï if you do not want to build a specific package place an empty file named colcon_ignore in the directory and it will not be indexed. if you want to avoid configuring and building tests in cmake packages you can pass: --cmake-args -dbuild_testing=0 . if you want to run a single particular test from a package: colcon test --packages-select your_pkg_name --ctest-args -r your_test_in_pkg other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling