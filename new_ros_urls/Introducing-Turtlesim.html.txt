tutorials beginner: cli tools using turtlesim , ros2 , and rqt edit on github using turtlesim , ros2 , and rqt ï goal: install and use the turtlesim package and rqt tools to prepare for upcoming tutorials. tutorial level: beginner time: 15 minutes background ï turtlesim is a lightweight simulator for learning ros 2. it illustrates what ros 2 does at the most basic level to give you an idea of what you will do with a real robot or a robot simulation later on. the ros2 tool is how the user manages, introspects, and interacts with a ros system. it supports multiple commands that target different aspects of the system and its operation. one might use it to start a node, set a parameter, listen to a topic, and many more. the ros2 tool is part of the core ros 2 installation. rqt is a graphical user interface (gui) tool for ros 2. everything done in rqt can be done on the command line, but rqt provides a more user-friendly way to manipulate ros 2 elements. this tutorial touches upon core ros 2 concepts, like nodes, topics, and services. all of these concepts will be elaborated on in later tutorials; for now, you will simply set up the tools and get a feel for them. prerequisites ï the previous tutorial, configuring environment , will show you how to set up your environment. tasks ï 1 install turtlesim ï as always, start by sourcing your setup files in a new terminal, as described in the previous tutorial . install the turtlesim package for your ros 2 distro: linux macos windows sudo apt update sudo apt install ros-jazzy-turtlesim as long as the archive you installed ros 2 from contains the ros_tutorials repository, you should already have turtlesim installed. as long as the archive you installed ros 2 from contains the ros_tutorials repository, you should already have turtlesim installed. check that the package is installed: ros2 pkg executables turtlesim the above command should return a list of turtlesimâs executables: turtlesim draw_square turtlesim mimic turtlesim turtle_teleop_key turtlesim turtlesim_node 2 start turtlesim ï to start turtlesim, enter the following command in your terminal: ros2 run turtlesim turtlesim_node the simulator window should appear, with a random turtle in the center. in the terminal, under the command, you will see messages from the node: [info] [turtlesim]: starting turtlesim with node name /turtlesim [info] [turtlesim]: spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000] there you can see the default turtleâs name and the coordinates where it spawns. 3 use turtlesim ï open a new terminal and source ros 2 again. now you will run a new node to control the turtle in the first node: ros2 run turtlesim turtle_teleop_key at this point you should have three windows open: a terminal running turtlesim_node , a terminal running turtle_teleop_key and the turtlesim window. arrange these windows so that you can see the turtlesim window, but also have the terminal running turtle_teleop_key active so that you can control the turtle in turtlesim. use the arrow keys on your keyboard to control the turtle. it will move around the screen, using its attached âpenâ to draw the path it followed so far. note pressing an arrow key will only cause the turtle to move a short distance and then stop. this is because, realistically, you wouldnât want a robot to continue carrying on an instruction if, for example, the operator lost the connection to the robot. you can see the nodes, and their associated topics, services, and actions, using the list subcommands of the respective commands: ros2 node list ros2 topic list ros2 service list ros2 action list you will learn more  these concepts in the coming tutorials. since the goal of this tutorial is only to get a general overview of turtlesim, you will use rqt to call some of the turtlesim services and interact with turtlesim_node . 4 install rqt ï open a new terminal to install rqt and its plugins: ubuntu rhel macos windows sudo apt update sudo apt install '~nros-jazzy-rqt*' sudo dnf install 'ros-jazzy-rqt*' the standard archive for installing ros 2 on macos contains rqt and its plugins, so you should already have rqt installed. the standard archive for installing ros 2 on windows contains rqt and its plugins, so you should already have rqt installed. to run rqt: rqt 5 use rqt ï when running rqt for the first time, the window will be blank. no worries; just select plugins > services > service caller from the menu bar at the top. note it may take some time for rqt to locate all the plugins. if you click on plugins but donât see services or any other options, you should close rqt and enter the command rqt --force-discover in your terminal. use the refresh button to the left of the service dropdown list to ensure all the services of your turtlesim node are available. click on the service dropdown list to see turtlesimâs services, and select the /spawn service. 5.1 try the spawn service ï letâs use rqt to call the /spawn service. you can guess from its name that /spawn will create another turtle in the turtlesim window. give the new turtle a unique name, like turtle2 , by double-clicking between the empty single quotes in the expression column. you can see that this expression corresponds to the value of name and is of type string . next enter some valid coordinates at which to spawn the new turtle, like x = 1.0 and y = 1.0 . note if you try to spawn a new turtle with the same name as an existing turtle, like the default turtle1 , you will get an error message in the terminal running turtlesim_node : [error] [turtlesim]: a turtle named [turtle1] already exists to spawn turtle2 , you then need to call the service by clicking the call button on the upper right side of the rqt window. if the service call was successful, you should see a new turtle (again with a random design) spawn at the coordinates you input for x and y . if you refresh the service list in rqt, you will also see that now there are services related to the new turtle, /turtle2/... , in addition to /turtle1/... . 5.2 try the set_pen service ï now letâs give turtle1 a unique pen using the /set_pen service: the values for r , g and b , which are between 0 and 255, set the color of the pen turtle1 draws with, and width sets the thickness of the line. to have turtle1 draw with a distinct red line, change the value of r to 255, and the value of width to 5. donât forget to call the service after updating the values. if you return to the terminal where turtle_teleop_key is running and press the arrow keys, you will see turtle1 âs pen has changed. youâve probably also noticed that thereâs no way to move turtle2 . thatâs because there is no teleop node for turtle2 . 6 remapping ï you need a second teleop node in order to control turtle2 . however, if you try to run the same command as before, you will notice that this one also controls turtle1 . the way to change this behavior is by remapping the cmd_vel topic. in a new terminal, source ros 2, and run: ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel now, you can move turtle2 when this terminal is active, and turtle1 when the other terminal running turtle_teleop_key is active. 7 close turtlesim ï to stop the simulation, you can enter ctrl + c in the turtlesim_node terminal, and q in the turtle_teleop_key terminals. summary ï using turtlesim and rqt is a great way to learn the core concepts of ros 2. next steps ï now that you have turtlesim and rqt up and running, and an idea of how they work, letâs dive into the first core ros 2 concept with the next tutorial, understanding nodes . related content ï the turtlesim package can be found in the ros_tutorials repo. this community contributed video demonstrates many of the items covered in this tutorial. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling