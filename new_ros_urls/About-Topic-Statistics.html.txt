concepts intermediate concepts topic statistics edit on github topic statistics ï overview ï ros 2 provides integrated measurement of statistics for messages received by any . allowing a user to collect  statistics enables them to characterize the performance of their system or aid in diagnosis of any present issues. the measurements provided are the received message age and received message period. for each measurement the statistics provided are the average, maximum, minimum, standard deviation, and sample count. these statistics are calculated in a moving window. how statistics are calculated ï each statistic set is calculated in constant time and constant memory by using the utilities implemented in the libstatistics_collector package. when a new message is received by a , this is a new sample for calculation in the current measurement window. the average calculated is simply a moving average . the maximum, minimum, and sample count are updated upon receipt of each new sample, whereas the standard deviation is calculated using welfordâs online algorithm . types of statistics calculated ï received message period units: milliseconds uses the system clock to measure the period between received messages received message age units: milliseconds requires a message to have a timestamp populated in the header field in order to calculate the age of the message as sent from a publisher behavior ï by default, topic statistics measurements are not enabled. after enabling this feature for a specific node via the  configuration options, both received message age and received message period measurements are enabled for that specific . the data is published as a statistics_msg/msg/metricsmessage at a configurable period (default 1 second) to a configurable topic (default /statistics ). note that the publishing period also serves as the sample collection window period. since received message period requires a message timestamp in a header field, empty data is published. that is, all statistics values are nan if no timestamp is found. publishing nan values instead of not publishing at all avoids the absence of a signal problem and is meant to explicitly show that a measurement could not be made. the first sample of each window for the received message period statistic does not yield a measurement. this is because calculating this statistic requires knowing the time the previous message arrived, so subsequent samples in the window yield measurements. comparison to ros 1 ï similar to ros 1 topic statistics , both message age and message period are calculated, albeit from the  side. other ros 1 metrics, e.g., the number of dropped messages or traffic volume, are currently not provided. support ï this feature is currently supported in ros 2 foxy for c++ only (rclcpp). future work and improvements, such as python support, can be found here . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling