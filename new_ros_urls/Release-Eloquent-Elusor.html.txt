distributions end-of-life distributions eloquent elusor ( eloquent ) edit on github eloquent elusor ( eloquent ) ï eloquent elusor is the fifth release of ros 2. supported platforms ï eloquent elusor is primarily supported on the following platforms: tier 1 platforms: ubuntu 18.04 (bionic): amd64 and arm64 mac macos 10.14 (mojave) windows 10 (visual studio 2019) tier 2 platforms: ubuntu 18.04 (bionic): arm32 tier 3 platforms: debian stretch (9): amd64 , arm64 and arm32 openembedded thud (2.6) / webos ose: arm32 and x86 for more information  rmw implementations, compiler / interpreter versions, and system dependency versions see rep 2000 . installation ï install eloquent elusor new features in this ros 2 release ï a few features and improvements we would like to highlight: support for markup-based launch files (xml/yaml) improved launch-based testing passing key-value parameters on cli support stream logging macros per-node logging - all stdout/stderr output from nodes are logged in ~/.ros ros2doctor improved performance of sourcing setup files rviz: interactive markers , torque ring , tf message filters rqt: parameter plugin , tf tree plugin , robot steering plugin (also backported to dashing) turtlesim (also backported to dashing) rmw implementations: api to loan message for zero copy , used by rmw_iceoryx fast rtps 1.9.3 new tier-2 implementation: rmw_cyclonedds (also backported to dashing) environment variable ros_localhost_only to limit communication to localhost macos mojave support tracing instrumentation for rcl and rclcpp during the development the eloquent meta ticket on github contains an up-to-date state of the ongoing high level tasks as well as references specific tickets with more details. changes since the dashing release ï geometry_msgs ï the geometry_msgs/msg/quaternion.msg interface now default initializes to a valid quaternion, with the following values: \[\begin{split}x = 0 \\ y = 0 \\ z = 0 \\ w = 1\end{split}\] here is the pull request for more detail: https://github.com/ros2/common_interfaces/pull/74 static transform broadcasters and listeners now use qos durability transient_local on the /tf_static topic. similar to the latched setting in ros 1, static transforms only need to be published once. new listeners will receive transforms from all static broadcasters that are alive and have published before. all publishers must be updated to use this durability setting or their messages wonât be received by transform listeners. see this pull request for more detail: https://github.com/ros2/geometry2/pull/160 rclcpp ï api break with get_actual_qos() ï introduced in dashing, the get_actual_qos() method on the publisherbase and base previously returned an rmw type, rmw_qos_profile_t , but that made it awkward to reuse with the creation of other entities. therefore it was updated to return a rclcpp::qos instead. existing code will need to use the rclcpp::qos::get_rmw_qos_profile() method if the rmw profile is still required. for example: void my_func ( const rmw_qos_profile_t & rmw_qos ); /* previously: */ // my_func(some_pub->get_actual_qos()); /* now: */ my_func ( some_pub -> get_actual_qos () -> get_rmw_qos_profile ()); the rationale for breaking this directly rather than doing a tick-tock is that it is a new function and is expected to be used infrequently by users. also, since only the return type is changing, adding a new function with a different would be to only way to do a deprecation cycle and get_actual_qos() is the most appropriate name, so we would be forced to pick a less obvious name for the method. api break with publisher and  classes ï in an effort to streamline the construction of publishers and s, the api of the constructors were changed. it would be impossible to support a deprecation cycle, because the old signature takes an rcl type and the new one takes the nodebaseinterface type so that it can get additional information it now needs, and thereâs no way to get the additional information needed from just the rcl type. the new signature could possibly be backported if that would help contributors, but since the publishers and s are almost always created using the factory functions or some other higher level api, we do not expect this to be a problem for most users.  see the original pr for more detail and comment there if this causes issues: https://github.com/ros2/rclcpp/pull/867 compiler warning  unused result of add_on_set_parameters_callback ï since eloquent patch release 2 (2020-12-04) users should retain the handle returned by rclcpp::node::add_on_set_parameters_callback , otherwise their callback may be unregistered. a warning has been added to help identify bugs where the returned handle is not used. https://github.com/ros2/rclcpp/pull/1243 rmw ï api break due to addition of publisher and  options ï the rmw_create_publisher() method had a new argument added of type const rmw_publisher_options_t * . this new structure holds options (beyond the typesupport, topic name, and qos) for new publishers. the rmw_create_() method had one argument removed, bool ignore_local_publications , and replaced by the new options of type const rmw__options_t * . the ignore_local_publications option was moved into the new rmw__options_t type. in both cases the new argument, which are pointers, may never be null, and so the rmw implementations should check to make sure the options are not null. additionally, the options should be copied into the corresponding rmw structure. see this pull request, and the associated pull requests for more details: https://github.com/ros2/rmw/pull/187 ros2cli ï ros2msg and ros2srv deprecated ï the cli tools ros2msg and ros2srv are deprecated. they have been replaced by the tool ros2interface , which also supports action and idl interfaces. you can run ros2 interface --help for usage. ros2node ï service clients have been added to ros2node info. as part of that change the python function ros2node.api.get_service_info has been renamed to ros2node.api.get_service_server_info . rviz ï renamed â2d nav goalâ tool ï the tool was renamed to â2d goal poseâ and the default topic was changed from /move_base_simple/goal to /goal_pose . here is the related pull request: https://github.com/ros2/rviz/pull/455 tf2 buffer ï tf2 buffers now have to be given a timer interface. if a timer interface is not given, an exception will be thrown. for example: tf = std :: make_shared < tf2_ros :: buffer > ( get_clock ()); // the next two lines are new in eloquent auto timer_interface = std :: make_shared < tf2_ros :: createtimerros > ( this -> get_node_base_interface (), this -> get_node_timers_interface ()); tf -> setcreatetimerinterface ( timer_interface ); // pass the buffer to the transformlistener as before transform_listener = std :: make_shared < tf2_ros :: transformlistener > ( * tf ); rcl ï ros command line argument changes ï to cope with an increasingly complex interface, with a now extended set of configuration options, ros cli syntax has been changed. as an example, a command line using dashing syntax like: ros2 run some_package some_node foo:=bar __params:=/path/to/params.yaml __log_level:=warn --user-flag is written using eloquent (and onwards) syntax as: ros2 run some_package some_node --ros-args --remap foo:=bar --params-file /path/to/params.yaml --log-level warn -- --user-flag this explicit syntax affords new features, like single parameter assignment --param name:=value . for further reference and rationale, check the ros command line arguments design document . warning former syntax has been deprecated and is due for removal in the next release. known issues ï [ros2/rosidl#402] find_package(pcl) interferes with ros interface generation. workaround: invoke find_package(pcl) after rosidl_generate_interfaces() . [ros2/rclcpp#893] rclcpp::context is not destroyed because of a reference cycle with rclcpp::graphlistener . this causes a memory leak. a fix has not been backported because of the risk of breaking abi. timeline before the release ï a few milestones leading up to the release: mon. sep 30th (alpha) first releases of core packages available. testing can happen from now on (some features might not have landed yet). fri. oct 18th api and feature freeze for core packages only bug fix releases should be made after this point. new packages can be released independently. thu. oct 24th (beta) updated releases of core packages available. additional testing of the latest features. wed. nov 13th (release candidate) updated releases of core packages available. tue. nov 19th freeze rosdistro. no prs for eloquent on the rosdistro repo will be merged (reopens after the release announcement). other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling