tutorials intermediate launch creating a launch file edit on github creating a launch file ï goal: create a launch file to run a complex ros 2 system. tutorial level: intermediate time: 10 minutes prerequisites ï this tutorial uses the rqt_graph and turtlesim packages. you will also need to use a text editor of your preference. as always, donât forget to source ros 2 in every new terminal you open . background ï the launch system in ros 2 is responsible for helping the user describe the configuration of their system and then execute it as described. the configuration of the system includes what programs to run, where to run them, what arguments to pass them, and ros-specific conventions which make it easy to reuse components throughout the system by giving them each a different configuration. it is also responsible for monitoring the state of the processes launched, and reporting and/or reacting to changes in the state of those processes. launch files written in python, xml, or yaml can start and stop different nodes as well as trigger and act on various events. see using python, xml, and yaml for ros 2 launch files for a description of the different formats. the package providing this framework is launch_ros , which uses the non-ros-specific launch framework underneath. the design document details the goal of the design of ros 2âs launch system (not all functionality is currently available). tasks ï 1 setup ï create a new directory to store your launch files: mkdir launch 2 write the launch file ï letâs put together a ros 2 launch file using the turtlesim package and its executables. as mentioned above, this can either be in python, xml, or yaml. python xml yaml copy and paste the complete code into the launch/turtlesim_mimic_launch.py file: from launch import launchdescription from launch_ros.actions import node def generate_launch_description (): return launchdescription ([ node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) copy and paste the complete code into the launch/turtlesim_mimic_launch.xml file: <launch> <node pkg= "turtlesim" exec= "turtlesim_node" name= "sim" namespace= "turtlesim1" /> <node pkg= "turtlesim" exec= "turtlesim_node" name= "sim" namespace= "turtlesim2" /> <node pkg= "turtlesim" exec= "mimic" name= "mimic" > <remap from= "/input/pose" to= "/turtlesim1/turtle1/pose" /> <remap from= "/output/cmd_vel" to= "/turtlesim2/turtle1/cmd_vel" /> </node> </launch> copy and paste the complete code into the launch/turtlesim_mimic_launch.yaml file: launch : - node : pkg : "turtlesim" exec : "turtlesim_node" name : "sim" namespace : "turtlesim1" - node : pkg : "turtlesim" exec : "turtlesim_node" name : "sim" namespace : "turtlesim2" - node : pkg : "turtlesim" exec : "mimic" name : "mimic" remap : - from : "/input/pose" to : "/turtlesim1/turtle1/pose" - from : "/output/cmd_vel" to : "/turtlesim2/turtle1/cmd_vel" 2.1 examine the launch file ï all of the launch files above are launching a system of three nodes, all from the turtlesim package. the goal of the system is to launch two turtlesim windows, and have one turtle mimic the movements of the other. when launching the two turtlesim nodes, the only difference between them is their namespace values. unique namespaces allow the system to start two nodes without node name or topic name conflicts. both turtles in this system receive commands over the same topic and publish their pose over the same topic. with unique namespaces, messages meant for different turtles can be distinguished. the final node is also from the turtlesim package, but a different executable: mimic . this node has added configuration details in the form of remappings. mimic âs /input/pose topic is remapped to /turtlesim1/turtle1/pose and itâs /output/cmd_vel topic to /turtlesim2/turtle1/cmd_vel . this means mimic will subscribe to /turtlesim1/sim âs pose topic and republish it for /turtlesim2/sim âs velocity command topic to subscribe to. in other words, turtlesim2 will mimic turtlesim1 âs movements. python xml yaml these import statements pull in some python launch modules. from launch import launchdescription from launch_ros.actions import node next, the launch description itself begins: def generate_launch_description (): return launchdescription ([ ]) the first two actions in the launch description launch the two turtlesim windows: node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), the final action launches the mimic node with the remaps: node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) the first two actions launch the two turtlesim windows: <node pkg= "turtlesim" exec= "turtlesim_node" name= "sim" namespace= "turtlesim1" /> <node pkg= "turtlesim" exec= "turtlesim_node" name= "sim" namespace= "turtlesim2" /> the final action launches the mimic node with the remaps: <node pkg= "turtlesim" exec= "mimic" name= "mimic" > <remap from= "/input/pose" to= "/turtlesim1/turtle1/pose" /> <remap from= "/output/cmd_vel" to= "/turtlesim2/turtle1/cmd_vel" /> </node> the first two actions launch the two turtlesim windows: - node : pkg : "turtlesim" exec : "turtlesim_node" name : "sim" namespace : "turtlesim1" - node : pkg : "turtlesim" exec : "turtlesim_node" name : "sim" namespace : "turtlesim2" the final action launches the mimic node with the remaps: - node : pkg : "turtlesim" exec : "mimic" name : "mimic" remap : - from : "/input/pose" to : "/turtlesim1/turtle1/pose" - from : "/output/cmd_vel" to : "/turtlesim2/turtle1/cmd_vel" 3 ros2 launch ï to run the launch file created above, enter into the directory you created earlier and run the following command: python xml yaml cd launch ros2 launch turtlesim_mimic_launch.py cd launch ros2 launch turtlesim_mimic_launch.xml cd launch ros2 launch turtlesim_mimic_launch.yaml note it is possible to launch a launch file directly (as we do above), or provided by a package. when it is provided by a package, the syntax is: ros2 launch <package_name> <launch_file_name> you learned  creating packages in creating a package . note for packages with launch files, it is a good idea to add an exec_depend dependency on the ros2launch package in your packageâs package.xml : <exec_depend> ros2launch </exec_depend> this helps make sure that the ros2 launch command is available after building your package. it also ensures that all launch file formats are recognized. two turtlesim windows will open, and you will see the following [info] messages telling you which nodes your launch file has started: [info] [launch]: default logging verbosity is set to info [info] [turtlesim_node-1]: process started with pid [11714] [info] [turtlesim_node-2]: process started with pid [11715] [info] [mimic-3]: process started with pid [11716] to see the system in action, open a new terminal and run the ros2 topic pub command on the /turtlesim1/turtle1/cmd_vel topic to get the first turtle moving: ros2 topic pub -r 1 /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}" you will see both turtles following the same path. 4 introspect the system with rqt_graph ï while the system is still running, open a new terminal and run rqt_graph to get a better idea of the relationship between the nodes in your launch file. run the command: rqt_graph a hidden node (the ros2 topic pub command you ran) is publishing data to the /turtlesim1/turtle1/cmd_vel topic on the left, which the /turtlesim1/sim node is subscribed to. the rest of the graph shows what was described earlier: mimic is subscribed to /turtlesim1/sim âs pose topic, and publishes to /turtlesim2/sim âs velocity command topic. summary ï launch files simplify running complex systems with many nodes and specific configuration details. you can create launch files using python, xml, or yaml, and run them using the ros2 launch command. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling