tutorials intermediate monitoring for parameter changes (python) edit on github monitoring for parameter changes (python) ï goal: learn to use the parametereventhandler class to monitor and respond to parameter changes. tutorial level: intermediate time: 20 minutes background ï often a node needs to respond to changes to its own parameters or another nodeâs parameters. the parametereventhandler class makes it easy to listen for parameter changes so that your code can respond to them. this tutorial will show you how to use the python version of the parametereventhandler class to monitor for changes to a nodeâs own parameters as well as changes to another nodeâs parameters. prerequisites ï before starting this tutorial, you should first complete the following tutorials: understanding parameters using parameters in a class (python) tasks ï in this tutorial, you will create a new package to contain some sample code, write some python code to use the parametereventhandler class, and test the resulting code. 1 create a package ï first, open a new terminal and source your ros 2 installation so that ros2 commands will work. follow these instructions to create a new workspace named ros2_ws . recall that packages should be created in the src directory, not the root of the workspace. so, navigate into ros2_ws/src and then create a new package there: ros2 pkg create --build-type ament_python --license apache-2.0 python_parameter_event_handler --dependencies rclpy your terminal will return a message verifying the creation of your package python_parameter_event_handler and all its necessary files and folders. the --dependencies argument will automatically add the necessary dependency lines to package.xml and cmakelists.txt . 1.1 update package.xml ï because you used the --dependencies option during package creation, you donât have to manually add dependencies to package.xml . as always, though, make sure to add the description, maintainer  and name, and license information to package.xml . <description> python parameter events client tutorial </description> <maintainer = "you@.com" > your name </maintainer> <license> apache-2.0 </license> 2 write the python node ï inside the ros2_ws/src/python_parameter_event_handler/python_parameter_event_handler directory, create a new file called parameter_event_handler.py and paste the following code within: import rclpy import rclpy.node import rclpy.parameter from rclpy.parameter_event_handler import parametereventhandler class samplenodewithparameters ( rclpy . node . node ): def __init__ ( self ): super () . __init__ ( 'node_with_parameters' ) self . declare_parameter ( 'an_int_param' , 0 ) self . handler = parametereventhandler ( self ) self . callback_handle = self . handler . add_parameter_callback ( parameter_name = "an_int_param" , node_name = "node_with_parameters" , callback = self . callback , ) def callback ( self , p : rclpy . parameter . parameter ) -> none : self . get_logger () . info ( f "received an update to parameter: { p . name } : { rclpy . parameter . parameter_value_to_python ( p . value ) } " ) def main (): rclpy . init () node = samplenodewithparameters () rclpy . spin ( node ) rclpy . shutdown () 2.1 examine the code ï the import statements at the top are used to import the package dependencies. import rclpy import rclpy.node import rclpy.parameter from rclpy.parameter_event_handler import parametereventhandler the next piece of code creates the class samplenodewithparameters and the constructor. the constructor for the class declares an integer parameter an_int_param , with a default value of 0. next, the code creates a parametereventhandler that will be used to monitor changes to parameters. class samplenodewithparameters ( rclpy . node . node ): def __init__ ( self ): super () . __init__ ( 'node_with_parameters' ) self . declare_parameter ( 'an_int_param' , 0 ) self . handler = parametereventhandler ( self ) finally, we add parameter callback and get callback handler for the new callback. note it is very important to save the handle that is returned by add_parameter_callback ; otherwise, the callback will not be properly registered. self . callback_handle = self . handler . add_parameter_callback ( parameter_name = "an_int_param" , node_name = "node_with_parameters" , callback = self . callback , ) for the callback function, we use the callback method of the samplenodewithparameters class. def callback ( self , p : rclpy . parameter . parameter ) -> none : self . get_logger () . info ( f "received an update to parameter: { p . name } : { rclpy . parameter . parameter_value_to_python ( p . value ) } " ) following the samplenodewithparameters is a typical main function which initializes ros, spins the sample node so that it can send and receive messages, and then shuts down after the user enters ^c at the console. def main (): rclpy . init () node = samplenodewithparameters () rclpy . spin ( node ) rclpy . shutdown () 2.2 add an entry point ï open the setup.py file. again, match the maintainer , maintainer_ , description and license fields to your package.xml : maintainer = 'yourname' , maintainer_ = 'you@.com' , description = 'python parameter tutorial' , license = 'apache-2.0' , add the following line within the console_scripts brackets of the entry_points field: entry_points = { 'console_scripts' : [ 'node_with_parameters = python_parameter_event_handler.parameter_event_handler:main' , ], }, 3 build and run ï itâs good practice to run rosdep in the root of your workspace ( ros2_ws ) to check for missing dependencies before building: linux macos windows rosdep install -i --from-path src --rosdistro ros_distro -y rosdep only runs on linux, so you can skip ahead to next step. rosdep only runs on linux, so you can skip ahead to next step. navigate back to the root of your workspace, ros2_ws , and build your new package: colcon build --packages-select python_parameter_event_handler open a new terminal, navigate to ros2_ws , and source the setup files: linux macos windows . install/setup.bash . install/setup.bash call install\setup.bat now run the node: ros2 run python_parameter_event_handler node_with_parameters the node is now active and has a single parameter and will print a message whenever this parameter is updated. to test this, open up another terminal and source the ros setup file as before and execute the following command: ros2 param set node_with_parameters an_int_param 43 the terminal running the node will display a message similar to the following: [info] [1698483083.315084660] [node_with_parameters]: received an update to parameter: an_int_param: 43 the callback we set previously in the node has been invoked and has displayed the new updated value. you can now terminate the running parameter_event_handler sample using ^c in the terminal. 3.1 monitor changes to another nodeâs parameters ï you can also use the parametereventhandler to monitor parameter changes to another nodeâs parameters. letâs update the samplenodewithparameters class to monitor for changes to a parameter in another node. we will use the parameter_blackboard demo application to host a double parameter that we will monitor for updates. first update the constructor to add the following code after the existing code: def __init__ ( ... ): ... self . callback_handle = self . handler . add_parameter_callback ( parameter_name = "a_double_param" , node_name = "parameter_blackboard" , callback = self . callback , ) in a terminal, navigate back to the root of your workspace, ros2_ws , and build your updated package as before: colcon build --packages-select python_parameter_event_handler then source the setup files: linux macos windows . install/setup.bash . install/setup.bash call install\setup.bat now, to test monitoring of remote parameters, first run the newly-built parameter_event_handler code: ros2 run python_parameter_event_handler node_with_parameters next, from another teminal (with ros initialized), run the parameter_blackboard demo application, as follows: ros2 run demo_nodes_cpp parameter_blackboard finally, from a third terminal (with ros initialized), letâs set a parameter on the parameter_blackboard node: ros2 param set parameter_blackboard a_double_param 3.45 upon executing this command, you should see output in the parameter_event_handler window, indicating that the callback function was invoked upon the parameter update: [info] [1699821958.757770223] [node_with_parameters]: received an update to parameter: a_double_param: 3.45 summary ï you created a node with a parameter and used the parametereventhandler class to set a callback to monitor changes to that parameter. you also used the same class to monitor changes to a remote node. the parametereventhandler is a convenient way to monitor for parameter changes so that you can then respond to the updated values. related content ï to learn how to adapt ros 1 parameter files for ros 2, see the migrating yaml parameter files from ros 1 to ros2 tutorial. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling