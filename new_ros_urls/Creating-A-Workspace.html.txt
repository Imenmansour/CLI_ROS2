tutorials beginner: client libraries creating a workspace edit on github creating a workspace ï goal: create a workspace and learn how to set up an overlay for development and testing. tutorial level: beginner time: 20 minutes background ï a workspace is a directory containing ros 2 packages. before using ros 2, itâs necessary to source your ros 2 installation workspace in the terminal you plan to work in. this makes ros 2âs packages available for you to use in that terminal. you also have the option of sourcing an âoverlayâ - a secondary workspace where you can add new packages without interfering with the existing ros 2 workspace that youâre extending, or âunderlayâ. your underlay must contain the dependencies of all the packages in your overlay. packages in your overlay will override packages in the underlay. itâs also possible to have several layers of underlays and overlays, with each successive overlay using the packages of its parent underlays. prerequisites ï ros 2 installation colcon installation git installation turtlesim installation have rosdep installed understanding of basic terminal commands ( hereâs a guide for linux ) text editor of your choice tasks ï 1 source ros 2 environment ï your main ros 2 installation will be your underlay for this tutorial. (keep in mind that an underlay does not necessarily have to be the main ros 2 installation.) depending on how you installed ros 2 (from source or binaries), and which platform youâre on, your exact source command will vary: linux macos windows source /opt/ros/jazzy/setup.bash . ~/ros2_install/ros2-osx/setup.bash remember to use a x64 native tools command prompt for vs 2019 for executing the following commands, as we are going to build a workspace. call c:\dev\ros2\local_setup.bat consult the installation guide you followed if these commands donât work for you. 2 create a new directory ï best practice is to create a new directory for every new workspace. the name doesnât matter, but it is helpful to have it indicate the purpose of the workspace. letâs choose the directory name ros2_ws , for âdevelopment workspaceâ: linux macos windows mkdir -p ~/ros2_ws/src cd ~/ros2_ws/src mkdir -p ~/ros2_ws/src cd ~/ros2_ws/src md \ros2_ws\src cd \ros2_ws\src another best practice is to put any packages in your workspace into the src directory. the above code creates a src directory inside ros2_ws and then navigates into it. 3 clone a sample repo ï ensure youâre still in the ros2_ws/src directory before you clone. in the rest of the beginner developer tutorials, you will create your own packages, but for now you will practice putting a workspace together using existing packages. if you went through the beginner: cli tools tutorials, youâll be familiar with turtlesim , one of the packages in ros_tutorials . a repo can have multiple branches. you need to check out the one that targets your installed ros 2 distro. when you clone this repo, add the -b argument followed by that branch. in the ros2_ws/src directory, run the following command: git clone https://github.com/ros/ros_tutorials.git -b jazzy now ros_tutorials is cloned in your workspace. the ros_tutorials repository contains the turtlesim package, which weâll use in the rest of this tutorial. the other packages in this repository are not built because they contain a colcon_ignore file. so far you have populated your workspace with a sample package, but it isnât a fully-functional workspace yet. you need to resolve the dependencies first and then build the workspace. 4 resolve dependencies ï before building the workspace, you need to resolve the package dependencies. you may have all the dependencies already, but best practice is to check for dependencies every time you clone. you wouldnât want a build to fail after a long wait only to realize that you have missing dependencies. from the root of your workspace ( ros2_ws ), run the following command: linux macos windows # cd if you're still in the ``src`` directory with the ``ros_tutorials`` clone cd .. rosdep install -i --from-path src --rosdistro jazzy -y rosdep only runs on linux, so you can skip ahead to section â5 build the workspace with colconâ. rosdep only runs on linux, so you can skip ahead to section â5 build the workspace with colconâ. if you installed ros 2 on linux from source or the binary archive, you will need to use the rosdep command from their installation instructions. here are the from-source rosdep section and the binary archive rosdep section . if you already have all your dependencies, the console will return: # all required rosdeps installed successfully packages declare their dependencies in the package.xml file (you will learn more  packages in the next tutorial). this command walks through those declarations and installs the ones that are missing. you can learn more  rosdep in another tutorial (coming soon). 5 build the workspace with colcon ï from the root of your workspace ( ros2_ws ), you can now build your packages using the command: linux macos windows colcon build colcon build colcon build --merge-install windows doesnât allow long paths, so merge-install will combine all the paths into the install directory. the console will return the following message: starting >>> turtlesim finished <<< turtlesim [5.49s] summary: 1 package finished [5.58s] note other useful arguments for colcon build : --packages-up-to builds the package you want, plus all its dependencies, but not the whole workspace (saves time) --symlink-install saves you from having to rebuild every time you tweak python scripts --event-handlers console_direct+ shows console output while building (can otherwise be found in the log directory) --executor sequential processes the packages one by one instead of using parallelism once the build is finished, enter the command in the workspace root ( ~/ros2_ws ): linux macos windows ls ls dir and you will see that colcon has created new directories: build install log src the install directory is where your workspaceâs setup files are, which you can use to source your overlay. 6 source the overlay ï before sourcing the overlay, it is very important that you open a new terminal, separate from the one where you built the workspace. sourcing an overlay in the same terminal where you built, or likewise building where an overlay is sourced, may create complex issues. in the new terminal, source your main ros 2 environment as the âunderlayâ, so you can build the overlay âon top ofâ it: linux macos windows source /opt/ros/jazzy/setup.bash . ~/ros2_install/ros2-osx/setup.bash in this case you can use a normal command prompt, as we are not going to build any workspace in this terminal. call c:\dev\ros2\local_setup.bat go into the root of your workspace: linux macos windows cd ~/ros2_ws cd ~/ros2_ws cd \ros2_ws in the root, source your overlay: linux macos windows source install/local_setup.bash . install/local_setup.bash call install\setup.bat note sourcing the local_setup of the overlay will only add the packages available in the overlay to your environment. setup sources the overlay as well as the underlay it was created in, allowing you to utilize both workspaces. so, sourcing your main ros 2 installationâs setup and then the ros2_ws overlayâs local_setup , like you just did, is the same as just sourcing ros2_ws âs setup , because that includes the environment of its underlay. now you can run the turtlesim package from the overlay: ros2 run turtlesim turtlesim_node but how can you tell that this is the overlay turtlesim running, and not your main installationâs turtlesim? letâs modify turtlesim in the overlay so you can see the effects: you can modify and rebuild packages in the overlay separately from the underlay. the overlay takes precedence over the underlay. 7 modify the overlay ï you can modify turtlesim in your overlay by editing the title bar on the turtlesim window. to do this, locate the turtle_frame.cpp file in ~/ros2_ws/src/ros_tutorials/turtlesim/src . open turtle_frame.cpp with your preferred text editor. find the function setwindowtitle("turtlesim"); , change the value "turtlesim" to "myturtlesim" , and save the file. return to the first terminal where you ran colcon build earlier and run it again. return to the second terminal (where the overlay is sourced) and run turtlesim again: ros2 run turtlesim turtlesim_node you will see the title bar on the turtlesim window now says âmyturtlesimâ. even though your main ros 2 environment was sourced in this terminal earlier, the overlay of your ros2_ws environment takes precedence over the contents of the underlay. to see that your underlay is still intact, open a brand new terminal and source only your ros 2 installation. run turtlesim again: ros2 run turtlesim turtlesim_node you can see that modifications in the overlay did not actually affect anything in the underlay. summary ï in this tutorial, you sourced your main ros 2 distro install as your underlay, and created an overlay by cloning and building packages in a new workspace. the overlay gets prepended to the path, and takes precedence over the underlay, as you saw with your modified turtlesim. using overlays is recommended for working on a small number of packages, so you donât have to put everything in the same workspace and rebuild a huge workspace on every iteration. next steps ï now that you understand the details behind creating, building and sourcing your own workspace, you can learn how to create your own packages . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling