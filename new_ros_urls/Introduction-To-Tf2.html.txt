tutorials intermediate tf2 introducing tf2 edit on github introducing tf2 ï goal: run a turtlesim demo and see some of the power of tf2 in a multi-robot example using turtlesim. tutorial level: intermediate time: 10 minutes installing the demo ï letâs start by installing the demo package and its dependencies. ubuntu packages rhel packages from source sudo apt-get install ros-jazzy-rviz2 ros-jazzy-turtle-tf2-py ros-jazzy-tf2-ros ros-jazzy-tf2-tools ros-jazzy-turtlesim sudo dnf install ros-jazzy-rviz2 ros-jazzy-turtle-tf2-py ros-jazzy-tf2-ros ros-jazzy-tf2-tools ros-jazzy-turtlesim git clone https://github.com/ros/geometry_tutorials.git -b ros2 running the demo ï now that weâve installed the turtle_tf2_py tutorial package letâs run the demo. first, open a new terminal and source your ros 2 installation so that ros2 commands will work. then run the following command: ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py you will see the turtlesim start with two turtles. in the second terminal window type the following command: ros2 run turtlesim turtle_teleop_key once the turtlesim is started you can drive the central turtle around in the turtlesim using the keyboard arrow keys, select the second terminal windowâ so that your keystrokes will be captured to drive the turtle. you can see that one turtle continuously moves to follow the turtle you are driving around. what is happening? ï this demo is using the tf2 library to create three coordinate frames: a world frame, a turtle1 frame, and a turtle2 frame. this tutorial uses a tf2 broadcaster to publish the turtle coordinate frames and a tf2 listener to compute the difference in the turtle frames and move one turtle to follow the other. tf2 tools ï now letâs look at how tf2 is being used to create this demo. we can use tf2_tools to look at what tf2 is doing behind the scenes. 1 using view_frames ï view_frames creates a diagram of the frames being broadcast by tf2 over ros. note that this utility only works on linux; if you are windows, skip to âusing tf2_echoâ below. ros2 run tf2_tools view_frames you will see: listening to tf data during 5 seconds... generating graph in frames.pdf file... here a tf2 listener is listening to the frames that are being broadcast over ros and drawing a tree of how the frames are connected. to view the tree, open the resulting frames.pdf with your favorite pdf viewer. here we can see three frames that are broadcast by tf2: world , turtle1 , and turtle2 . the world frame is the parent of the turtle1 and turtle2 frames. view_frames also reports some diagnostic information  when the oldest and most recent frame transforms were received and how fast the tf2 frame is published to tf2 for debugging purposes. 2 using tf2_echo ï tf2_echo reports the transform between any two frames broadcast over ros. usage: ros2 run tf2_ros tf2_echo [source_frame] [target_frame] letâs look at the transform of the turtle2 frame with respect to turtle1 frame which is equivalent to: ros2 run tf2_ros tf2_echo turtle2 turtle1 you will see the transform displayed as the tf2_echo listener receives the frames broadcast over ros 2. at time 1683385337.850619099 - translation: [2.157, 0.901, 0.000] - rotation: in quaternion [0.000, 0.000, 0.172, 0.985] - rotation: in rpy (radian) [0.000, -0.000, 0.345] - rotation: in rpy (degree) [0.000, -0.000, 19.760] - matrix: 0.941 -0.338 0.000 2.157 0.338 0.941 0.000 0.901 0.000 0.000 1.000 0.000 0.000 0.000 0.000 1.000 at time 1683385338.841997774 - translation: [1.256, 0.216, 0.000] - rotation: in quaternion [0.000, 0.000, -0.016, 1.000] - rotation: in rpy (radian) [0.000, 0.000, -0.032] - rotation: in rpy (degree) [0.000, 0.000, -1.839] - matrix: 0.999 0.032 0.000 1.256 -0.032 0.999 -0.000 0.216 -0.000 0.000 1.000 0.000 0.000 0.000 0.000 1.000 as you drive your turtle around you will see the transform change as the two turtles move relative to each other. rviz2 and tf2 ï rviz2 is a visualization tool that is useful for examining tf2 frames. letâs look at our turtle frames using rviz2 by starting it with a configuration file using the -d option: linux windows ros2 run rviz2 rviz2 -d (ros2 pkg prefix --share turtle_tf2_py)/rviz/turtle_rviz.rviz for /f "usebackq tokens=*" %a in (`ros2 pkg prefix --share turtle_tf2_py`) do rviz2 -d %a/rviz/turtle_rviz.rviz in the side bar you will see the frames broadcast by tf2. as you drive the turtle around you will see the frames move in rviz. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling