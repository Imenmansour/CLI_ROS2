how-to guides installation troubleshooting edit on github installation troubleshooting ï troubleshooting techniques for installation are sorted by the platforms they apply to. general ï general troubleshooting techniques apply to all platforms. enable multicast ï in order to communicate successfully via dds, the used network interface has to be multicast enabled. weâve seen in past experiences that this might not necessarily be enabled by default (on ubuntu or osx) when using the loopback adapter. see the original issue or a conversation on ros-answers . you can verify that your current setup allows multicast with the ros 2 tool: in terminal 1: ros2 multicast receive in terminal 2: ros2 multicast send if the first command did not return a response similar to: received from xx.xxx.xxx.xx:43751: 'hello world!' then you will need to update your firewall configuration to allow multicast using ufw . sudo ufw allow in proto udp to 224 .0.0.0/4 sudo ufw allow in proto udp from 224 .0.0.0/4 you can check if the multicast flag is enabled for your network interface using the ifconfig tool and looking for mulitcast in the flags section: eno1: flags = 4163 <...,multicast> ... import failing without library present on the system ï sometimes rclpy fails to be imported because the expected c extension libraries are not found. if so, compare the libraries present in the directory with the one mentioned in the error message. assuming a file with a similar name exists (same prefix like _rclpy. and same suffix like .so but a different python version / architecture) you are using a different python interpreter than which was used to build the c extension. be sure to use the same python interpreter as the one used to build the binary. for example, such a mismatch can crop up after an update of the os. then, rebuilding the workspace may fix the issue. linux ï internal compiler error ï if you experience an ice when trying to compile on a memory constrained platform like a raspberry pi you might want to build single threaded (prefix the build invocation with makeflags=-j1 ). out of memory ï the ros1_bridge in its current form requires 4gb of free ram to compile. if you donât have that amount of ram available itâs suggested to use colcon_ignore in that folder and skip its compilation. multiple host interference ï if youâre running multiple instances on the same network you may get interference. to avoid this you can set the environment variable ros_domain_id to a different integer, the default is zero. this will define the dds domain id for your system. exception sourcing setup.bash ï if you encounter exceptions when trying to source the environment after building from source, try to upgrade colcon related packages using colcon version-check # check if newer versions available sudo apt install python3-colcon* --only-upgrade # upgrade installed colcon packages to latest version anaconda python conflict ï conda does not work in conjunction with ros 2. make sure that your path environment variable does not have any conda paths in it. you may have to check your .bashrc for this line and comment it out. cannot start rviz2 ï rviz2 may fail to start on a wayland display system with errors like: qsocketnotifier : can only be used with threads started with qthread [ info ] [ 1714730141.758659580 ] [ rviz2 ]: stereo is not supported [ info ] [ 1714730141.758813709 ] [ rviz2 ]: opengl version : 3.1 ( glsl 1.4 ) [ error ] [ 1714730141.797879232 ] [ rviz2 ]: rviz :: rendersystem : error creating render window : renderingapiexception : invalid parentwindowhandle ( wrong server or screen ) in glxwindow :: create at ./. obj - aarch64 - linux - gnu / ogre_vendor - prefix / src / ogre_vendor / rendersystems / glsupport / src / glx / ogreglxwindow . cpp ( line 246 ) ... [ error ] [ 1714730141.808124283 ] [ rviz2 ]: unable to create the rendering window after 100 tries terminate called after throwing an instance of 'std::runtime_error' what (): unable to create the rendering window after 100 tries aborted ( core dumped ) this is due to an incompatibility between wayland and rviz2. you may be able to workaround this problem by running rviz2 in x11 compatibility mode: qt_qpa_platform = xcb rviz2 macos ï segmentation fault when using pyenv ï pyenv seems to default to building python with .a files, but that causes issues with rclpy , so itâs recommended to build python with frameworks enabled on macos when using pyenv : https://github.com/pyenv/pyenv/wiki#how-to-build-cpython-with-framework-support-on-os-x library not loaded; image not found ï if you are seeing library loading issues at runtime (either running tests or running nodes), such as the following: importerror: dlopen ( .../ros2_<distro>/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so, 2 ) : library not loaded: @rpath/librcl_interfaces__rosidl_typesupport_c.dylib referenced from: .../ros2_<distro>/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so reason: image not found then you probably have system integrity protection enabled. follow these instructions to disable system integrity protection (sip). qt build error: unknown type name 'q_enum' ï if you see build errors related to qt, e.g.: in file included from /usr/local/opt/qt/lib/qtgui.framework/headers/qguiapplication.h:46: /usr/local/opt/qt/lib/qtgui.framework/headers/qinputmethod.h:87:5: error: unknown type name 'q_enum' q_enum ( action ) ^ you may be using qt4 instead of qt5: see https://github.com/ros2/ros2/issues/441 missing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with homebrew ï if you have opencv installed you might get this: dyld: symbol not found: __cg_jpeg_resync_to_restart referenced from: /system/library/frameworks/imageio.framework/versions/a/imageio expected in : /usr/local/lib/libjpeg.dylib in /system/library/frameworks/imageio.framework/versions/a/imageio /bin/sh: line 1 : 25274 trace/bpt trap: 5 /usr/local/bin/cmake if so, to build youâll have to do this:  brew unlink libpng libtiff libjpeg but this will break opencv, so youâll also need to update it to continue working:  sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/lib/libopencv_highgui.2.4.dylib  sudo install_name_tool -change /usr/local/lib/libpng16.16.dylib /usr/local/opt/libpng/lib/libpng16.16.dylib /usr/local/lib/libopencv_highgui.2.4.dylib  sudo install_name_tool -change /usr/local/lib/libtiff.5.dylib /usr/local/opt/libtiff/lib/libtiff.5.dylib /usr/local/lib/libopencv_highgui.2.4.dylib  sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/cellar/libtiff/4.0.4/lib/libtiff.5.dylib the first command is necessary to avoid things built against the system libjpeg (etc.) from getting the version in /usr/local/lib. the others are updating things built by homebrew so that they can find the version of libjpeg (etc.) without having them in /usr/local/lib. xcode-select error: tool xcodebuild requires xcode, but active developer directory is a command line instance ï if you recently installed xcode, you may encounter this error: xcode: xcode-select: error: tool 'xcodebuild' requires xcode, but active developer directory '/library/developer/commandlinetools' is a command line tools instance to resolve this error, you will need to: double check that you have the command line tool installed:  xcode-select --install accept the  and conditions of xcode by typing in terminal:  sudo xcodebuild -license accept ensure xcode app is in the /applications directory (not /users/{user}/applications ) point xcode-select to the xcode app developer directory using the following command:  sudo xcode-select -s /applications/xcode.app/contents/developer qt_gui_cpp error: sip binding generator not available ï when building qt_gui_cpp there may be errors look like the following: --- stderr: qt_gui_cpp cmake error at src/cmakelists.txt:10 ( message ) : no python binding generator found. --- failed <<< qt_gui_cpp [ exited with code 1 ] to fix this issue, follow these steps to install dependencies for rqt. rosdep install error homebrew: failed to detect successful installation of [qt5] ï while following the creating a workspace tutorial, you might encounter the following error stating that rosdep failes to install qt5.  rosdep install -i --from-path src --rosdistro jazzy -y executing command [ brew install qt5 ] warning: qt 5 .15.0 is already installed and up-to-date to reinstall 5 .15.0, run ` brew reinstall qt ` error: the following rosdeps failed to install homebrew: failed to detect successful installation of [ qt5 ] this error seems to stem from a linking issue and can be resolved by running the following command.  cd /usr/local/cellar  â sudo ln -s qt qt5 running the rosdep command should now execute normally:  rosdep install -i --from-path src --rosdistro jazzy -y #all required rosdeps installed successfully windows ï import failing even with library present on the system ï sometimes rclpy fails to be imported because of some missing dlls on your system. if so, make sure to install all the dependencies listed in the âinstalling prerequisitesâ sections of the installation instructions ). if you are installing from binaries, you may need to update your dependencies: they must be the same version as those used to build the binaries. if you are still having issues, you can use the dependencies tool to determine which dependencies are missing on your system. use the tool to load the corresponding .pyd file, and it should report unavailable dll modules. be sure that the current workspace is sourced before you execute the tool, otherwise there will be unresolved ros dll files. use this information to install additional dependencies or adjust your path as necessary. cmake error setting modification time ï if you run into the cmake error file install cannot set modification time on ... when installing files it is likely that an anti virus software or windows defender are interfering with the build. e.g. for windows defender you can list the workspace location to be excluded to prevent it from scanning those files. 260 character path limit ï the input line is too long. the syntax of the command is incorrect. depending on your directory hierarchy, you may see path length limit errors when building ros 2 from source or your own libraries. to allow deeper path lengths: run regedit.exe , navigate to computer\hkey_local_machine\system\currentcontrolset\control\filesystem , and set longpathsenabled to 0x00000001 (1). hit the windows key and type edit group policy . navigate to local computer policy > computer configuration > administrative templates > system > filesystem. right click enable win32 long paths , click edit. in the dialog, select enabled and click ok. close and open your terminal to reset the environment and try building again. cmake packages unable to find asio, tinyxml2, tinyxml, or eigen ï weâve seen that sometimes the chocolatey packages for asio , tinyxml2 , etc. do not add important registry entries and cmake will be unable to find them when building ros 2. weâve not yet been able to identify the root cause, but uninstalling the chocolatey packages (with -n if the uninstall fails the first time), and then reinstalling them will fix the issue. patch.exe opens a new command window and asks for administrator ï this will also cause the build of packages which need to use patch to fail, even you allow it to use administrator rights. choco uninstall patch; colcon build --cmake-clean-cache - this is a bug in the gnu patch for windows package . if this package is not installed, the build process will instead use the version of patch distributed with git. failed to load fast rtps shared library ï fast rtps requires msvcr20.dll , which is part of the visual c++ redistributable packages for visual studio 2013 . although it is usually installed by default in windows 10, we know that some windows 10-like versions donât have it installed by default (e.g.: windows server 2019). in case you donât have it installed, you can download it from here . failed to create process ï if running a ros binary gives the error: | failed to create process . it is likely the python interpreter was not found. for each executable, the shebang (first line) of the accompanying script is used, so make sure python is available under the expected path (default: c:\python38\ ). binary installation specific ï if your example does not start because of missing dlls,  verify that all libraries from external dependencies such as opencv are located inside your path variable. if you forget to call the local_setup.bat file from your terminal, the demo programs will most likely crash immediately. running rviz with wsl2 ï if you are using wsl2 to run ros 2 on windows, you may run into an issue running rviz that looks like:  rviz2 [info] [1695823660.091830699] [rviz2]: stereo is not supported [info] [1695823660.091943524] [rviz2]: opengl version: 4.1 (glsl 4.1) d3d12: removing device. segmentation fault one possible solution to this is to force rviz to use software rendering:  export libgl_always_software = true  rviz2 [info] [1695823660.091830699] [rviz2]: stereo is not supported other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling