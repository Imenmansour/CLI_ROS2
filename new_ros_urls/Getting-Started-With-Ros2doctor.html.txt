tutorials beginner: client libraries using ros2doctor to identify issues edit on github using ros2doctor to identify issues ï goal: identify issues in your ros 2 setup using the ros2doctor tool. tutorial level: beginner time: 10 minutes background ï when your ros 2 setup is not running as expected, you can check its settings with the ros2doctor tool. ros2doctor checks all aspects of ros 2, including platform, version, network, environment, running systems and more, and warns you  possible errors and reasons for issues. prerequisites ï ros2doctor is part of the ros2cli package. as long as you have ros2cli installed (which any normal install should have), you will be able to use ros2doctor . this tutorial uses turtlesim to illustrate some of the examples. tasks ï 1 check your setup ï letâs examine your general ros 2 setup as a whole with ros2doctor . first, source ros 2 in a new terminal, then enter the command: ros2 doctor this will conduct checks over all your setup modules and return warnings and errors. if your ros 2 setup is in perfect shape, youâll see a message similar to this: all <n> checks passed however, itâs not unusual to have a few warnings returned. a userwarning doesnât mean your setup is unusable; itâs more likely just an indication that something is configured in a way thatâs not ideal. if you do receive a warning, it will look something like this: <path>: <line>: userwarning: <message> for example, ros2doctor will find this warning if youâre using an unstable ros 2 distribution: userwarning: distribution <distro> is not fully supported or tested. to get more consistent features, download a stable version at https://index.ros.org/doc/ros2/installation/ if ros2doctor only finds warnings in your system, you will still receive the all <n> checks passed message. most checks are categorized as warnings as opposed to errors. itâs mostly up to you, the user, to determine the importance of the feedback ros2doctor returns. if it does find a rare error in your setup, indicated by userwarning: error: , the check is considered failed. you will see a message similar to the following list of issue feedback: 1/3 checks failed failed modules: network an error indicates the system is missing important settings or functions that are crucial to ros 2. errors should be addressed to ensure the system functions properly. 2 check a system ï you can also examine a running ros 2 system to identify possible causes for issues. to see ros2doctor working on a running system, letâs run turtlesim, which has nodes actively communicating with each other. start up the system by opening a new terminal, sourcing ros 2, and entering the command: ros2 run turtlesim turtlesim_node open another terminal and source ros 2 to run the teleop controls: ros2 run turtlesim turtle_teleop_key now run ros2doctor again in its own terminal. you will see the warnings and errors you had the last time you ran ros2doctor on your setup if you had any. following those will be a couple new warnings relating to the system itself: userwarning: publisher without subscriber detected on /turtle1/color_sensor. userwarning: publisher without subscriber detected on /turtle1/pose. it seems that the /turtlesim node publishes data to two topics that arenât being subscribed to, and ros2doctor thinks this could possibly lead to issues. if you run commands to echo the /color_sensor and /pose topics, those warnings will disappear because the publishers will have subscribers. you can try this by opening two new terminals while turtlesim is still running, sourcing ros 2 in each, and running each of the following commands in their own terminal: ros2 topic echo /turtle1/color_sensor ros2 topic echo /turtle1/pose then run ros2doctor in its terminal again. the publisher without subscriber warnings will be gone. (make sure to enter ctrl+c in the terminals where you ran echo ). now try exiting either the turtlesim window or quitting the teleop and running ros2doctor again. youâll see more warnings indicating publisher without subscriber or subscriber without publisher for different topics, now that one node in the system isnât available. in a complex system with many nodes, ros2doctor would be invaluable for identifying possible reasons for communication issues. 3 get a full report ï while ros2doctor will let you know warnings  your network, system, etc., running it with the --report argument will give you much more detail to help you analyze issues. you might want to use --report if you get a warning  your network setup and want to find out exactly what part of your configuration is causing the warning. itâs also very helpful when you need to open a support ticket to get help with ros 2. you can copy and paste the relevant parts of your report into the ticket so the people helping you can better understand your environment and provide better assistance. to get a full report, enter the following command in the terminal: ros2 doctor --report which will return a list of information categorized into five groups: network configuration ... platform information ... rmw middleware ... ros 2 information ... topic list ... you can crosscheck the information here against the warnings you get when running ros2 doctor . for example, if ros2doctor returned the warning (mentioned earlier) that your distribution is ânot fully supported or testedâ, you might take a look at the ros 2 information section of the report: distribution name : <distro> distribution type : ros2 distribution status : prerelease release platforms : {'<platform>': ['<version>']} here you can see the distribution status is prerelease , which explains why itâs not fully supported. summary ï ros2doctor will inform you of problems in your ros 2 setup and running systems. you can get a deeper look at information behind those warnings by using the --report argument. keep in mind, ros2doctor is not a debug tool; it wonât help with errors in your code or on the implementation side of your system. related content ï ros2doctorâs readme will tell you more  different arguments. you might want to take a look around the ros2doctor repo as well, since itâs fairly beginner friendly and a great place to get started with contributing. next steps ï youâve completed the beginner level tutorials! other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling