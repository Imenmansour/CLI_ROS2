distributions iron irwini ( iron ) edit on github iron irwini ( iron ) ï iron irwini is the ninth release of ros 2. what follows is highlights of the important changes and features in iron irwini since the last release. for a list of all of the changes since humble, see the long form changelog . supported platforms ï iron irwini is primarily supported on the following platforms: tier 1 platforms: ubuntu 22.04 (jammy): amd64 and arm64 windows 10 (visual studio 2019): amd64 tier 2 platforms: rhel 9: amd64 tier 3 platforms: macos: amd64 debian bullseye: amd64 for more information  rmw implementations, compiler / interpreter versions, and system dependency versions see rep 2000 . installation ï install iron irwini new features in this ros 2 release ï api documentation generation for python packages ï ros 2 has had automatic api documentation for c++ packages for several releases, e.g. https://docs.ros.org/en/rolling/p/rclcpp/generated/index.html . iron adds automatic api documentation for python packages as well, e.g. https://docs.ros.org/en/rolling/p/rclpy/rclpy.html . see https://github.com/ros-infrastructure/rosdoc2/pull/28 , https://github.com/ros-infrastructure/rosdoc2/pull/49 , https://github.com/ros-infrastructure/rosdoc2/pull/51 , and https://github.com/ros-infrastructure/rosdoc2/pull/52 for more details. service introspection ï it is now possible to enable service introspection on a per-service basis. when enabled, this allows users to see the metadata associated with the client requesting a service, the server accepting the request, the server sending the response, and the client accepting the response. optionally, the contents of the client/server requests/responses can also be introspected. all of the information is published on a hidden topic generated from the name of the service. so if the service is called /myservice , then the information will be published on /myservice/_service_event . note that this functionality is disabled by default; to enable it, users must call configure_introspection after creating a server client or server. there are examples showing how to do this in https://github.com/ros2/demos/tree/iron/demo_nodes_cpp/src/services (c++) and https://github.com/ros2/demos/blob/iron/demo_nodes_py/demo_nodes_py/services/introspection.py (python). see rep 2012 and the tracking bug at https://github.com/ros2/ros2/issues/1285 for more information. pre and post set parameter callback support ï for many releases now, users could register a callback to be called when parameters on a node were changed by an external entity (like ros2 param set ). this callback could examine the changed parameter types and values, and reject the whole lot if one of them didnât meet certain criteria. however, it could not modify the parameter list, nor should it have modified state (since there might be other callbacks after the set one that would reject the parameters). this release adds in a pre and post callback. the callbacks are called in this order: the âpreâ set parameter callback, which can modify the list of parameters based on arbitrary criteria. the âsetâ parameter callback, which cannot modify the list and should only accept or reject the parameters based on their type and value (this is the existing callback). the âpostâ set parameter callback, which can make state changes based on parameters and is only called if the previous two callbacks are successful. there are examples of this in action in https://github.com/ros2/demos/blob/iron/demo_nodes_cpp/src/parameters/set_parameters_callback.cpp (c++) and https://github.com/ros2/demos/blob/iron/demo_nodes_py/demo_nodes_py/parameters/set_parameters_callback.py (python). see https://github.com/ros2/rclcpp/pull/1947 , https://github.com/ros2/rclpy/pull/966 , and https://github.com/ros2/demos/pull/565 for more information. improved discovery options ï previous ros 2 versions offered limited discovery options. the default behavior for dds based rmw implementations was to discover any node reachable via multicast. it could be limited to the same machine by setting the environment variable ros_localhost_only , but any additional configuration required configuring the middleware directly, usually via middleware specific xml files and environment variables. ros iron retains the same default discovery behavior, but deprecates ros_localhost_only in favor of more granular options. ros_automatic_discovery_range controls how far ros nodes will try to discover each other. valid options are: subnet - the default, and for dds-based middlewares it will discover any node reachable via multicast. localhost - will only try to discover other nodes on the same machine. off - will not attempt to discover any other nodes automatically, even on the same machine. system_default - will not change any discovery settings. this is useful when you already have custom settings for your middleware and donât want ros to change them. ros_static_peers - a semicolon ( ; ) separated list of addresses that ros should try to discover nodes on. this allows the user to connect to nodes on specifc machines (as long as their discovery range is not set to off ). for example, you might have several robots with ros_automatic_discovery_range set to localhost so they donât communicate with each other. when you want to connect rviz to one of them, you add itâs address to ros_static_peers in your terminal. now you can use ros 2 cli and visualization tools to interact with the robot. see https://github.com/ros2/ros2/issues/1359 for more information  this feature. matched events ï in addition to qos events, matched events can be generated when any publisher and  establishes or drops the connection between them. users can provide each publisher and  with callback functions that are triggered by matched events and handle them in a way they see fit, similar to how messages received on a topic are handled. publisher: this event happens when it finds a  which matches the topic and has compatible qos or a connected  is disconnected. : this event happens when it finds a publisher which matches the topic and has compatible qos or a connected publisher is disconnected. see the tracking issue at https://github.com/ros2/rmw/issues/330 for more information. c++ demo of matched events: https://github.com/ros2/demos/blob/iron/demo_nodes_cpp/src/events/matched_event_detect.cpp python demo of matched events: https://github.com/ros2/demos/blob/iron/demo_nodes_py/demo_nodes_py/events/matched_event_detect.py external configuration services of loggers ï it is now possible to configure node logger levels remotely via a service. when the enable_logger_service option is enabled during node creation, the set_logger_levels and get_logger_levels services will be available. be advised that the enable_logger_service option is disabled by default, so the user needs to enable this option on node creation. see https://github.com/ros2/ros2/issues/1355 for more information. type description distribution ï it is now possible to communicate information  the types of ros 2 messages, so that systems with potentially-different types of the same name may discover their compatibility more transparently. this umbrella of capabilities, which is defined by a subset of rep-2011: evolving message types, has had many parts land in iron. first, the introduction of the new package type_description_interfaces provides a common way to communicate the descriptions of ros 2 communication interface types (msg, srv, action). next, a method to hash type descriptions has been decided on, the ros interface hashing standard (rihs) - starting with the first version rihs01. rihs hashes are automatically calculated for all compiled ros types at build time, and baked into the generated code so that they can be inspected. these hashes are also communicated automatically during discovery, and included in rmw_topic_endpoint_info_t for graph introspection queries such as get_publishers_info_by_topic . the full typedescription data structure, as well as the raw source text (such as .msg file) that were used to generate it are now baked in by default to the message libraries, so they can be used by typesupport or end users. while we expect this data to provide value to most users, some users trying to minimize bytes in their install space can disable the feature when building ros 2 core by defining the cmake variable rosidl_generator_c_disable_type_description_codegen . finally, the new service type_description_interfaces/gettypedescription.srv has been defined to allow nodes, on encountering an unknown rihs type hash, to request the full definition from the node advertising that type. work is in progress to provide this feature natively in ros 2 nodes, as an optional switch on node construction. this feature has not yet shipped, but is expected to be backported into iron sometime mid-2023. meanwhile, user nodes could implement this service indepedently, using the stable service interface. see rep 2011 for the design proposal. see type description distribution for tracking development on the feature set. dynamic types and dynamic messages ï alongside the type description distribution feature mentioned above, is the ability to construct and access dynamically created types at runtime (i.e., dynamic types). this feature is available in iron for fast dds and rcl , with new rmw interfaces for supporting the taking of messages as dynamic messages (i.e., messages built from or following the structure of the dynamic type). first, utilities were introduced into rosidl to aid in the construction and manipulation of type descriptions. next, the rosidl_dynamic_typesupport package was written and provides a middleware-agnostic interface to construct dynamic types and dynamic messages at runtime. types can be constructed at runtime either programmatically, or by parsing a type_description_interfaces/typedescription message. note the rosidl_dynamic_typesupport library requires serialization support libraries to implement the middleware-specific dynamic type behavior. a serialization support library for fast dds was implemented in rosidl_dynamic_typesupport_fastrtps . ideally more middlewares will implement support libraries, expanding the number of middlewares that support this feature. finally, to support the use of dynamic types and dynamic messages, new methods were added to rmw and rcl that support: the ability to obtain of middleware-specific serialization support the ability to construct message type support at runtime that use dynamic types the ability to take dynamic messages using dynamic type work is in progress to enable the use of dynamic types to create s in the client libraries (see the rclcpp issue below), though it is uncertain when the feature will land or be backported. this will allow users to subscribe to topics whose type descriptions are only known at runtime. in the meantime, users may write their own s that subscribe to dynamic types by using the new rmw and rcl features introduced as part of this feature set. see rep 2011 for the design proposal. see dynamic  for tracking development on the feature set, with rclcpp needing the bulk of the work. launch ï pythonexpression now supports importing modules ï it is now possible to have a launch pythonexpression import modules before performing the evaluation. this can be useful for pulling in additional functionality to be used when evaluating an expression. see https://github.com/ros2/launch/pull/655 for more information. readytotest can be called from an event handler ï it is now possible to register an event handler that uses readytotest in its output. this can be useful for doing things like downloading an asset before allowing a test to run. see https://github.com/ros2/launch/pull/665 for more information. addition of anysubstitution and allsubstitution ï it is now possible to specify a substitution to happen when any of the input arguments are true ( anysubstitution ), or when all of the input arguments are true ( allsubstitution ). see https://github.com/ros2/launch/pull/649 for more details. addition of a new substitution to get the launch logging directory ï it is now possible to use a substitution called launchlogdir to get the current logging directory for launch. see https://github.com/ros2/launch/pull/652 for more details. launch_ros ï add a lifecycletransition action ï it is now possible to send a transition signal to a lifecycle node via the new lifecycletransition action. see https://github.com/ros2/launch_ros/pull/317 for more information. add a setroslogdir action ï it is now possible to configure the directory used for logging via the setroslogdir action. see https://github.com/ros2/launch_ros/pull/325 for more information. ability to specify a condition to a composablenode ï it is now possible to specify a condition that must be satisfied in order for a composablenode to be inserted into its container. see https://github.com/ros2/launch_ros/pull/311 for more information. launch_testing ï timeout for process startup is now configurable ï prior to this release, the readytotest action would wait exactly 15 seconds for processes to start up. if the processes took longer than that, they would fail. there is now a new decorator called ready_to_test_action_timeout that allows the user to configure the amount of time to wait for the processes to start. see https://github.com/ros2/launch/pull/625 for more information. rclcpp ï addition of a new paradigm for handling node and lifecyclenode ï the node and lifecyclenode classes are related in that they both provide the same base set of methods (though lifecyclenode provides additional methods as well). due to various implementation considerations, they are not derived from a common base class. this has led to some trouble for downstream code that wants to accept either a node or a lifecyclenode . one solution is to have two method signatures, one that accepts a node and one that accepts a lifecyclenode . the other, recommended solution is to have a method that accepts the ânode interfacesâ pointers that can be accessed from both classes, e.g. void do_thing ( rclcpp :: node_interfaces :: nodegraphinterface graph ) { fprintf ( stderr , "doing a thing \n " ); } void do_thing ( rclcpp :: node :: sharedptr node ) { do_thing ( node -> get_node_graph_interface ()); } void do_thing ( rclcpp :: lifecyclenode :: sharedptr node ) { do_thing ( node -> get_node_graph_interface ()); } this works, but can get a bit unwieldy when many node interfaces are needed. to make this a bit better, there is now a new nodeinterfaces class that can be constructed to contain the interfaces, and then be used by other code. there are examples on how to use this in https://github.com/ros2/rclcpp/pull/2041 . introduction of a new executor type: the events executor ï the eventsexecutor from irobot has been merged into the main rclcpp codebase. this alternative executor implementation uses event-driven callbacks from the middleware implementations to fire callbacks at the rclcpp layer. in addition to the push-based model, the eventsexecutor also moves timer management into a separate thread, which can allow for more accurate results and lower overhead, especially with many timers. the eventsexecutor has a substantial set of documentation and use-in-practice that make it a strong candidate for inclusion in the rclcpp codebase. for information  the initial implementation proposal as well as performance benchmarks, see https://discourse.ros.org/t/ros2-middleware-change-proposal/15863 . for more information  the design, see the design pr: https://github.com/ros2/design/pull/305 . since the api is the same, trying the eventsexecutor is as straightforward as replacing your current executor implementation (eg. singlethreadedexecutor ): #include <rclcpp/experimental/executors/events_executor/events_executor.hpp> using rclcpp :: experimental :: executors :: eventsexecutor ; eventsexecutor executor ; executor . add_node ( node ); executor . spin (); note the eventsexecutor and timersmanager are currently in the experimental namespace. while it has been used as a standalone implementation for some time https://github.com/irobot-ros/events-executor , it was decided to use the experimental namespace for at least one release to give latitude in changing the api within the release. use caution as it will not be subject to the same api/abi guarantees that the non-experimental code has. rclpy ï ability to wait for another node to join the graph ï it is now possible to wait for another node to join the network graph with code like the following: node . wait_for_node ( '/fully_qualified_node_name' ) see https://github.com/ros2/rclpy/pull/930 for more information. implementation of asyncparameterclient ï rclpy now has an asyncparameterclient class, bringing it to feature parity with rclcpp . this class is used to perform parameter actions on a remote node without blocking the calling node. see https://github.com/ros2/rclpy/pull/959 for more information and examples.  callbacks can now optionally get the message info ï it is now possible to register for a  callback with a function signature that takes both the message, and the message info, like: def msg_info_cb ( msg , msg_info ): print ( 'message info:' , msg_info ) node . create_ ( msg_type = std_msgs . msg . string , topic = '/chatter' , qos_profile = 10 , callback = msg_info_cb ) the message info structure contains various pieces of information like the sequence number of the message, the source and received timestamps, and the gid of the publisher. see https://github.com/ros2/rclpy/pull/922 for more information. optional argument that hides assertions for messages class ï all message classes now include a new optional argument that allows the hiding of assertions for each field type from the message. by default, assertions are hidden, which provides a performance improvement during runtime. in order to enable the assertions for development/debugging purposes, you are given two choices: define the environment variable ros_python_check_fields to '1' (this would affect all the messages in your project): import os from std_msgs.msg import string os . environ [ 'ros_python_check_fields' ] = '1' new_message = string () select the specific behavior for a single message by explicitly defining the new argument in the constructor: from std_msgs.msg import string new_message = string ( check_fields = true ) see https://github.com/ros2/rosidl_python/pull/194 for more information. ros2param ï option to timeout when waiting for a node with ros2 param ï it is now possible to have the various ros2 param commands timeout by passing --timeout to the command. see https://github.com/ros2/ros2cli/pull/802 for more information. deprecated options were removed ï --output-dir and --print options with dump command have been removed. see https://github.com/ros2/ros2cli/pull/824 for more information. ros2topic ï now as keyword for builtin_interfaces.msg.time and auto for std_msgs.msg.header ï ros2 topic pub now allows to set a builtin_interfaces.msg.time message to the current time via the now keyword. similarly, a std_msg.msg.header message will be automatically generated when passed the keyword auto . this behavior matches that of ros 1âs rostopic ( http://wiki.ros.org/ros/yamlcommandline#headers.2ftimestamps ) related pr: ros2/ros2cli#749 ros2 topic pub can be configured to wait a maximum amount of time ï the command ros2 topic pub -w 1 will wait for at least that number of subscribers before publishing a message. this release adds in a --max-wait-time option so that the command will only wait a maximum amount of time before quitting if no subscribers are seen. see https://github.com/ros2/ros2cli/pull/800 for more information. ros2 topic echo can be configured to wait a maximum amount of time ï the command ros2 topic echo now accepts a --timeout option, which controls the maximum amount of time that the command will wait for a publication to happen. see https://github.com/ros2/ros2cli/pull/792 for more information. deprecated option was removed ï --lost-messages option with echo command has been removed. see https://github.com/ros2/ros2cli/pull/824 for more information. changes since the humble release ï change to the default console logging file flushing behavior ï this specifically applies to the default spdlog based logging backend in ros 2, implemented in rcl_logging_spdlog . log file flushing was changed to flush every time an âerrorâ log message is used, e.g. each rclcpp_error() call, and also periodically every five seconds. previously, spdlog was used without configuring anything other than creating the sink for logging to a file. we tested the change and did not find that the cpu overhead was significant, even on machines with slow disks (e.g. sd cards). however, if this change is causing you problems, you can get the old behavior by setting the rcl_logging_spdlog_experimental_old_flushing_behavior=1 environment variable. later we would like to have support for a full configuration file (see: https://github.com/ros2/rcl_logging/issues/92 ), giving you more flexibility in how the logging is done, but that is work that is only planned right now. therefore, this environment variable should be considered experimental and subject to removal without deprecation in the future , when we add config file support for the rcl_logging_spdlog logging backend. see this pull request for more details  the change: https://github.com/ros2/rcl_logging/pull/95 ament_cmake_auto ï include dependencies are now marked as system ï when using ament_auto_add_executable or ament_auto_add_library , dependencies are now automatically added as system . this means that warnings in the header files of the dependencies will not be reported. see https://github.com/ament/ament_cmake/pull/385 for more details. ament_cmake_nose ï package has been deprecated and removed ï the python nose package has long been deprecated. since none of the open-source packages currently released into humble or rolling currently depend on it, this release deprecates and removes the ament wrapper around it. see https://github.com/ament/ament_cmake/pull/415 for more information. ament_lint ï files can be excluded from linter checks ï certain files can now be excluded from linter checks by setting the ament_lint_auto_file_exclude cmake variable before calling ament_lint_auto_find_test_dependencies . see https://github.com/ament/ament_lint/pull/386 for more information. camera_info_manager ï lifecycle node support ï camera_info_manager now supports lifecycle nodes in additional to regular ros 2 nodes. see https://github.com/ros-perception/image_common/pull/190 for more information. launch ï launchconfigurationequals and launchconfigurationnotequals are deprecated ï the launchconfigurationequals and launchconfigurationnotequals conditions are deprecated, and will be removed in a future release. instead, the more universal equals and notequals substitutions should be used instead. see https://github.com/ros2/launch/pull/649 for more details. launch_ros ï renamed classes which used ros in the name to use ros in line with pep8 ï classes that were changed: launch_ros.actions.rostimer -> launch_ros.actions.rostimer launch_ros.actions.pushrosnamespace -> launch.actions.pushrosnamespace the old class names are still there, but will be deprecated. see https://github.com/ros2/launch_ros/pull/326 for more information. launch_xml ï expose emulate_tty to xml frontend ï it has been possible for several releases to have the launch python code use pseudo-terminals to emulate a tty (and hence do things like print colors). that functionality is now available in the xml frontend by passing the emulate_tty argument to an executable command. see https://github.com/ros2/launch/pull/669 for more information. expose sigterm_timeout and sigkill_timeout to xml frontend ï it has been possible for several releases to configure the maximum timeout value for the sigterm and sigkill signals in the launch python code. that functionality is now available in the xml frontend by passing the sigterm_timeout or sigkill_timeout argument to an executable command. see https://github.com/ros2/launch/pull/667 for more information. launch_yaml ï expose emulate_tty to yaml frontend ï it has been possible for several releases to have the launch python code use pseudo-terminals to emulate a tty (and hence do things like print colors). that functionality is now available in the yaml frontend by passing the emulate_tty argument to an executable command. see https://github.com/ros2/launch/pull/669 for more information. expose sigterm_timeout and sigkill_timeout to yaml frontend ï it has been possible for several releases to configure the maximum timeout value for the sigterm and sigkill signals in the launch python code. that functionality is now available in the yaml frontend by passing the sigterm_timeout or sigkill_timeout argument to an executable command. see https://github.com/ros2/launch/pull/667 for more information. message_filters ï new approximate time policy ï add in a simpler approximate time policy called approximateepsilontime . this time policy works like exacttime , but allows timestamps being within a epsilon tolerance. see https://github.com/ros2/message_filters/pull/84 for more information. new upsampling time policy ï adds in a new time policy called latesttime . it can synchronize up to 9 messages by their rates with upsampling via zero-order-hold. see https://github.com/ros2/message_filters/pull/73 for more information. rcl_yaml_param_parser ï support for yaml !!str syntax in parameter files ï it is now possible to force the ros parameter file parser to interpret a field as a string using the yaml !!str syntax. see https://github.com/ros2/rcl/pull/999 for more information. rclcpp ï default number of threads for multi-threaded executor has been changed ï if the user doesnât specify otherwise, the default number of threads for the multi-threaded executor will be set to the number of cpus on the machine. if the underlying os doesnât support getting this information, it will be set to 2. see https://github.com/ros2/rclcpp/pull/2032 for more information. a warning is now printed when qos of keep_last is specified with a depth of 0 ï specifying a qos of keep_last with a depth of 0 is a nonsensical arrangement, since the entity wouldnât be able to send or receive any data. rclcpp will now print a warning if this combination is specified, but will still continue on and let the underlying middleware choose a sane value (generally a depth of 1). see https://github.com/ros2/rclcpp/pull/2048 for more information. deprecated rclcpp_scope_exit macro was removed ï in humble, the macro rclcpp_scope_exit was deprecated in favor of rcpputils_scope_exit . in iron, the rclcpp_scope_exit macro has been completely removed. rclpy ï default number of threads for multi-threaded executor has been changed ï if the user doesnât specify otherwise, the default number of threads for the multi-threaded executor will be set to the number of cpus on the machine. if the underlying os doesnât support getting this information, it will be set to 2. see https://github.com/ros2/rclpy/pull/1031 for more information. a warning is now printed when qos of keep_last is specified with a depth of 0 ï specifying a qos of keep_last with a depth of 0 is a nonsensical arrangement, since the entity wouldnât be able to send or receive any data. rclpy will now print a warning if this combination is specified, but will still continue on and let the underlying middleware choose a sane value (generally a depth of 1). see https://github.com/ros2/rclpy/pull/1048 for more information. time and duration no longer raise exception when compared to another type ï it is now possible to compare rclpy.time.time and rclpy.duration.duration to other types without getting exceptions. if the types are not comparable, the comparison returns false . note that this is a behavior change from previous releases. print ( none in [ rclpy . time . time (), rclpy . duration . duration ()]) # prints "false" instead of raising typeerror see https://github.com/ros2/rclpy/pull/1007 for more information. rcutils ï improve the performance of message logging ï the code used to output a log message when rcutils_log_* or rclcpp_* was optimized to reduce overhead. these log messages should now be more efficient, though they should still not be called at high rates. see https://github.com/ros2/rcutils/pull/381 , https://github.com/ros2/rcutils/pull/372 , https://github.com/ros2/rcutils/pull/369 , and https://github.com/ros2/rcutils/pull/367 for more information. deprecated rcutils/get_env.h header was removed ï in humble, the header rcutils/get_env.h was deprecated in favor of rcutils/env.h . in iron, the rcutils/get_env.h header been completely removed. rmw ï change the gid storage to 16 bytes ï the gid in the rmw layer is meant to be a globally unique identifier for writers in the ros graph. previously, this was erroneously set to 24 bytes based on a bug in an old rmw implementation. but the rmw package should define this, and all of the implementations should conform to that. thus, this release defines it as 16 bytes (the dds standard), and changes all implementations to use that definition. see https://github.com/ros2/rmw/pull/345 and the (closed, but relevant) https://github.com/ros2/rmw/pull/328 for more information. rmw_dds_common ï change the gid storage to 16 bytes ï along with the change in the rmw layer, change the message that sends out gid information to 16 bytes. see https://github.com/ros2/rmw_dds_common/pull/68 for more information. ros2topic ï ros2 topic hz/bw/pub now respect use_sim_time ï when running under simulation, the ros 2 ecosystem generally gets its time from a /clock topic published by the simulator (rather than using the system clock). ros 2 nodes are typically informed of this change by setting the use_sim_time parameter on the node. the node created by the ros2 topic commands hz , bw , and pub now respect that parameter and will use simulation time as appropriate. see https://github.com/ros2/ros2cli/pull/754 for more information. rosbag2 ï change default bag file type to mcap ï prior to this release, by default rosbag2 would record data into sqlite3 databases. during testing, it was found that in many cases this was not performant enough and lacked certain features desirable for offline processing. to meet these needs, a new bag format (influenced by the original ros 1 bag file format) called mcap was developed. this bag file format has many of the missing features from the sqlite3 file format, and should also be more performant. this release switches to using mcap as the default file format for writing new bags. the old sqlite3 file format is still available and can be selected by the user for writing if desired. this release also allows playing back data from either the sqlite3 file format or the mcap file format. see https://github.com/ros2/rosbag2/pull/1160 for more information. store message definitions in bag files with sqlite3 plugin ï now we support saving message definitions to the sqlite3 database file in the same format as we are saving it to the mcap file. this opens an opportunity for third-party tools to have the ability to deserialize rosbag2 files without having the correct version of all the original .msg files on the machine that is decoding the bag file recorded with sqlite3 plugin. see https://github.com/ros2/rosbag2/issues/782 and https://github.com/ros2/rosbag2/pull/1293 for more information. new playback and recording controls ï several pull requests have been added to enhance the userâs control over playback of bags. pull request 960 adds the ability to play bag for a specified number of seconds. and pull request 1005 allows to play bag until specified timestamp. another pull request 1007 adds the ability to stop playback remotely via service call. stop will unpause player if it was in pause mode, stop playback and force exit from play() method if it was in progress. managing recording via service calls ï there are new options to control the recording process from remote nodes. the pull request 1131 adds the ability to pause and resume recording via service calls. another pull request 1115 adds the ability to split bags during recording by sending service call. filtering topics via regular expression during playback ï users sometimes need to replay only a subset of topics from recorded bags and the following two pull request adds such capability. pull request 1034 adds a new option --topics-regex that allows filtering topics via regular expressions. the --topics-regex option accepts multiple regular expressions separated by space. and pull request 1046 adds the ability to exclude some certain topics from being replayed by providing regular expression in a new --exclude (and -x ) option. allow plugins to register their own cli verb arguments ï pull request 1209 adds the ability for rosbag2 plugins to register an optional python entrypoint providing plugin-specific cli argument values. as a result the command line option --storage-preset-profile for ros2 bag record verb will have different valid options depending on the underlying storage plugin. other changes ï the pull request 1038 adds the ability to record any key/value pair in âcustomâ field in metadata.yaml file. it is useful when users need to save some hardware specific id or coordinates where the recording was captured. and pull request 1180 adds an option to change the underlying node name for the recorder via providing the new command line --node-name option. this option might be used for creating remote distributed recording with multiple rosbag2 recorder instances. it provides the ability to send service calls for managing the recording process to the dedicated rosbag2 recorder instances. rosidl_python ï modification of content of __slots__ attribute ï so far, the attribute __slots__ from the python message classes, have been used as the member that contains the field names of the message. in iron, this attribute no longer contains only the field names from the message structure, but the field names for all the class members. therefore, users shouldnât rely on this attribute to retrieve the field names information, instead, users should retrieve it using the method get_field_and_field_types() . see https://github.com/ros2/rosidl_python/pull/194 for more information. rviz ï map display can now be shown as binary ï the rviz map display can now display the map as binary, with a settable threshold. this is useful in some cases to inspect maps or in combination with planners that have a settable threshold. see https://github.com/ros2/rviz/pull/846 for more information. camera display plugin respects the roi in the camerainfo message ï the cameradisplay plugin now honors the region-of-interest (roi) settings in the camerainfo message, if it is provided. this accounts for the fact that an image was cropped by the camera driver to reduce the bandwidth. see https://github.com/ros2/rviz/pull/864 for more information. binary stl files from solidworks work without error ï a change was made to the stl loader such that it accepts binary stl files from solidworks that have the word âsolidâ in them. this technically violates the stl specification, but is common enough that a special case is added to handle these files. see https://github.com/ros2/rviz/pull/917 for more information. tracetools ï tracing instrumentation is now included by default on linux ï the ros 2 core has had tracing instrumentation for a while now. however, it was compiled out by default. to get the instrumentation, the lttng tracer had to be manually installed before rebuilding ros 2 from source. in iron, the tracing instrumentation and tracepoints are included by default; the lttng tracer is therefore now a ros 2 dependency. note that this only applies to linux. see https://github.com/ros2/ros2_tracing/pull/31 and https://github.com/ros2/ros2/issues/1177 for more information. see this how-to guide to remove the instrumentation (or add the instrumentation with humble and older) . new tracepoints for rclcpp intra-process are added ï new tracepoints have been added to support rclcpp intra-process communication. this allows the evaluation of the time between the message publishing and the callback start in intra-process communication. see https://github.com/ros2/ros2_tracing/pull/30 and https://github.com/ros2/rclcpp/pull/2091 for more information. known issues ï rmw_connextdds does not work with windows binary release packages. rti is not longer distributing rti connextdds 6.0.1 which was used by the packaging jobs to create the binaries for windows. instead they now distribute rti connextdds 6.1.0 which is abi incompatible with the generated binaries. the solution is to rely on source builds of ros 2 and rmw_connextdds on windows. sros2 on windows requires users to downgrade the cryptography python module to cryptography==38.0.4 as discussed here . ros1_bridge does not work with ros noetic packages from upstream ubuntu . the suggested workaround is to build ros noetic from sources, then build the ros1_bridge using that. release timeline ï november, 2022 - platform decisions rep 2000 is updated with the target platforms and major dependency versions. by january, 2023 - rolling platform shift build farm is updated with the new platform versions and dependency versions for iron irwini (if necessary). mon. april 10, 2023 - alpha + rmw freeze preliminary testing and stabilization of ros base [ 1 ] packages, and api and feature freeze for rmw provider packages. mon. april 17, 2023 - freeze api and feature freeze for ros base [ 1 ] packages in rolling ridley. only bug fix releases should be made after this point. new packages can be released independently. mon. april 24, 2023 - branch branch from rolling ridley. rosdistro is reopened for rolling prs for ros base [ 1 ] packages. iron development shifts from ros-rolling-* packages to ros-iron-* packages. mon. may 1, 2023 - beta updated releases of ros desktop [ 2 ] packages available. call for general testing. mon. may 15, 2023 - release candidate release candidate packages are built. updated releases of ros desktop [ 2 ] packages available. thu. may 18, 2023 - distro freeze freeze rosdistro. no prs for iron on the rosdistro repo will be merged (reopens after the release announcement). tue. may 23, 2023 - general availability release announcement. rosdistro is reopened for iron prs. development progress ï for progress on the development and release of iron irwini, see the tracking github issue . for the broad process followed by iron irwini, see the process description page . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling