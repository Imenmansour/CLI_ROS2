tutorials intermediate tf2 traveling in time (c++) edit on github traveling in time (c++) ï goal: learn  advanced time travel features of tf2. tutorial level: intermediate time: 10 minutes background ï in the previous tutorial, we discussed the basics of tf2 and time . this tutorial will take us one step further and expose a powerful tf2 trick: the time travel. in short, one of the key features of tf2 library is that it is able to transform data in time as well as in space. this tf2 time travel feature can be useful for various tasks, like monitoring the pose of the robot for a long period of time or building a follower robot that will follow the âstepsâ of the leader. we will use that time travel feature to look up transforms back in time and program turtle2 to follow 5 seconds behind carrot1 . time travel ï first, letâs go back to where we ended in the previous tutorial using time . go to your learning_tf2_cpp package. now, instead of making the second turtle go to where the carrot is now, we will make the second turtle go to where the first carrot was 5 seconds ago. edit the lookuptransform() call in turtle_tf2_listener.cpp file to rclcpp :: time when = this -> get_clock () -> now () - rclcpp :: duration ( 5 , 0 ); try { t = tf_buffer_ -> lookuptransform ( toframerel , fromframerel , when , 50 ms ); } catch ( const tf2 :: transformexception & ex ) { now if you run this, during the first 5 seconds, the second turtle would not know where to go because we do not yet have a 5-second history of poses of the carrot. but what happens after these 5 seconds? build the package then letâs just give it a try: ros2 launch learning_tf2_cpp turtle_tf2_fixed_frame_demo_launch.py you should now notice that your turtle is driving around uncontrollably like in this screenshot. letâs try to understand reason behind that behavior. in our code we asked tf2 the following question: âwhat was the pose of carrot1 5 seconds ago, relative to turtle2 5 seconds ago?â. this means we are controlling the second turtle based on where it was 5 seconds ago as well as where the first carrot was 5 seconds ago. however, what we really want to ask is: âwhat was the pose of carrot1 5 seconds ago, relative to the current position of the turtle2 ?â. advanced api for lookuptransform() ï to ask the tf2 that particular question, we will use an advanced api that gives us the power to say explicitly when to acquire the specified transformations. this is done by calling the lookuptransform() method with additional parameters. your code now would look like this: rclcpp :: time now = this -> get_clock () -> now (); rclcpp :: time when = now - rclcpp :: duration ( 5 , 0 ); try { t = tf_buffer_ -> lookuptransform ( toframerel , now , fromframerel , when , "world" , 50 ms ); } catch ( const tf2 :: transformexception & ex ) { the advanced api for lookuptransform() takes six arguments: target frame the time to transform to source frame the time at which source frame will be evaluated frame that does not change over time, in this case the world frame time to wait for the target frame to become available to sum up, tf2 does the following in the background. in the past, it computes the transform from the carrot1 to the world . in the world frame, tf2 time travels from the past to now. and at the current time, tf2 computes the transform from the world to the turtle2 . checking the results ï build the package then letâs run the simulation again, this time with the advanced time-travel api: ros2 launch learning_tf2_cpp turtle_tf2_fixed_frame_demo_launch.py and yes, the second turtle is directed to where the first carrot was 5 seconds ago! summary ï in this tutorial, you have seen one of the advanced features of tf2. you learned that tf2 can transform data in time and learned how to do that with turtlesim example. tf2 allowed you to go back in time and make frame transformations between old and current poses of turtles by using the advanced lookuptransform() api. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling