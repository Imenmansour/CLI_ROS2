tutorials intermediate tf2 writing a listener (python) edit on github writing a listener (python) ï goal: learn how to use tf2 to get access to frame transformations. tutorial level: intermediate time: 10 minutes background ï in previous tutorials we created a tf2 broadcaster to publish the pose of a turtle to tf2. in this tutorial weâll create a tf2 listener to start using tf2. prerequisites ï this tutorial assumes you have completed the tf2 static broadcaster tutorial (python) and tf2 broadcaster tutorial (python) . in the previous tutorial, we created a learning_tf2_py package, which is where we will continue working from. tasks ï 1 write the listener node ï letâs first create the source files. go to the learning_tf2_py package we created in the previous tutorial. inside the src/learning_tf2_py/learning_tf2_py directory download the example listener code by entering the following command: linux macos windows wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/turtle_tf2_listener.py wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/turtle_tf2_listener.py in a windows command line prompt: curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/turtle_tf2_listener.py -o turtle_tf2_listener.py or in powershell: curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/turtle_tf2_listener.py -o turtle_tf2_listener.py now open the file called turtle_tf2_listener.py using your preferred text editor. import math from geometry_msgs.msg import twist import rclpy from rclpy.node import node from tf2_ros import transformexception from tf2_ros.buffer import buffer from tf2_ros.transform_listener import transformlistener from turtlesim.srv import spawn class framelistener ( node ): def __init__ ( self ): super () . __init__ ( 'turtle_tf2_frame_listener' ) # declare and acquire `target_frame` parameter self . target_frame = self . declare_parameter ( 'target_frame' , 'turtle1' ) . get_parameter_value () . string_value self . tf_buffer = buffer () self . tf_listener = transformlistener ( self . tf_buffer , self ) # create a client to spawn a turtle self . spawner = self . create_client ( spawn , 'spawn' ) # boolean values to store the information # if the service for spawning turtle is available self . turtle_spawning_service_ready = false # if the turtle was successfully spawned self . turtle_spawned = false # create turtle2 velocity publisher self . publisher = self . create_publisher ( twist , 'turtle2/cmd_vel' , 1 ) # call on_timer function every second self . timer = self . create_timer ( 1.0 , self . on_timer ) def on_timer ( self ): # store frame names in variables that will be used to # compute transformations from_frame_rel = self . target_frame to_frame_rel = 'turtle2' if self . turtle_spawning_service_ready : if self . turtle_spawned : # look up for the transformation between target_frame and turtle2 frames # and send velocity commands for turtle2 to reach target_frame try : t = self . tf_buffer . lookup_transform ( to_frame_rel , from_frame_rel , rclpy . time . time ()) except transformexception as ex : self . get_logger () . info ( f 'could not transform { to_frame_rel } to { from_frame_rel } : { ex } ' ) return msg = twist () scale_rotation_rate = 1.0 msg . angular . z = scale_rotation_rate * math . atan2 ( t . transform . translation . y , t . transform . translation . x ) scale_forward_speed = 0.5 msg . linear . x = scale_forward_speed * math . sqrt ( t . transform . translation . x ** 2 + t . transform . translation . y ** 2 ) self . publisher . publish ( msg ) else : if self . result . done (): self . get_logger () . info ( f 'successfully spawned { self . result . result () . name } ' ) self . turtle_spawned = true else : self . get_logger () . info ( 'spawn is not finished' ) else : if self . spawner . service_is_ready (): # initialize request with turtle name and coordinates # note that x, y and theta are defined as floats in turtlesim/srv/spawn request = spawn . request () request . name = 'turtle2' request . x = float ( 4 ) request . y = float ( 2 ) request . theta = float ( 0 ) # call request self . result = self . spawner . call_async ( request ) self . turtle_spawning_service_ready = true else : # check if the service is ready self . get_logger () . info ( 'service is not ready' ) def main (): rclpy . init () node = framelistener () try : rclpy . spin ( node ) except keyboardinterrupt : pass rclpy . shutdown () 1.1 examine the code ï to understand how the service behind spawning turtle works,  refer to writing a simple service and client (python) tutorial. now, letâs take a look at the code that is relevant to get access to frame transformations. the tf2_ros package provides an implementation of a transformlistener to help make the task of receiving transforms easier. from tf2_ros.transform_listener import transformlistener here, we create a transformlistener object. once the listener is created, it starts receiving tf2 transformations over the wire, and buffers them for up to 10 seconds. self . tf_listener = transformlistener ( self . tf_buffer , self ) finally, we query the listener for a specific transformation. we call lookup_transform method with following arguments: target frame source frame the time at which we want to transform providing rclpy.time.time() will just get us the latest available transform. all this is wrapped in a try-except block to handle possible exceptions. t = self . tf_buffer . lookup_transform ( to_frame_rel , from_frame_rel , rclpy . time . time ()) 1.2 add an entry point ï to allow the ros2 run command to run your node, you must add the entry point to setup.py (located in the src/learning_tf2_py directory). add the following line between the 'console_scripts': brackets: 'turtle_tf2_listener = learning_tf2_py.turtle_tf2_listener:main' , 2 update the launch file ï open the launch file called turtle_tf2_demo_launch.py in the src/learning_tf2_py/launch directory with your text editor, add two new nodes to the launch description, add a launch argument, and add the imports. the resulting file should look like: from launch import launchdescription from launch.actions import declarelaunchargument from launch.substitutions import launchconfiguration from launch_ros.actions import node def generate_launch_description (): return launchdescription ([ node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), node ( package = 'learning_tf2_py' , executable = 'turtle_tf2_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), declarelaunchargument ( 'target_frame' , default_value = 'turtle1' , description = 'target frame name.' ), node ( package = 'learning_tf2_py' , executable = 'turtle_tf2_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), node ( package = 'learning_tf2_py' , executable = 'turtle_tf2_listener' , name = 'listener' , parameters = [ { 'target_frame' : launchconfiguration ( 'target_frame' )} ] ), ]) this will declare a target_frame launch argument, start a broadcaster for second turtle that we will spawn and listener that will subscribe to those transformations. 3 build ï run rosdep in the root of your workspace to check for missing dependencies. linux macos windows rosdep install -i --from-path src --rosdistro jazzy -y rosdep only runs on linux, so you will need to install geometry_msgs and turtlesim dependencies yourself rosdep only runs on linux, so you will need to install geometry_msgs and turtlesim dependencies yourself still in the root of your workspace, build your package: linux macos windows colcon build --packages-select learning_tf2_py colcon build --packages-select learning_tf2_py colcon build --merge-install --packages-select learning_tf2_py open a new terminal, navigate to the root of your workspace, and source the setup files: linux macos windows . install/setup.bash . install/setup.bash # cmd call install\setup.bat # powershell .\install\setup.ps1 4 run ï now youâre ready to start your full turtle demo: ros2 launch learning_tf2_py turtle_tf2_demo_launch.py you should see the turtle sim with two turtles. in the second terminal window type the following command: ros2 run turtlesim turtle_teleop_key to see if things work, simply drive around the first turtle using the arrow keys (make sure your terminal window is active, not your simulator window), and youâll see the second turtle following the first one! summary ï in this tutorial you learned how to use tf2 to get access to frame transformations. you also have finished writing your own turtlesim demo that you first tried in introduction to tf2 tutorial. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling