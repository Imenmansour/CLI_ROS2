tutorials beginner: client libraries creating a package edit on github creating a package ï goal: create a new package using either cmake or python, and run its executable. tutorial level: beginner time: 15 minutes background ï 1 what is a ros 2 package? ï a package is an organizational unit for your ros 2 code. if you want to be able to install your code or share it with others, then youâll need it organized in a package. with packages, you can release your ros 2 work and allow others to build and use it easily. package creation in ros 2 uses ament as its build system and colcon as its build tool. you can create a package using either cmake or python, which are officially supported, though other build types do exist. 2 what makes up a ros 2 package? ï ros 2 python and cmake packages each have their own minimum required contents: cmake python cmakelists.txt file that describes how to build the code within the package include/<package_name> directory containing the public headers for the package package.xml file containing meta information  the package src directory containing the source code for the package package.xml file containing meta information  the package resource/<package_name> marker file for the package setup.cfg is required when a package has executables, so ros2 run can find them setup.py containing instructions for how to install the package <package_name> - a directory with the same name as your package, used by ros 2 tools to find your package, contains __init__.py the simplest possible package may have a file structure that looks like: cmake python my_package/ cmakelists.txt include/my_package/ package.xml src/ my_package/ package.xml resource/my_package setup.cfg setup.py my_package/ 3 packages in a workspace ï a single workspace can contain as many packages as you want, each in their own folder. you can also have packages of different build types in one workspace (cmake, python, etc.). you cannot have nested packages. best practice is to have a src folder within your workspace, and to create your packages in there. this keeps the top level of the workspace âcleanâ. a trivial workspace might look like: workspace_folder/ src/ cpp_package_1/ cmakelists.txt include/cpp_package_1/ package.xml src/ py_package_1/ package.xml resource/py_package_1 setup.cfg setup.py py_package_1/ ... cpp_package_n/ cmakelists.txt include/cpp_package_n/ package.xml src/ prerequisites ï you should have a ros 2 workspace after following the instructions in the previous tutorial . you will create your package in this workspace. tasks ï 1 create a package ï first, source your ros 2 installation . letâs use the workspace you created in the previous tutorial , ros2_ws , for your new package. make sure you are in the src folder before running the package creation command. linux macos windows cd ~/ros2_ws/src cd ~/ros2_ws/src cd \ros2_ws\src the command syntax for creating a new package in ros 2 is: cmake python ros2 pkg create --build-type ament_cmake --license apache-2.0 <package_name> ros2 pkg create --build-type ament_python --license apache-2.0 <package_name> for this tutorial, you will use the optional arguments --node-name and --license . --node-name option creates a simple hello world type executable in the package, and --license declares the license information for the package. enter the following command in your terminal: cmake python ros2 pkg create --build-type ament_cmake --license apache-2.0 --node-name my_node my_package ros2 pkg create --build-type ament_python --license apache-2.0 --node-name my_node my_package you will now have a new folder within your workspaceâs src directory called my_package . after running the command, your terminal will return the message: cmake python going to create a new package package name: my_package destination directory: /home/user/ros2_ws/src package format: 3 version: 0.0.0 description: todo: package description maintainer: ['<name> <>'] licenses: ['apache-2.0'] build type: ament_cmake dependencies: [] node_name: my_node creating folder ./my_package creating ./my_package/package.xml creating source and include folder creating folder ./my_package/src creating folder ./my_package/include/my_package creating ./my_package/cmakelists.txt creating ./my_package/src/my_node.cpp going to create a new package package name: my_package destination directory: /home/user/ros2_ws/src package format: 3 version: 0.0.0 description: todo: package description maintainer: ['<name> <>'] licenses: ['apache-2.0'] build type: ament_python dependencies: [] node_name: my_node creating folder ./my_package creating ./my_package/package.xml creating source folder creating folder ./my_package/my_package creating ./my_package/setup.py creating ./my_package/setup.cfg creating folder ./my_package/resource creating ./my_package/resource/my_package creating ./my_package/my_package/__init__.py creating folder ./my_package/test creating ./my_package/test/test_.py creating ./my_package/test/test_flake8.py creating ./my_package/test/test_pep257.py creating ./my_package/my_package/my_node.py you can see the automatically generated files for the new package. 2 build a package ï putting packages in a workspace is especially valuable because you can build many packages at once by running colcon build in the workspace root. otherwise, you would have to build each package individually. return to the root of your workspace: linux macos windows cd ~/ros2_ws cd ~/ros2_ws cd \ros2_ws now you can build your packages: linux macos windows colcon build colcon build colcon build --merge-install windows doesnât allow long paths, so merge-install will combine all the paths into the install directory. recall from the last tutorial that you also have the ros_tutorials packages in your ros2_ws . you might have noticed that running colcon build also built the turtlesim package. thatâs fine when you only have a few packages in your workspace, but when there are many packages, colcon build can take a long time. to build only the my_package package next time, you can run: colcon build --packages-select my_package 3 source the setup file ï to use your new package and executable, first open a new terminal and source your main ros 2 installation. then, from inside the ros2_ws directory, run the following command to source your workspace: linux macos windows source install/local_setup.bash . install/local_setup.bash call install/local_setup.bat now that your workspace has been added to your path, you will be able to use your new packageâs executables. 4 use the package ï to run the executable you created using the --node-name argument during package creation, enter the command: ros2 run my_package my_node which will return a message to your terminal: cmake python hello world my_package package hi from my_package. 5 examine package contents ï inside ros2_ws/src/my_package , you will see the files and folders that ros2 pkg create automatically generated: cmake python cmakelists.txt include package.xml src my_node.cpp is inside the src directory. this is where all your custom c++ nodes will go in the future. my_package package.xml resource setup.cfg setup.py test my_node.py is inside the my_package directory. this is where all your custom python nodes will go in the future. 6 customize package.xml ï you may have noticed in the return message after creating your package that the fields description and license contain todo notes. thatâs because the package description and license declaration are not automatically set, but are required if you ever want to release your package. the maintainer field may also need to be filled in. from ros2_ws/src/my_package , open package.xml using your preferred text editor: cmake python <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format= "3" > <name> my_package </name> <version> 0.0.0 </version> <description> todo: package description </description> <maintainer = "user@todo.todo" > user </maintainer> <license> todo: license declaration </license> <buildtool_depend> ament_cmake </buildtool_depend> <test_depend> ament_lint_auto </test_depend> <test_depend> ament_lint_common </test_depend> <export> <build_type> ament_cmake </build_type> </export> </package> <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format= "3" > <name> my_package </name> <version> 0.0.0 </version> <description> todo: package description </description> <maintainer = "user@todo.todo" > user </maintainer> <license> todo: license declaration </license> <test_depend> ament_ </test_depend> <test_depend> ament_flake8 </test_depend> <test_depend> ament_pep257 </test_depend> <test_depend> python3-pytest </test_depend> <export> <build_type> ament_python </build_type> </export> </package> input your name and  on the maintainer line if it hasnât been automatically populated for you. then, edit the description line to summarize the package: <description> beginner client libraries tutorials practice package </description> then, update the license line. you can read more  open source licenses here . since this package is only for practice, itâs safe to use any license. weâll use apache-2.0 : <license> apache-2.0 </license> donât forget to save once youâre done editing. below the license tag, you will see some tag names ending with _depend . this is where your package.xml would list its dependencies on other packages, for colcon to search for. my_package is simple and doesnât have any dependencies, but you will see this space being utilized in upcoming tutorials. cmake python youâre all done for now! the setup.py file contains the same description, maintainer and license fields as package.xml , so you need to set those as well. they need to match exactly in both files. the version and name ( package_name ) also need to match exactly, and should be automatically populated in both files. open setup.py with your preferred text editor. from setuptools import find_packages , setup package_name = 'my_py_pkg' setup ( name = package_name , version = '0.0.0' , packages = find_packages ( exclude = [ 'test' ]), data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ], install_requires = [ 'setuptools' ], zip_safe = true , maintainer = 'todo' , maintainer_ = 'todo' , description = 'todo: package description' , license = 'todo: license declaration' , tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ 'my_node = my_py_pkg.my_node:main' ], }, ) edit the maintainer , maintainer_ , and description lines to match package.xml . donât forget to save the file. summary ï youâve created a package to organize your code and make it easy to use for others. your package was automatically populated with the necessary files, and then you used colcon to build it so you can use its executables in your local environment. next steps ï next, letâs add something meaningful to a package. youâll start with a simple publisher/subscriber system, which you can choose to write in either c++ or python . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling