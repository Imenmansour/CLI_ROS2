concepts intermediate concepts composition edit on github composition ï ros 1 - nodes vs. nodelets ï in ros 1 you can write your code either as a ros node or as a ros nodelet . ros 1 nodes are compiled into executables. ros 1 nodelets on the other hand are compiled into a shared library which is then loaded at runtime by a container process. ros 2 - unified api ï in ros 2 the recommended way of writing your code is similar to a nodelet - we call it a component . this makes it easy to add common concepts to existing code, like a life cycle . having different apis, which was the biggest drawback in ros 1, is avoided in ros 2 since both approaches use the same api. note it is still possible to use the node-like style of âwriting your own mainâ but for the common case it is not recommended. by making the process layout a deploy-time decision the user can choose between: running multiple nodes in separate processes with the benefits of process/fault isolation as well as easier debugging of individual nodes and running multiple nodes in a single process with the lower overhead and optionally more efficient communication (see intra process communication ). additionally ros2 launch can be used to automate these actions through specialized launch actions. writing a component ï since a component is only built into a shared library, it doesnât have a main function (see talker source code ). a component is commonly a subclass of rclcpp::node . since it is not in control of the thread, it shouldnât perform any long running or blocking tasks in its constructor. instead, it can use timers to get periodic notifications. additionally, it can create publishers, s, servers, and clients. an important aspect of making such a class a component is that the class registers itself using macros from the package rclcpp_components (see the last line in the source code). this makes the component discoverable when its library is being loaded into a running process - it acts as kind of an entry point. additionally, once a component is created, it must be registered with the index to be discoverable by the tooling. add_library ( talker_component shared src/talker_component.cpp ) rclcpp_components_register_nodes ( talker_component "composition::talker" ) # to register multiple components in the same shared library, use multiple calls # rclcpp_components_register_nodes(talker_component "composition::talker2") for an example, check out this tutorial note in order for the component_container to be able to find desired components, it must be executed or launched from a shell that has sourced the corresponding workspace. using components ï the composition package contains a couple of different approaches on how to use components. the three most common ones are: start a ( generic container process ) and call the ros service load_node offered by the container. the ros service will then load the component specified by the passed package name and library name and start executing it within the running process. instead of calling the ros service programmatically you can also use a command line tool to invoke the ros service with the passed command line arguments create a custom executable containing multiple nodes which are known at compile time. this approach requires that each component has a header file (which is not strictly needed for the first case). create a launch file and use ros2 launch to create a container process with multiple components loaded. practical application ï try the composition demos . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling