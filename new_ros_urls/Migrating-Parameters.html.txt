how-to guides migrating from ros 1 to ros 2 migrating parameters edit on github migrating parameters ï in ros 1, parameters are associated with a central server that allowed retrieving parameters at runtime through the use of the network apis. in ros 2, parameters are associated per node and are configurable at runtime with ros services. see ros 2 parameter design document for more details  the system model. see ros 2 cli usage for a better understanding of how the cli tools work and its differences with ros 1 tooling. migrating yaml parameter files ï this guide describes how to adapt ros 1 parameters files for ros 2. yaml file example ï yaml is used to write parameters files in both ros 1 and ros 2. the main difference in ros 2 is that node names must be used to address parameters. in addition to the fully qualified node name, we use the key âros__parametersâ to signal the start of parameters for the node. for example, here is a parameters file in ros 1: lidar_name : foo lidar_id : 10 ports : [ 11312 , 11311 , 21311 ] debug : true letâs assume that the first two parameters are for a node named /lidar_ns/lidar_node_name , the next parameter is for a node named /imu , and the last parameter we want to set on both nodes. we would construct our ros 2 parameters file as follows: /lidar_ns : lidar_node_name : ros__parameters : lidar_name : foo id : 10 imu : ros__parameters : ports : [ 2438 , 2439 , 2440 ] /** : ros__parameters : debug : true note the use of wildcards ( /** ) to indicate that the parameter debug should be set on any node in any namespace. feature parity ï some features of ros 1 parameters files do not exist in ros 2: mixed types in a list is not supported yet ( related issue ) deg and rad substitutions are not supported other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling