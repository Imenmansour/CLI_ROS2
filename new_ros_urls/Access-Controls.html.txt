tutorials advanced security setting access controls edit on github setting access controls ï goal: limit the topics a node can use. tutorial level: advanced time: 20 minutes background ï before proceeding ensure you have completed the setting up security tutorial. permissions are quite flexible and can be used to control many behaviors within the ros graph. for this tutorial, we demonstrate a policy which only allows publishing messages on the default chatter topic. this would prevent, for instance, remapping the topic when launching the listener or using the same security enclaves for another purpose. in order to enforce this policy, we need to update the permissions.xml file and re-sign it before launching the node. this can be done by modifying the permissions file by hand, or by using xml templates. modify permissions.xml ï begin by making a backup of your permissions files, and open permissions.xml for editing: cd ~/sros2_demo/demo_keystore/enclaves/talker_listener/talker mv permissions.p7s permissions.p7s~ mv permissions.xml permissions.xml~ vi permissions.xml we will be modifying the <allow_rule> for <publish> and <subscribe> . the topics in this xml file use the dds naming format, not the ros name. find details on mapping topic names between ros and dds in the topic and service names design document . paste the following xml content into permission.xml , save the file and exit the text editor. this shows the chatter and rosout ros topics renamed to the dds rt/chatter and rt/rosout topics, respectively: <dds xmlns:xsi= "http://www.w3.org/2001/xmlschema-instance" xsi:nonamespaceschemalocation= "http://www.omg.org/spec/dds-security/20170901/omg_shared_ca_permissions.xsd" > <permissions> <grant name= "/talker_listener/talker" > <subject_name> cn=/talker_listener/talker </subject_name> <validity> <not_before> 2021-06-01t16:57:53 </not_before> <not_after> 2031-05-31t16:57:53 </not_after> </validity> <allow_rule> <domains> <id> 0 </id> </domains> <publish> <topics> <topic> rt/chatter </topic> <topic> rt/rosout </topic> <topic> rt/parameter_events </topic> <topic> */talker/* </topic> </topics> </publish> <subscribe> <topics> <topic> rt/parameter_events </topic> <topic> */talker/* </topic> </topics> </subscribe> </allow_rule> <allow_rule> <domains> <id> 0 </id> </domains> <publish> <topics> <topic> ros_discovery_info </topic> </topics> </publish> <subscribe> <topics> <topic> ros_discovery_info </topic> </topics> </subscribe> </allow_rule> <default> deny </default> </grant> </permissions> </dds> this policy allows the talker to publish on the chatter and the rosout topics. it also allows includes publish and subscribe permissions needed for the talker node to manage parameters (a requirement for all nodes). discovery permissions remain unchanged from the original template. sign the policy file ï this next command creates the new s/mime signed policy file permissions.p7s from the updated xml file permissions.xml . the file must be signed with the permissions ca certificate, which requires access to the permission ca private key . if the private key has been protected, additional steps may be required to unlock and use it accoring to your security plan. openssl smime -sign -text -in permissions.xml -out permissions.p7s \ --signer permissions_ca.cert.pem \ -inkey ~/sros2_demo/demo_keystore/private/permissions_ca.key.pem launch the node ï with the updated permissions in place, we can launch the node successfully using the same command used in prior tutorials: ros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker however, attempting to remap the chatter topic prevents the node from launching (note that this requires the ros_security_strategy set to enforce ). ros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker \ --remap chatter: = not_chatter use the templates ï security policies can quickly become confusing, so the sros2 utilities add the ability to create policies from templates. do this by using the sample policy file provided in the sros2 repository. letâs creates a policy for both the talker and the listener to only use the chatter topic. begin by downloading the sros2 repository with the sample policy files: git clone https://github.com/ros2/sros2.git /tmp/sros2 then use the create_permission verb while pointing to the sample policy to generate the xml permission files: ros2 security create_permission demo_keystore \ /talker_listener/talker \ /tmp/sros2/sros2/test/policies/sample.policy.xml ros2 security create_permission demo_keystore \ /talker_listener/listener \ /tmp/sros2/sros2/test/policies/sample.policy.xml these permission files allow nodes to only publish or subscribe to the chatter topic, and enable communications required for parameters. in one terminal with security enabled as in previous security tutorials, run the talker demo program: ros2 run demo_nodes_cpp talker --ros-args -e /talker_listener/talker in another terminal do the same with the listener program: ros2 run demo_nodes_py listener --ros-args -e /talker_listener/listener at this point, your talker and listener nodes will be communicating securely using explicit access control lists. however, the following attempt for the listener node to subscribe to a topic other than chatter will fail: ros2 run demo_nodes_py listener --ros-args --enclave /talker_listener/listener \ --remap chatter: = not_chatter other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling