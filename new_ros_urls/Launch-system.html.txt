tutorials intermediate launch integrating launch files into ros 2 packages edit on github integrating launch files into ros 2 packages ï goal: add a launch file to a ros 2 package tutorial level: intermediate time: 10 minutes prerequisites ï you should have gone through the tutorial on how to create a ros 2 package . as always, donât forget to source ros 2 in every new terminal you open . background ï in the previous tutorial , we saw how to write a standalone launch file. this tutorial will show how to add a launch file to an existing package, and the conventions typically used. tasks ï 1 create a package ï create a workspace for the package to live in: linux macos windows mkdir -p launch_ws/src cd launch_ws/src mkdir -p launch_ws/src cd launch_ws/src md launch_ws \s rc cd launch_ws \s rc python package c++ package ros2 pkg create --build-type ament_python --license apache-2.0 py_launch_example ros2 pkg create --build-type ament_cmake --license apache-2.0 cpp_launch_example 2 creating the structure to hold launch files ï by convention, all launch files for a package are stored in the launch directory inside of the package. make sure to create a launch directory at the top-level of the package you created above. python package c++ package for python packages, the directory containing your package should look like this: src/ py_launch_example/ launch/ package.xml py_launch_example/ resource/ setup.cfg setup.py test/ to enable colcon to locate and utilize our launch files, we need to inform pythonâs setup tools of their presence. to achieve this, open the setup.py file, add the necessary import statements at the top, and include the launch files into the data_files parameter of setup : import os from glob import glob # other imports ... package_name = 'py_launch_example' setup ( # other parameters ... data_files = [ # ... other data files # include all launch files. ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*launch.[pxy][yma]*' ))) ] ) for c++ packages, we will only be adjusting the cmakelists.txt file by adding: # install launch files. install ( directory launch destination share/ { project_name } / ) to the end of the file (but before ament_package() ). 3 writing the launch file ï python launch file xml launch file yaml launch file inside your launch directory, create a new launch file called my_script_launch.py . _launch.py is recommended, but not required, as the file suffix for python launch files. however, the launch file name needs to end with launch.py to be recognized and autocompleted by ros2 launch . your launch file should define the generate_launch_description() function which returns a launch.launchdescription() to be used by the ros2 launch verb. import launch import launch_ros.actions def generate_launch_description (): return launch . launchdescription ([ launch_ros . actions . node ( package = 'demo_nodes_cpp' , executable = 'talker' , name = 'talker' ), ]) inside your launch directory, create a new launch file called my_script_launch.xml . _launch.xml is recommended, but not required, as the file suffix for xml launch files. <launch> <node pkg= "demo_nodes_cpp" exec= "talker" name= "talker" /> </launch> inside your launch directory, create a new launch file called my_script_launch.yaml . _launch.yaml is recommended, but not required, as the file suffix for yaml launch files. launch : - node : pkg : "demo_nodes_cpp" exec : "talker" name : "talker" 4 building and running the launch file ï go to the top-level of the workspace, and build it: colcon build after the colcon build has been successful and youâve sourced the workspace, you should be able to run the launch file as follows: python package c++ package python launch file xml launch file yaml launch file ros2 launch py_launch_example my_script_launch.py ros2 launch py_launch_example my_script_launch.xml ros2 launch py_launch_example my_script_launch.yaml python launch file xml launch file yaml launch file ros2 launch cpp_launch_example my_script_launch.py ros2 launch cpp_launch_example my_script_launch.xml ros2 launch cpp_launch_example my_script_launch.yaml documentation ï the launch documentation provides more details on concepts that are also used in launch_ros . additional documentation/examples of launch capabilities are forthcoming. see the source code ( https://github.com/ros2/launch and https://github.com/ros2/launch_ros ) in the meantime. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling