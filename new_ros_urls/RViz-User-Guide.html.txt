tutorials intermediate rviz rviz user guide edit on github rviz user guide ï goal: understanding rviz tutorial level: intermediate time: 25 minutes background ï rviz is a 3d visualizer for the robot operating system (ros) framework. install or build rviz ï follow the installation instructions for your operating system to install rviz. startup ï donât forget to source the setup file. source /opt/ros/jazzy/setup.bash then start the visualizer ros2 run rviz2 rviz2 when rviz starts for the first time, you will see this window: the big black window in the middle is the 3d view (empty because there is nothing to see). on the left is the displays list, which will show any displays you have loaded. right now it just contains the global options and a grid, which weâll get to later. on the right are some of the other panels, described below. displays ï a display is something that draws something in the 3d world, and likely has some options available in the displays list. an example is a point cloud, the robot state, etc. adding a new display ï to add a display, click the add button at the bottom: this will pop up the new display dialog: the list at the top contains the display type. the type details what kind of data this display will visualize. the text box in the middle gives a description of the selected display type. finally, you must give the display a unique name. if you have, for example, two laser scanners on your robot, you might create two laser scan displays named âlaser baseâ and âlaser headâ. display properties ï each display gets its own list of properties. for example: display status ï each display gets its own status to help let you know if everything is ok or not. the status can be one of: ok , warning , error , or disabled . the status is indicated in the displayâs title by the background color, as well as in the status category that you can see if the display is expanded: the status category also expands to show specific status information. this information is different for different displays, and the messages should be self explanatory. built-in display types ï name description messages used axes displays a set of axes effort shows the effort being put into each revolute joint of a robot sensor_msgs/msg/jointstates camera creates a new rendering window from the perspective of a camera, and overlays the image on top of it. sensor_msgs/msg/image , sensor_msgs/msg/camerainfo grid displays a 2d or 3d grid along a plane grid cells draws cells from a grid, usually obstacles from a costmap from the navigation stack. nav_msgs/msg/gridcells image creates a new rendering window with an image. unlike the camera display, this display does not use a camerainfo sensor_msgs/msg/image interactivemarker displays 3d objects from one or multiple interactive marker servers and allows mouse interaction with them visualization_msgs/msg/interactivemarker laser scan shows data from a laser scan, with different options for rendering modes, accumulation, etc. sensor_msgs/msg/laserscan map displays a map on the ground plane. nav_msgs/msg/occupancygrid markers allows programmers to display arbitrary primitive shapes through a topic visualization_msgs/msg/marker , visualization_msgs/msg/markerarray path shows a path from the navigation stack. nav_msgs/msg/path point draws a point as a small sphere. geometry_msgs/msg/pointstamped pose draws a pose as either an arrow or axes. geometry_msgs/msg/posestamped pose array draws a âcloudâ of arrows, one for each pose in a pose array geometry_msgs/msg/posearray point cloud(2) shows data from a point cloud, with different options for rendering modes, accumulation, etc. sensor_msgs/msg/pointcloud , sensor_msgs/msg/pointcloud2 polygon draws the outline of a polygon as lines. geometry_msgs/msg/polygon odometry accumulates odometry poses from over time. nav_msgs/msg/odometry range displays cones representing range measurements from sonar or ir range sensors. version: electric+ sensor_msgs/msg/range robotmodel shows a visual representation of a robot in the correct pose (as defined by the current tf transforms). tf displays the tf2 transform hierarchy. wrench draws a wrench as arrow (force) and arrow + circle (torque) geometry_msgs/msg/wrenchstamped twist draws a twist as arrow (linear) and arrow + circle (angular) geometry_msgs/msg/twiststamped configurations ï different configurations of displays are often useful for different uses of the visualizer. a configuration useful for a full pr2 is not necessarily useful for a test cart, for example. to this end, the visualizer lets you load and save different configurations. a configuration contains: displays + their properties tool properties the viewpoint and settings for the 3d visualzation views panel ï there are a number of different camera types available in the visualizer. camera types consist both of different ways of controlling the camera and different types of projection (orthographic vs. perspective). orbital camera (default) ï the orbital camera simply rotates around a focal point, while always looking at that point. the focal point is visualized as a small disc while youâre moving the camera: controls: left mouse button : click and drag to rotate around the focal point. middle mouse button : click and drag to move the focal point in the plane formed by the cameraâs up and right vectors. the distance moved depends on the focal point â if there is an object on the focal point, and you click on top of it, it will stay under your mouse. right mouse button : click and drag to zoom in/out of the focal point. dragging up zooms in, down zooms out. scrollwheel : zoom in/out of the focal point fps (first-person) camera ï the fps camera is a first-person camera, so it rotates as if youâre looking with your head. controls: left mouse button : click and drag to rotate. control-click to pick the object under the mouse and look directly at it. middle mouse button : click and drag to move along the plane formed by the cameraâs up and right vectors. right mouse button : click and drag to move along the cameraâs forward vector. dragging up moves forward, down moves backward. scrollwheel : move forward/backward. top-down orthographic ï the top-down orthographic camera always looks down along the z axis (in the robot frame), and is an orthographic view which means things do not get smaller as they get farther away. controls: left mouse button : click and drag to rotate around the z axis. middle mouse button : click and drag to move the camera along the xy plane. right mouse button : click and drag to zoom the image. scrollwheel : zoom the image. xy orbit ï same as the orbital camera, with the focus point restricted to the xy plane. controls: see orbital camera. third person follower ï the camera maintains a constant viewing angle towards the target frame. in contrast to xy orbit the camera turns if the target frame yaws. this could be handy if you are doing 3d mapping of a hallway with corners for example. controls: see orbital camera. custom views ï the views panel also lets you create different named views, which are saved and can be switched between. a view consists of a target frame, camera type and camera pose. you can save a view by clicking the save button of the views panel. a view consists of: view controller type view configuration (position, orientation, etc; possibly different for each view controller type.) the target frame views are saved per user, not in the config files. coordinate frames ï rviz uses the tf transform system for transforming data from the coordinate frame it arrives in into a global reference frame. there are two coordinate frames that are important to know  in the visualizer, the target frame and the fixed frame. the fixed frame ï the more-important of the two frames is the fixed frame. the fixed frame is the reference frame used to denote the world frame. this is usually the map , or world , or something similar, but can also be, for example, your odometry frame. if the fixed frame is erroneously set to, say, the base of the robot, then all the objects the robot has ever seen will appear in front of the robot, at the position relative to the robot at which they were detected. for correct results, the fixed frame should not be moving relative to the world. if you change the fixed frame, all data currently being shown is cleared rather than re-transformed. the target frame ï the target frame is the reference frame for the camera view. for example, if your target frame is the map, youâll see the robot driving around the map. if your target frame is the base of the robot, the robot will stay in the same place while everything else moves relative to it. tools ï the visualizer has a number of tools you can use on the toolbar. the following sections will give a short introduction into these tools. you can find some more information under help -> show help panel. interact ï this tool lets you interact with the visualized environment. you can click on objects and depending on their properties simply select them, move them around and much more. keyboard shortcut: i move camera ï the move camera tool is the default tool. when this is selected and you click inside the 3d view, the viewpoint changes according to the options and camera type you have selected in the views panel. see the previous section views panel for more information. keyboard shortcut: m select ï the select tool allows you to select items being displayed in the 3d view. it supports single-point selection as well as click/drag box selection. you can add to a selection with the shift key, and remove from the selection with the ctrl key. if you want to move the camera around while selecting without switching back to the move camera tool you can hold down the alt key. the f key will focus the camera on the current selection. keyboard shortcut: s focus camera ï focus camera lets you select a location in the visualizer. the camera will then focus that point by changing its orientation but not its position. keyboard shortcut: c measure ï with the measure tool you can measure the distance between to points in the visualizer. the first click after activating the tool will set the starting point and the second one the end point of the measurement. the resulting distance will be displayed at the bottom of the rviz window. but notice that the measurement tool only works with actually rendered objects in the visualizer, you can not use it in empty space. keyboard shortcut: n 2d pose estimate ï this tool lets you set an initial pose to seed the localization system (sent on the initialpose ros topic). click on a location on the ground plane and drag to select the orientation. the output topic can be changed in the tool properties panel. this tool works with the navigation stack. keyboard shortcut: p 2d nav goal ï this tool lets you set a goal sent on the goal_pose ros topic. click on a location on the ground plane and drag to select the orientation. the output topic can be changed in the tool properties panel. this tool works with the navigation stack. keyboard shortcut: g publish point ï the publish point tool lets you select an object in the visualizer and the tool will publish the coordinates of that point based on the frame. the results are shown at the bottom like with the measure tool but are also published on the clicked_point topic. keyboard shortcut: u time ï the time panel is mostly useful when running in a simulator, since it allows you to see how much ros time has passed, vs. how much wall clock (aka real) time has passed. the time panel also lets you reset the visualizerâs internal time state, which resets of all the displays as well as tfâs internal cache of data. if you are not running in simulation, the time panel is mostly useless. in most cases it can be closed and you will probably not even notice (other than having a bit more screen real estate for the rest of rviz). other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling