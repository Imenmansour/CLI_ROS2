how-to guides setup ros 2 with vscode and docker [community-contributed] edit on github setup ros 2 with vscode and docker [community-contributed] ï install vs code and docker ï using visual studio code and docker containers will enable you to run your favorite ros 2 distribution without the necessity to change your operating system or use a virtual machine. with this tutorial you can set up a docker container, which can be used for your future ros 2 projects. install docker ï to install docker and set the correct user rights  use the following commands. sudo apt install docker.io git python3-pip pip3 install vcstool echo export path=home/.local/bin:path >> ~/.bashrc source ~/.bashrc sudo groupadd docker sudo usermod -ag docker user newgrp docker now you can check if the installation was successful by running the following command: docker run hello-world you might need to start the docker daemon first, if you cannot run hello-world out of the box: sudo systemctl start docker install vs code ï to install vs code  use the following commands: sudo apt update sudo apt install software-properties-common apt-transport-https wget -y wget -q https://packages.microsoft.com/keys/microsoft.asc -o- | sudo apt-key add - sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" sudo apt install code you can run vs code by typing code in a terminal. install remote development extension ï within vs code search in extensions (ctrl+shift+x) for the âremote developmentâ extension and install it. configure workspace in docker and vs code ï add your ros 2 workspace ï add a workspace in order to build and open them in a container, e.g.: cd ~/ mkdir ws cd ws mkdir src now create a .devcontainer folder in the root of your workspace and add a devcontainer.json and dockerfile to this .devcontainer folder. the workspace structure should look like this: ws âââ .devcontainer â âââ devcontainer.json â âââ dockerfile âââ src âââ package1 âââ package2 with file->open folder... or ctrl+k ctrl+o , open the ws folder of your workspace in vs code. edit devcontainer.json for your environment ï for the dev container to function properly, we have to build it with the correct user. therefore add the following to .devcontainer/devcontainer.json : { "name" : "ros 2 development container" , "privileged" : true , "remoteuser" : "your_username" , "build" : { "dockerfile" : "dockerfile" , "args" : { "username" : "your_username" } }, "workspacefolder" : "/home/ws" , "workspacemount" : "source={localworkspacefolder},target=/home/ws,type=bind" , "customizations" : { "vscode" : { "extensions" :[ "ms-vscode.cpptools" , "ms-vscode.cpptools-themes" , "twxs.cmake" , "donjayamanne.python-extension-pack" , "eamodio.gitlens" , "ms-iot.vscode-ros" ] } }, "containerenv" : { "display" : "unix:0" , "ros_automatic_discovery_range" : "localhost" , "ros_domain_id" : "42" }, "runargs" : [ "--net=host" , "--pid=host" , "--ipc=host" , "-e" , "display={env:display}" ], "mounts" : [ "source=/tmp/.x11-unix,target=/tmp/.x11-unix,type=bind,consistency=cached" , "source=/dev/dri,target=/dev/dri,type=bind,consistency=cached" ], "postcreatecommand" : "sudo rosdep update && sudo rosdep install --from-paths src --ignore-src -y && sudo chown -r (whoami) /home/ws/" } use ctrl+f to open the search and replace menu. search for your_username and replace it with your linux username . if you do not know your username, you can find it by running echo username in the terminal. edit dockerfile ï open the dockerfile and add the following contents: from ros:ros_distro arg username = username arg user_uid = 1000 arg user_gid = user_uid # delete user if it exists in container (e.g ubuntu noble: ubuntu) run if id -u user_uid ; then userdel ` id -un user_uid ` ; fi # create the user run groupadd --gid user_gid username \ && useradd --uid user_uid --gid user_gid -m username \ # # [optional] add sudo support. omit if you don't need to install software after connecting. && apt-get update \ && apt-get install -y sudo \ && echo username all = \( root \) nopasswd:all > /etc/sudoers.d/ username \ && chmod 0440 /etc/sudoers.d/ username run apt-get update && apt-get upgrade -y run apt-get install -y python3-pip env shell /bin/bash # ******************************************************** # * anything else you want to do like clean up goes here * # ******************************************************** # [optional] set the default user. omit if you want to keep the default as root. user username cmd [ "/bin/bash" ] replace ros_distro with the ros 2 distribution you wish to use as base image above, for example rolling . open and build development container ï use view->command palette... or ctrl+shift+p to open the command palette. search for the command dev containers: reopen in container and execute it. this will build your development docker container for your. it will take a while - sit back or go for a coffee. test container ï to test if everything worked correctly, open a terminal in the container using view->terminal or ctrl+shift+` and new terminal in vs code. inside the terminal do the following: sudo apt install ros-ros_distro-rviz2 -y source /opt/ros/ros_distro/setup.bash rviz2 note there might be a problem with displaying rviz.  make sure to allow the user to access x window system with xhost +local:<username> . if no window still pops up, then check the value of echo display - if the output is 1, you can fix this problem with echo "export display=unix:1" >> /etc/bash.bashrc and then test it again. you can also change the display value in the devcontainer.json and rebuild it. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling