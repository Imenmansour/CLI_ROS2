tutorials beginner: cli tools understanding actions edit on github understanding actions ï goal: introspect actions in ros 2. tutorial level: beginner time: 15 minutes background ï actions are one of the communication types in ros 2 and are intended for long running tasks. they consist of three parts: a goal, feedback, and a result. actions are built on topics and services. their functionality is similar to services, except actions can be canceled. they also provide steady feedback, as opposed to services which return a single response. actions use a client-server model, similar to the publisher-subscriber model (described in the topics tutorial ). an âaction clientâ node sends a goal to an âaction serverâ node that acknowledges the goal and returns a stream of feedback and a result. prerequisites ï this tutorial builds off concepts, like nodes and topics , covered in previous tutorials. this tutorial uses the turtlesim package . as always, donât forget to source ros 2 in every new terminal you open . tasks ï 1 setup ï start up the two turtlesim nodes, /turtlesim and /teleop_turtle . open a new terminal and run: ros2 run turtlesim turtlesim_node open another terminal and run: ros2 run turtlesim turtle_teleop_key 2 use actions ï when you launch the /teleop_turtle node, you will see the following message in your terminal: use arrow keys to move the turtle. use g|b|v|c|d|e|r|t keys to rotate to absolute orientations. 'f' to cancel a rotation. letâs focus on the second line, which corresponds to an action. (the first instruction corresponds to the âcmd_velâ topic, discussed previously in the topics tutorial .) notice that the letter keys g|b|v|c|d|e|r|t form a âboxâ around the f key on a us qwerty keyboard (if you are not using a qwerty keyboard, see this link to follow along). each keyâs position around f corresponds to that orientation in turtlesim. for example, the e will rotate the turtleâs orientation to the upper left corner. pay attention to the terminal where the /turtlesim node is running. each time you press one of these keys, you are sending a goal to an action server that is part of the /turtlesim node. the goal is to rotate the turtle to face a particular direction. a message relaying the result of the goal should display once the turtle completes its rotation: [info] [turtlesim]: rotation goal completed successfully the f key will cancel a goal mid-execution. try pressing the c key, and then pressing the f key before the turtle can complete its rotation. in the terminal where the /turtlesim node is running, you will see the message: [info] [turtlesim]: rotation goal canceled not only can the client-side (your input in the teleop) stop a goal, but the server-side (the /turtlesim node) can as well. when the server-side chooses to stop processing a goal, it is said to âabortâ the goal. try hitting the d key, then the g key before the first rotation can complete. in the terminal where the /turtlesim node is running, you will see the message: [warn] [turtlesim]: rotation goal received before a previous goal finished. aborting previous goal this action server chose to abort the first goal because it got a new one. it could have chosen something else, like reject the new goal or execute the second goal after the first one finished. donât assume every action server will choose to abort the current goal when it gets a new one. 3 ros2 node info ï to see the list of actions a node provides, /turtlesim in this case, open a new terminal and run the command: ros2 node info /turtlesim which will return a list of /turtlesim âs subscribers, publishers, services, action servers and action clients: /turtlesim subscribers: /parameter_events: rcl_interfaces/msg/parameterevent /turtle1/cmd_vel: geometry_msgs/msg/twist publishers: /parameter_events: rcl_interfaces/msg/parameterevent /rosout: rcl_interfaces/msg/log /turtle1/color_sensor: turtlesim/msg/color /turtle1/pose: turtlesim/msg/pose service servers: /clear: std_srvs/srv/empty /kill: turtlesim/srv/kill /reset: std_srvs/srv/empty /spawn: turtlesim/srv/spawn /turtle1/set_pen: turtlesim/srv/setpen /turtle1/teleport_absolute: turtlesim/srv/teleportabsolute /turtle1/teleport_relative: turtlesim/srv/teleportrelative /turtlesim/describe_parameters: rcl_interfaces/srv/describeparameters /turtlesim/get_parameter_types: rcl_interfaces/srv/getparametertypes /turtlesim/get_parameters: rcl_interfaces/srv/getparameters /turtlesim/list_parameters: rcl_interfaces/srv/listparameters /turtlesim/set_parameters: rcl_interfaces/srv/setparameters /turtlesim/set_parameters_atomically: rcl_interfaces/srv/setparametersatomically service clients: action servers: /turtle1/rotate_absolute: turtlesim/action/rotateabsolute action clients: notice that the /turtle1/rotate_absolute action for /turtlesim is under action servers . this means /turtlesim responds to and provides feedback for the /turtle1/rotate_absolute action. the /teleop_turtle node has the name /turtle1/rotate_absolute under action clients meaning that it sends goals for that action name. to see that, run: ros2 node info /teleop_turtle which will return: /teleop_turtle subscribers: /parameter_events: rcl_interfaces/msg/parameterevent publishers: /parameter_events: rcl_interfaces/msg/parameterevent /rosout: rcl_interfaces/msg/log /turtle1/cmd_vel: geometry_msgs/msg/twist service servers: /teleop_turtle/describe_parameters: rcl_interfaces/srv/describeparameters /teleop_turtle/get_parameter_types: rcl_interfaces/srv/getparametertypes /teleop_turtle/get_parameters: rcl_interfaces/srv/getparameters /teleop_turtle/list_parameters: rcl_interfaces/srv/listparameters /teleop_turtle/set_parameters: rcl_interfaces/srv/setparameters /teleop_turtle/set_parameters_atomically: rcl_interfaces/srv/setparametersatomically service clients: action servers: action clients: /turtle1/rotate_absolute: turtlesim/action/rotateabsolute 4 ros2 action list ï to identify all the actions in the ros graph, run the command: ros2 action list which will return: /turtle1/rotate_absolute this is the only action in the ros graph right now. it controls the turtleâs rotation, as you saw earlier. you also already know that there is one action client (part of /teleop_turtle ) and one action server (part of /turtlesim ) for this action from using the ros2 node info <node_name> command. 4.1 ros2 action list -t ï actions have types, similar to topics and services. to find /turtle1/rotate_absolute âs type, run the command: ros2 action list -t which will return: /turtle1/rotate_absolute [turtlesim/action/rotateabsolute] in brackets to the right of each action name (in this case only /turtle1/rotate_absolute ) is the action type, turtlesim/action/rotateabsolute . you will need this when you want to execute an action from the command line or from code. 5 ros2 action type ï if you want to check the action type for the action, run the command: ros2 action type /turtle1/rotate_absolute which will return: turtlesim/action/rotateabsolute 6 ros2 action info ï you can further introspect the /turtle1/rotate_absolute action with the command: ros2 action info /turtle1/rotate_absolute which will return action: /turtle1/rotate_absolute action clients: 1 /teleop_turtle action servers: 1 /turtlesim this tells us what we learned earlier from running ros2 node info on each node: the /teleop_turtle node has an action client and the /turtlesim node has an action server for the /turtle1/rotate_absolute action. 7 ros2 interface show ï one more piece of information you will need before sending or executing an action goal yourself is the structure of the action type. recall that you identified /turtle1/rotate_absolute âs type when running the command ros2 action list -t . enter the following command with the action type in your terminal: ros2 interface show turtlesim/action/rotateabsolute which will return: # the desired heading in radians float32 theta --- # the angular displacement in radians to the starting position float32 delta --- # the remaining rotation in radians float32 remaining the section of this message above the first --- is the structure (data type and name) of the goal request. the next section is the structure of the result. the last section is the structure of the feedback. 8 ros2 action send_goal ï now letâs send an action goal from the command line with the following syntax: ros2 action send_goal <action_name> <action_type> <values> <values> need to be in yaml format. keep an eye on the turtlesim window, and enter the following command into your terminal: ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/rotateabsolute "{theta: 1.57}" you should see the turtle rotating, as well as the following message in your terminal: waiting for an action server to become available... sending goal: theta: 1.57 goal accepted with id: f8db8f44410849eaa93d3feb747dd444 result: delta: -1.568000316619873 goal finished with status: succeeded all goals have a unique id, shown in the return message. you can also see the result, a field with the name delta , which is the displacement to the starting position. to see the feedback of this goal, add --feedback to the ros2 action send_goal command: ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/rotateabsolute "{theta: -1.57}" --feedback your terminal will return the message: sending goal: theta: -1.57 goal accepted with id: e6092c831f994afda92f0086f220da27 feedback: remaining: -3.1268222332000732 feedback: remaining: -3.1108222007751465 â result: delta: 3.1200008392333984 goal finished with status: succeeded you will continue to receive feedback, the remaining radians, until the goal is complete. summary ï actions are like services that allow you to execute long running tasks, provide regular feedback, and are cancelable. a robot system would likely use actions for navigation. an action goal could tell a robot to travel to a position. while the robot navigates to the position, it can send updates along the way (i.e. feedback), and then a final result message once itâs reached its destination. turtlesim has an action server that action clients can send goals to for rotating turtles. in this tutorial, you introspected that action, /turtle1/rotate_absolute , to get a better idea of what actions are and how they work. next steps ï now youâve covered all of the core ros 2 concepts. the last few tutorials in this set will introduce you to some tools and techniques that will make using ros 2 easier, starting with using rqt_console to view logs . related content ï you can read more  the design decisions behind actions in ros 2 here . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling