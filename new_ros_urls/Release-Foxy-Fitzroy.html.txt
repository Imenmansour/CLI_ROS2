distributions end-of-life distributions foxy fitzroy ( foxy ) edit on github foxy fitzroy ( foxy ) ï foxy fitzroy is the sixth release of ros 2. supported platforms ï foxy fitzroy is primarily supported on the following platforms: tier 1 platforms: ubuntu 20.04 (focal): amd64 and arm64 mac macos 10.14 (mojave) windows 10 (visual studio 2019) tier 3 platforms: ubuntu 20.04 (focal): arm32 debian buster (10): amd64 , arm64 and arm32 openembedded thud (2.6) / webos ose: arm32 and x86 for more information  rmw implementations, compiler / interpreter versions, and system dependency versions see rep 2000 . installation ï install foxy fitzroy new features in this ros 2 release ï during the development the foxy meta-ticket on github contains an up-to-date state of the ongoing high-level tasks as well as references specific tickets with more details. changes in patch release 8 (2022-09-28) ï launch groupaction scopes environment ï the setenvironmentvariable action is now scoped to any groupaction it is returned from. for example, consider the following launch files, python xml import launch from launch.actions import setenvironmentvariable from launch.actions import groupaction from launch_ros.actions import node def generate_launch_description (): return launch . launchdescription ([ setenvironmentvariable ( name = 'my_env_var' , value = '1' ), node ( package = 'foo' , executable = 'foo' , output = 'screen' ), groupaction ([ setenvironmentvariable ( name = 'my_env_var' , value = '2' ), ]), ]) <launch> <set_env name= "my_env_var" value= "1" /> <node pkg= "foo" exec= "foo" output= "screen" /> <group> <set_env name= "my_env_var" value= "2" /> </group> </launch> before patch release 8, the node foo will start with my_env_var=2 , but now it will start with my_env_var=1 . to opt-out of the new behavior, you can set the argument scoped=false on the groupaction . related tickets: ros2#1244 launch#630 changes in patch release 7 (2022-02-08) ï launch set_env frontend behavior change ï launch#468 inadvertently changed behavior to the scope of the set_env action in frontend launch files. changes to environment variables using the set_env action are no longer scoped to parent group actions, and instead apply globally. since it was backported, the change affects this release. we consider this change a regression and intend to fix the behavior in the next patch release and in future ros distributions. we also plan to fix the behavior in python launch files, which have never scoped setting environment variables properly. related issues: ros2#1244 launch#597 fix launch frontend parser ï a refactor of the launch frontend parser fixed some issues parsing special characters . as a result, there has been a small behavior change when it comes to parsing strings. for example, previously to pass a number as a string you would have to add extra quotation marks (two sets of quotation marks were needed if using a substitution): <!-- results in the string value "'3'" --> <param name= "foo" value= "''3''" /> after the refactor, the above will result in the the string "''3''" (note the extra set of quotation marks). now, users should use the type attribute to signal that the value should be interpreted as a string: <param name= "foo" value= "3" type= "str" /> related pull requests: launch#530 launch_ros#265 fix memory leaks and undefined behavior in rmw_fastrtps_dynamic_cpp ï api was changed in the following header files: rmw_fastrtps_dynamic_cpp/typesupport.hpp rmw_fastrtps_dynamic_cpp/typesupport_impl.hpp though technically they are publically accessible, it is unlikely people are using them directly. therefore, we decided to break api in order to fix memory leaks and undefined behavior. the fix was originally submitted in rmw_fastrtps#429 and later backported to foxy in rmw_fastrtps#577 . changes in patch release 2 (2020-08-07) ï bug in static_transform_publisher ï during the development of foxy, a bug was introduced into the tf2_ros static_transform_publisher program. the implementation of the order of the euler angles passed to static_transform_publisher disagrees with the documentation. foxy patch release 2 fixes the order so that the implementation agrees with the documentation (yaw, pitch, roll). for users who have started using the initial foxy release or patch release 1, this means that any launch files that use static_transform_publisher will have to have the command-line order swapped according to the new order. for users who are coming from ros 2 dashing, ros 2 eloquent, or ros 1, no changes need to be made to port to foxy patch release 2. changes since the eloquent release ï classic cmake vs. modern cmake ï in âclassicâ cmake a package provides cmake variables like <pkgname>_include_dirs and <pkgname>_libraries when being find_package() -ed. with ament_cmake that is achieved by calling ament_export_include_directories and ament_export_libraries . in combination with ament_export_dependencies , ament_cmake ensures that all include directories and libraries of recursive dependencies are concatenated and included in these variables. in âmodernâ cmake a package provides an interface target instead (commonly named <pkgname>::<pkgname> ) which in itself encapsulates all recursive dependencies. in order to export a library target to use modern cmake ament_export_targets needs to be called with an export name which is also used when installing the libraries using install(targets <liba> <libb> export <export_name> ...) . the exported interface targets are available through the cmake variable <pkgname>_targets . for library targets to be exportable like this they must not rely on classic functions affecting global state like include_directories() but set the include directories on the target itself - for the build as well as install environment - using generator expressions, e.g. target_include_directories(<target> public "<build_interface:{cmake_current_binary_dir}/include>" "<install_interface:include>") . when ament_target_dependencies is used to add dependencies to a library target the function uses modern cmake targets when they are available. otherwise it falls back to using classic cmake variables. as a consequence you should only export modern cmake targets if all dependencies are also providing modern cmake targets. otherwise the exported interface target will contain the absolute paths to include directories / libraries in the generated cmake logic which makes the package non-relocatable. for examples how packages have been updated to modern cmake in foxy see ros2/ros2#904 . ament_export_interfaces replaced by ament_export_targets ï the cmake function ament_export_interfaces from the package ament_cmake_export_interfaces has been deprecated in favor of the function ament_export_targets in the new package ament_cmake_export_targets . see the github ticket ament/ament_cmake#237 for more context. rosidl_generator_c|cpp namespace / api changes ï the packages rosidl_generator_c and rosidl_generator_cpp have been refactored with many headers and sources moved into the new packages rosidl_runtime_c and rosidl_runtime_cpp . the intention is to remove run dependencies on the generator packages and therefore the code generation tools using python. while moving the headers the include paths / namespaces were updated accordingly so in many cases changing include directives from the generator package to the runtime package is sufficient. the generated c / c++ code has also been refactored. the files ending in __struct.h|hpp , __functions.h , __traits.hpp , etc. have been moved into a subdirectory detail but most code only includes the header named after the interface without any of these suffixes. some types regarding string and sequence bounds have also been renamed to match the naming conventions but they arenât expected to be used in user code (above rmw implementation and type support packages) for more information see ros2/rosidl#446 (for c) and ros2/rosidl#447 (for c++) . default working directory for ament_add_test ï the default working directory for tests added with ament_add_test has been changed to cmake_current_binary_dir to match the behavior of cmake add_test . either update the tests to work with the new default or pass working_directory {cmake_source_dir} to restore the previous value. default console logging format ï the default console logging output format was changed to include the timestamp by default, see: https://github.com/ros2/rcutils/pull/190 https://discourse.ros.org/t/ros2-logging-format/11549 default console logging output stream ï as of foxy, all logging messages at all severity levels get logged to stderr by default. this ensures that logging messages come out immediately, and brings the ros 2 logging system into alignment with most other logging systems. it is possible to change the stream to stdout at runtime via the rcutils_logging_use_stdout environment variable, but all logging messages will still go to the same stream. see https://github.com/ros2/rcutils/pull/196 for more details. launch_ros ï node name and namespace parameters changed ï the node action parameters related to naming have been changed: node_name has been renamed to name node_namespace has been renamed to namespace node_executable has been renamed to executable exec_name has been added for naming the process associated with the node. previously, users would have used the name keyword argument. the old parameters have been deprecated. these changes were made to make the launch frontend more idiomatic. for example, instead of <node pkg= "demo_nodes_cpp" exec= "talker" node-name= "foo" /> we can now write <node pkg= "demo_nodes_cpp" exec= "talker" name= "foo" /> this change also applies to composablenodecontainer , composablenode , and lifecyclenode . for examples, see the relevant changes to the demos. related pull request in launch_ros. rclcpp ï change in advanced  callback signature ï with the pull request https://github.com/ros2/rclcpp/pull/1047 the signature of callbacks which receive the message info with the message has changed. previously it used the rmw type rmw_message_info_t , but now uses the rclcpp type rclcpp::messageinfo . the required changes are straightforward, and can be seen demonstrated in these pull requests: https://github.com/ros2/system_tests/pull/423/files https://github.com/ros2/rosbag2/pull/375/files https://github.com/ros2/ros1_bridge/pull/253/files change in serialized message callback signature ï the pull request ros2/rclcpp#1081 introduces a new signature of the callbacks for retrieving ros messages in serialized form. the previously used c-struct rcl_serialized_message_t is being superseded by a c++ data type rclcpp::serializedmessage . the example nodes in demo_nodes_cpp , namely talker_serialized_message as well as listener_serialized_message reflect these changes. breaking change in node interface gettersâ signature ï with pull request ros2/rclcpp#1069 , the signature of node interface getters has been modified to return shared ownership of node interfaces (i.e. an std::shared_ptr ) instead of a non-owning raw pointer. required changes in downstream packages that relied on the previous signature are simple and straightforward: use the std::shared_ptr::get() method. deprecate set_on_parameters_set_callback ï instead, use the rclcpp::node methods add_on_set_parameters_callback and remove_on_set_parameters_callback for adding and removing functions that are called when parameters are set. related pull request: https://github.com/ros2/rclcpp/pull/1123 breaking change in publisher getter signature ï with pull request ros2/rclcpp#1119 , the signature of publisher handle getter has been modified to return shared ownership of the underlying rcl structure (i.e. an std::shared_ptr ) instead of a non-owning raw pointer. this was necessary to fix a segfault in certain circumstances. required changes in downstream packages that relied on the previous signature are simple and straightforward: use the std::shared_ptr::get() method. rclcpp_action ï deprecate clientgoalhandle::async_result() ï using this api, it is possible to run into a race condition causing an exception to be thrown. instead, prefer to use client::async_get_result() , which is safer. see ros2/rclcpp#1120 and the connected issue for more info. rclpy ï support for multiple on parameter set callbacks ï use the node methods add_on_set_parameters_callback and remove_on_set_parameters_callback for adding and removing functions that are called when parameters are set. the method set_parameters_callback has been deprecated. related pull requests: https://github.com/ros2/rclpy/pull/457 , https://github.com/ros2/rclpy/pull/504 rmw_connext_cpp ï connext 5.1 locator kinds compatibility mode ï up to and including eloquent , rmw_connext_cpp was setting dds.transport.use_510_compatible_locator_kinds property to true . this property is not being forced anymore, and shared transport communication between foxy and previous releases will stop working. logs similar to: presparticipant_checktransportinfomatching:warning: discovered remote participant 'rti administration console' using the 'shmem' transport with class id 16777216 . this class id does not match the class id 2 of the same transport in the local participant 'talker' . these two participants will not communicate over the 'shmem' transport. check the value of the property 'dds.transport.use_510_compatible_locator_kinds' in the local participant. see https://community.rti.com/kb/what-causes-error-discovered-remote-participant for additional info. will be observed when this incompatibility happens. if compatibility is needed, it can be set up in an external qos profiles files containing: <participant_qos> <property> <value> <element> <name> dds.transport.use_510_compatible_locator_kinds </name> <value> 1 </value> </element> </value> </property> </participant_qos> remember to set the ndds_qos_profiles environment variable to the qos profiles file path. for more information, see how to change transport settings in 5.2.0 applications for compatibility with 5.1.0 section of transport_compatibility . rviz ï tools timestamp messages using ros time ï â2d pose estimateâ, â2d nav goalâ, and âpublish pointâ tools now timestamp their messages using ros time instead of system time, in order for the use_sim_time parameter to have an effect on them. related pull request: https://github.com/ros2/rviz/pull/519 std_msgs ï deprecation of messages ï although discouraged for a long time we have officially deprecated the following messages in std_msgs . there are copies in example_interfaces std_msgs/msg/bool std_msgs/msg/byte std_msgs/msg/bytemultiarray std_msgs/msg/char std_msgs/msg/float32 std_msgs/msg/float32multiarray std_msgs/msg/float64 std_msgs/msg/float64multiarray std_msgs/msg/int16 std_msgs/msg/int16multiarray std_msgs/msg/int32 std_msgs/msg/int32multiarray std_msgs/msg/int64 std_msgs/msg/int64multiarray std_msgs/msg/int8 std_msgs/msg/int8multiarray std_msgs/msg/multiarraydimension std_msgs/msg/multiarraylayout std_msgs/msg/string std_msgs/msg/uint16 std_msgs/msg/uint16multiarray std_msgs/msg/uint32 std_msgs/msg/uint32multiarray std_msgs/msg/uint64 std_msgs/msg/uint64multiarray std_msgs/msg/uint8 std_msgs/msg/uint8multiarray security features ï use of security enclaves ï as of foxy, domain participants are no longer mapped directly to ros nodes. as a result, ros 2 security features (which are specific to domain participants) are also no longer mapped directly to ros nodes. instead, foxy introduces the concept of a security âenclaveâ, where an âenclaveâ is a process or group of processes that will share the same identity and access control rules. this means that security artifacts are not retrieved based on the node name anymore but based on the security enclave name. a node enclave name can be set by using the ros argument --enclave , e.g. ros2 run demo_nodes_py talker --ros-args --enclave /my_enclave related design document: https://github.com/ros2/design/pull/274 note that permissions files are limited by the underlying transport packet size, so grouping many permissions under the same enclave will not work if the resulting permissions file exceed 64kb. related issue [ros2/sros2#228] renaming of the environment variables ï environment variables renaming ï name in eloquent name in foxy ros_security_root_directory ros_security_keystore ros_security_node_directory ros_security_enclave_override known issues ï [ros2/ros2#922] servicesâ performance is flaky for rclcpp nodes using eprosima fast-rtps or adlink cyclonedds as rmw implementation. specifically, service clients sometimes do not receive the response from servers. [ros2/rclcpp#1212] ready reentrant waitable objects can attempt to execute multiple times. timeline before the release ï a few milestones leading up to the release: note the dates below reflect an extension by roughly two weeks due to the coronavirus pandemic. wed. april 22nd, 2020 api and feature freeze for ros_core [ 1 ] packages. note that this includes rmw , which is a recursive dependency of ros_core . only bug fix releases should be made after this point. new packages can be released independently. mon. april 29th, 2020 (beta) updated releases of desktop [ 2 ] packages available. testing of the new features. wed. may 27th, 2020 (release candidate) updated releases of desktop [ 2 ] packages available. wed. june 3rd, 2020 freeze rosdistro. no prs for foxy on the rosdistro repo will be merged (reopens after the release announcement). other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling