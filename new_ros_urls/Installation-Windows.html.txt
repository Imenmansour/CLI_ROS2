tutorials advanced simulators webots installation (windows) edit on github installation (windows) ï goal: install the webots_ros2 package and run simulation examples on windows. tutorial level: advanced time: 10 minutes background ï the webots_ros2 package provides an interface between ros 2 and webots. it includes several sub-packages, including webots_ros2_driver , which allows ros nodes to communicate with webots. other sub-packages are mainly examples that show multiple possible implementations using the interface. in this tutorial, you are going to install the package and learn how to run one of these examples. prerequisites ï it is recommended to understand basic ros principles covered in the beginner tutorials . in particular, creating a workspace and creating a package are useful prerequisites. webots is a prerequisite to use the webots_ros2 package. you can follow the installation procedure or build it from sources . alternatively, you can also let webots_ros2 download webots automatically. this option appears when you launch an example of the package and no webots installation is found. multiple installations of webots ï if you have more than one installation of webots, ros 2 will look for webots at the following locations (in this order): if the ros2_webots_home environment variable is set, ros 2 will use the webots in this folder, regardless of its version. if the webots_home environment variable is set, ros 2 will use the webots in this folder, regardless of its version. if none of the previous points is set/installed ros 2 will look for webots in the default installation paths for a compatible version: c:\program files\webots . if webots couldnât be found, webots_ros2 will show a window and offer automatic webots installation of the last compatible version. tasks ï 1 install wsl2 ï on windows, wsl (windows subsystem for linux) improves the user experience with ros 2 compared to native windows installation, as it runs on a linux platform. install wsl with an ubuntu version which is compatible with your ros distribution and upgrade to wsl2 following the official microsoft tutorial . 2 install ros 2 in wsl ï install ros 2 inside ubuntu wsl, following ubuntu (deb packages) . 3 install webots_ros2 ï you can then either install webots_ros2 from the official released package, or install it from the latest up-to-date sources from github . the following commands must be run inside the wsl environment. install webots_ros2 distributed package install webots_ros2 from sources run the following command in a terminal. sudo apt-get install ros-jazzy-webots-ros2 create a ros 2 workspace with its src directory. mkdir -p ~/ros2_ws/src source the ros 2 environment. source /opt/ros/jazzy/setup.bash retrieve the sources from github. cd ~/ros2_ws git clone --recurse-submodules https://github.com/cyberbotics/webots_ros2.git src/webots_ros2 install the package dependencies. sudo apt install python3-pip python3-rosdep python3-colcon-common-extensions sudo rosdep init && rosdep update rosdep install --from-paths src --ignore-src --rosdistro jazzy build the package using colcon . colcon build source this workspace. source install/local_setup.bash 4 launch the webots_ros2_universal_robot example ï wsl doesnât support hardware acceleration (yet). therefore, webots should be started on windows, while the ros part is running inside wsl. to do so, the following commands must be run inside the wsl environment. first source the ros 2 environment, if not done already. source /opt/ros/jazzy/setup.bash setting the webots_home environment variable allows you to start a specific webots installation (e.g. c:\program files\webots ). use the mount point â/mntâ to refer to a path on native windows. export webots_home=/mnt/c/program\ files/webots if installed from sources, source your ros 2 workspace, if not done already. cd ~/ros2_ws source install/local_setup.bash use the ros 2 launch command to start demo packages (e.g. webots_ros2_universal_robot ). ros2 launch webots_ros2_universal_robot multirobot_launch.py 5 rviz troubleshooting ï with recent versions of wsl2, rviz should work out of the box. you can check if it works correctly by running any example that uses rviz, for example: sudo apt install ros-jazzy-slam-toolbox ros2 launch webots_ros2_tiago robot_launch.py rviz:=true slam:=true the tiago robot can be controlled using: ros2 run teleop_twist_keyboard teleop_twist_keyboard with older wsl versions, rviz2 may not work directly, as no display is available. to use rviz, you can either upgrade wsl or enable x11 forwarding. upgrade wsl enable x11 forwarding in a windows shell: wsl --update for older versions of wsl, the following steps can be followed: install vcxsrv . launch vcxsrv. you can leave most of the parameters default, except the extra settings page, where you must set clipboard , primary selection and disable access control and unset native opengl . you can save the configuration for future launches. click on finish , you will see that the x11 server is running in the icon tray. in your wsl environment, export the display variable. export display=(ip route list default | awk '{print }'):0 you can add this to your .bashrc , so that it is set for every future wsl environment. echo "export display=(ip route list default | awk '{print }'):0" >> ~/.bashrc other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling