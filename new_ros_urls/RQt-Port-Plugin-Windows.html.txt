how-to guides porting rqt plugins to windows edit on github porting rqt plugins to windows ï rqt porting examples ï here is the ros 2 port of qt_gui_core . here is the ros 2 port of python_qt_binding . considerations for windows 10 ï code that uses __cplusplus and code that requires pluginlib ï in some places, notably in the ros 2 port of pluginlib, there is use of the __cplusplus flag. unfortunately on windows visual studio does not set this flag correctly regardless of the c++ standard that is actually being used. see this page for more information. to set it, you need to add the compile option /zc:__cplusplus . for example, in cmake you could do something like this: target_compile_options ( { project_name } public "/zc:__cplusplus" ) locations of build artifacts (before install) ï this only came up during when building qt_gui_cpp . in that package, a custom command depends on a target library in another part of the package. however, that library isnât installed until build is complete. windows builds in a {configuration} directory. for example: on linux, qt_gui_cpp.a would be built in: <ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/ but on windows qt_gui_cpp.lib is built in <ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/release for compatibility across platforms in this situation, use cmake generator expressions . however, when you need a library to link against be sure to use <target_linker_file:_target> instead of <target_file:_target> . the latter will find .dll files, which cannot be linked against on windows. see an example here . compiler and linker flags ï in general when porting to windows, many packages might make use of additional compiler flags. you can find the windows compiler flags on microsoftâs documentation . the c++ compiler is called cl.exe . for linker flags see microsoftâs documentation . the linker program is called link.exe . however, cmake actually provides many of these options in variables. this stackoverflow page contains a good example of how to see all the cmake variables available in a script. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling