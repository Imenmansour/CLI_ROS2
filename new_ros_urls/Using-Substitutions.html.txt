tutorials intermediate launch using substitutions edit on github using substitutions ï goal: learn  substitutions in ros 2 launch files. tutorial level: intermediate time: 15 minutes background ï launch files are used to start nodes, services and execute processes. this set of actions may have arguments, which affect their behavior. substitutions can be used in arguments to provide more flexibility when describing reusable launch files. substitutions are variables that are only evaluated during execution of the launch description and can be used to acquire specific information like a launch configuration, an environment variable, or to evaluate an arbitrary python expression. this tutorial shows usage examples of substitutions in ros 2 launch files. prerequisites ï this tutorial uses the turtlesim package. this tutorial also assumes you are familiar with creating packages . as always, donât forget to source ros 2 in every new terminal you open . using substitutions ï 1 create and setup the package ï first, create a new package with the name launch_tutorial : python package c++ package create a new package of build_type ament_python : ros2 pkg create --build-type ament_python --license apache-2.0 launch_tutorial create a new package of build_type ament_cmake : ros2 pkg create --build-type ament_cmake --license apache-2.0 launch_tutorial inside of that package, create a directory called launch : linux macos windows mkdir launch_tutorial/launch mkdir launch_tutorial/launch md launch_tutorial/launch finally, make sure to install the launch files: python package c++ package add in following changes to the setup.py of the package: import os from glob import glob from setuptools import find_packages , setup package_name = 'launch_tutorial' setup ( # other parameters ... data_files = [ # ... other data files # include all launch files. ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*launch.[pxy][yma]*' ))) ] ) append following code to the cmakelists.txt just before ament_package() : install ( directory launch destination share/ { project_name } / ) 2 parent launch file ï letâs create a launch file that will call and pass arguments to another launch file. this launch file can either be in python, or in yaml. to do this, create following file in the launch folder of the launch_tutorial package. python yaml copy and paste the complete code into the launch/example_main_launch.py file: from launch_ros.substitutions import findpackageshare from launch import launchdescription from launch.actions import includelaunchdescription from launch.launch_description_sources import pythonlaunchdescriptionsource from launch.substitutions import pathjoinsubstitution , textsubstitution def generate_launch_description (): colors = { 'background_r' : '200' } return launchdescription ([ includelaunchdescription ( pythonlaunchdescriptionsource ([ pathjoinsubstitution ([ findpackageshare ( 'launch_tutorial' ), 'launch' , 'example_substitutions_launch.py' ]) ]), launch_arguments = { 'turtlesim_ns' : 'turtlesim2' , 'use_provided_red' : 'true' , 'new_background_r' : textsubstitution ( text = str ( colors [ 'background_r' ])) } . items () ) ]) the findpackageshare substitution is used to find the path to the launch_tutorial package. the pathjoinsubstitution substitution is then used to join the path to that package path with the example_substitutions_launch.py file name. pathjoinsubstitution ([ findpackageshare ( 'launch_tutorial' ), 'launch' , 'example_substitutions_launch.py' ]) the launch_arguments dictionary with turtlesim_ns and use_provided_red arguments is passed to the includelaunchdescription action. the textsubstitution substitution is used to define the new_background_r argument with the value of the background_r key in the colors dictionary. launch_arguments = { 'turtlesim_ns' : 'turtlesim2' , 'use_provided_red' : 'true' , 'new_background_r' : textsubstitution ( text = str ( colors [ 'background_r' ])) } . items () copy and paste the complete code into the launch/example_main_launch.yaml file: launch : - let : name : 'background_r' value : '200' - include : file : '(find-pkg-share launch_tutorial)/launch/example_substitutions_launch.yaml' arg : - name : 'turtlesim_ns' value : 'turtlesim2' - name : 'use_provided_red' value : 'true' - name : 'new_background_r' value : '(var background_r)' the (find-pkg-share launch_tutorial) substitution is used to find the path to the launch_tutorial package. the path substitution is then joined with the example_substitutions_launch.yaml file name. file : '(find-pkg-share launch_tutorial)/launch/example_substitutions_launch.yaml' the background_r variable with turtlesim_ns and use_provided_red arguments is passed to the include action. the (var background_r) substitution is used to define the new_background_r argument with the value of the background_r variable. arg : - name : 'turtlesim_ns' value : 'turtlesim2' - name : 'use_provided_red' value : 'true' - name : 'new_background_r' value : '(var background_r)' 3 substitutions example launch file ï now create the substitution launch file in the same folder: python yaml create the file launch/example_substitutions_launch.py and insert the following code: from launch_ros.actions import node from launch import launchdescription from launch.actions import declarelaunchargument , executeprocess , timeraction from launch.conditions import ifcondition from launch.substitutions import launchconfiguration , pythonexpression def generate_launch_description (): turtlesim_ns = launchconfiguration ( 'turtlesim_ns' ) use_provided_red = launchconfiguration ( 'use_provided_red' ) new_background_r = launchconfiguration ( 'new_background_r' ) turtlesim_ns_launch_arg = declarelaunchargument ( 'turtlesim_ns' , default_value = 'turtlesim1' ) use_provided_red_launch_arg = declarelaunchargument ( 'use_provided_red' , default_value = 'false' ) new_background_r_launch_arg = declarelaunchargument ( 'new_background_r' , default_value = '200' ) turtlesim_node = node ( package = 'turtlesim' , namespace = turtlesim_ns , executable = 'turtlesim_node' , name = 'sim' ) spawn_turtle = executeprocess ( cmd = [[ 'ros2 service call ' , turtlesim_ns , '/spawn ' , 'turtlesim/srv/spawn ' , '"{x: 2, y: 2, theta: 0.2}"' ]], shell = true ) change_background_r = executeprocess ( cmd = [[ 'ros2 param set ' , turtlesim_ns , '/sim background_r ' , '120' ]], shell = true ) change_background_r_conditioned = executeprocess ( condition = ifcondition ( pythonexpression ([ new_background_r , ' == 200' , ' and ' , use_provided_red ]) ), cmd = [[ 'ros2 param set ' , turtlesim_ns , '/sim background_r ' , new_background_r ]], shell = true ) return launchdescription ([ turtlesim_ns_launch_arg , use_provided_red_launch_arg , new_background_r_launch_arg , turtlesim_node , spawn_turtle , change_background_r , timeraction ( period = 2.0 , actions = [ change_background_r_conditioned ], ) ]) the turtlesim_ns , use_provided_red , and new_background_r launch configurations are defined. they are used to store values of launch arguments in the above variables and to pass them to required actions. these launchconfiguration substitutions allow us to acquire the value of the launch argument in any part of the launch description. declarelaunchargument is used to define the launch argument that can be passed from the above launch file or from the console. turtlesim_ns = launchconfiguration ( 'turtlesim_ns' ) use_provided_red = launchconfiguration ( 'use_provided_red' ) new_background_r = launchconfiguration ( 'new_background_r' ) turtlesim_ns_launch_arg = declarelaunchargument ( 'turtlesim_ns' , default_value = 'turtlesim1' ) use_provided_red_launch_arg = declarelaunchargument ( 'use_provided_red' , default_value = 'false' ) new_background_r_launch_arg = declarelaunchargument ( 'new_background_r' , default_value = '200' ) the turtlesim_node node with the namespace set to turtlesim_ns launchconfiguration substitution is defined. turtlesim_node = node ( package = 'turtlesim' , namespace = turtlesim_ns , executable = 'turtlesim_node' , name = 'sim' ) afterwards, the executeprocess action called spawn_turtle is defined with the corresponding cmd argument. this command makes a call to the spawn service of the turtlesim node. additionally, the launchconfiguration substitution is used to get the value of the turtlesim_ns launch argument to construct a command string. spawn_turtle = executeprocess ( cmd = [[ 'ros2 service call ' , turtlesim_ns , '/spawn ' , 'turtlesim/srv/spawn ' , '"{x: 2, y: 2, theta: 0.2}"' ]], shell = true ) the same approach is used for the change_background_r and change_background_r_conditioned actions that change the turtlesim backgroundâs red color parameter. the difference is that the change_background_r_conditioned action is only executed if the provided new_background_r argument equals 200 and the use_provided_red launch argument is set to true . the evaluation inside the ifcondition is done using the pythonexpression substitution. change_background_r = executeprocess ( cmd = [[ 'ros2 param set ' , turtlesim_ns , '/sim background_r ' , '120' ]], shell = true ) change_background_r_conditioned = executeprocess ( condition = ifcondition ( pythonexpression ([ new_background_r , ' == 200' , ' and ' , use_provided_red ]) ), cmd = [[ 'ros2 param set ' , turtlesim_ns , '/sim background_r ' , new_background_r ]], shell = true ) create the file launch/example_substitutions_launch.yaml and insert the following code: launch : - arg : name : 'turtlesim_ns' default : 'turtlesim1' - arg : name : 'use_provided_red' default : 'false' - arg : name : 'new_background_r' default : '200' - node : pkg : 'turtlesim' namespace : '(var turtlesim_ns)' exec : 'turtlesim_node' name : 'sim' - executable : cmd : 'ros2 service call (var turtlesim_ns)/spawn turtlesim/srv/spawn "{x: 5, y: 2, theta: 0.2}"' - executable : cmd : 'ros2 param set (var turtlesim_ns)/sim background_r 120' - timer : period : 2.0 children : - executable : cmd : 'ros2 param set (var turtlesim_ns)/sim background_r (var new_background_r)' if : '(eval "(var new_background_r) == 200 and (var use_provided_red)")' the turtlesim_ns , use_provided_red , and new_background_r launch configurations are defined. they are used to store values of launch arguments in the above variables and to pass them to required actions. the launch configuration arguments can later be used with the (var <name>) substitution to acquire the value of the launch argument in any part of the launch description. the arg tag is used to define the launch argument that can be passed from the above launch file or from the console. - arg : name : 'turtlesim_ns' default : 'turtlesim1' - arg : name : 'use_provided_red' default : 'false' - arg : name : 'new_background_r' default : '200' the turtlesim_node node with the namespace set to the turtlesim_ns launch configuration value using the (var <name>) substitution is defined. - node : pkg : 'turtlesim' namespace : '(var turtlesim_ns)' exec : 'turtlesim_node' name : 'sim' afterwards, an executable action is defined with the corresponding cmd tag. this command makes a call to the spawn service of the turtlesim node. additionally, the (var <name>) substitution is used to get the value of the turtlesim_ns launch argument to construct a command string. - executable : cmd : 'ros2 service call (var turtlesim_ns)/spawn turtlesim/srv/spawn "{x: 5, y: 2, theta: 0.2}"' the same approach is used for the ros2 param executable actions that change the turtlesim backgroundâs red color parameter. the difference is that the second action inside of the timer is only executed if the provided new_background_r argument equals 200 and the use_provided_red launch argument is set to true . the evaluation of the if predicate is done using the (eval <python-expression>) substitution. - executable : cmd : 'ros2 param set (var turtlesim_ns)/sim background_r 120' - timer : period : 2.0 children : - executable : cmd : 'ros2 param set (var turtlesim_ns)/sim background_r (var new_background_r)' if : '(eval "(var new_background_r) == 200 and (var use_provided_red)")' 4 build the package ï go to the root of the workspace, and build the package: colcon build also remember to source the workspace after building. launching example ï now you can launch using the ros2 launch command. python yaml ros2 launch launch_tutorial example_main_launch.py ros2 launch launch_tutorial example_main_launch.yaml this will do the following: start a turtlesim node with a blue background spawn the second turtle change the color to purple change the color to pink after two seconds if the provided background_r argument is 200 and use_provided_red argument is true modifying launch arguments ï python yaml if you want to change the provided launch arguments, you can either update them in launch_arguments dictionary in the example_main_launch.py or launch the example_substitutions_launch.py with preferred arguments. to see arguments that may be given to the launch file, run the following command: ros2 launch launch_tutorial example_substitutions_launch.py --show-args if you want to change the provided launch arguments, you can either update the background_r variable in the example_main_launch.yaml or launch the example_substitutions_launch.yaml with preferred arguments. to see arguments that may be given to the launch file, run the following command: ros2 launch launch_tutorial example_substitutions_launch.yaml --show-args this will show the arguments that may be given to the launch file and their default values. arguments (pass arguments as '<name>:=<value>'): 'turtlesim_ns': no description given (default: 'turtlesim1') 'use_provided_red': no description given (default: 'false') 'new_background_r': no description given (default: '200') now you can pass the desired arguments to the launch file as follows: python yaml ros2 launch launch_tutorial example_substitutions_launch.py turtlesim_ns:='turtlesim3' use_provided_red:='true' new_background_r:=200 ros2 launch launch_tutorial example_substitutions_launch.yaml turtlesim_ns:='turtlesim3' use_provided_red:='true' new_background_r:=200 documentation ï the launch documentation provides detailed information  available substitutions. summary ï in this tutorial, you learned  using substitutions in launch files. you learned  their possibilities and capabilities to create reusable launch files. you can now learn more  using event handlers in launch files which are used to define a complex set of rules which can be used to dynamically modify the launch file. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling