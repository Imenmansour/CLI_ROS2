tutorials beginner: cli tools understanding parameters edit on github understanding parameters ï goal: learn how to get, set, save and reload parameters in ros 2. tutorial level: beginner time: 5 minutes background ï a parameter is a configuration value of a node. you can think of parameters as node settings. a node can store parameters as integers, floats, booleans, strings, and lists. in ros 2, each node maintains its own parameters. for more background on parameters,  see the concept document . prerequisites ï this tutorial uses the turtlesim package . as always, donât forget to source ros 2 in every new terminal you open . tasks ï 1 setup ï start up the two turtlesim nodes, /turtlesim and /teleop_turtle . open a new terminal and run: ros2 run turtlesim turtlesim_node open another terminal and run: ros2 run turtlesim turtle_teleop_key 2 ros2 param list ï to see the parameters belonging to your nodes, open a new terminal and enter the command: ros2 param list you will see the node namespaces, /teleop_turtle and /turtlesim , followed by each nodeâs parameters: /teleop_turtle: qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability scale_angular scale_linear use_sim_time /turtlesim: background_b background_g background_r qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability use_sim_time every node has the parameter use_sim_time ; itâs not unique to turtlesim. based on their names, it looks like /turtlesim âs parameters determine the background color of the turtlesim window using rgb color values. to determine a parameterâs type, you can use ros2 param get . 3 ros2 param get ï to display the type and current value of a parameter, use the command: ros2 param get <node_name> <parameter_name> letâs find out the current value of /turtlesim âs parameter background_g : ros2 param get /turtlesim background_g which will return the value: integer value is: 86 now you know background_g holds an integer value. if you run the same command on background_r and background_b , you will get the values 69 and 255 , respectively. 4 ros2 param set ï to change a parameterâs value at runtime, use the command: ros2 param set <node_name> <parameter_name> <value> letâs change /turtlesim âs background color: ros2 param set /turtlesim background_r 150 your terminal should return the message: set parameter successful and the background of your turtlesim window should change colors: setting parameters with the set command will only change them in your current session, not permanently. however, you can save your settings and reload them the next time you start a node. 5 ros2 param dump ï you can view all of a nodeâs current parameter values by using the command: ros2 param dump <node_name> the command prints to the standard output (stdout) by default but you can also redirect the parameter values into a file to save them for later. to save your current configuration of /turtlesim âs parameters into the file turtlesim.yaml , enter the command: ros2 param dump /turtlesim > turtlesim.yaml you will find a new file in the current working directory your shell is running in. if you open this file, youâll see the following content: /turtlesim : ros__parameters : background_b : 255 background_g : 86 background_r : 150 qos_overrides : /parameter_events : publisher : depth : 1000 durability : volatile history : keep_last reliability : reliable use_sim_time : false dumping parameters comes in handy if you want to reload the node with the same parameters in the future. 6 ros2 param load ï you can load parameters from a file to a currently running node using the command: ros2 param load <node_name> <parameter_file> to load the turtlesim.yaml file generated with ros2 param dump into /turtlesim nodeâs parameters, enter the command: ros2 param load /turtlesim turtlesim.yaml your terminal will return the message: set parameter background_b successful set parameter background_g successful set parameter background_r successful set parameter qos_overrides./parameter_events.publisher.depth failed: parameter 'qos_overrides./parameter_events.publisher.depth' cannot be set because it is read-only set parameter qos_overrides./parameter_events.publisher.durability failed: parameter 'qos_overrides./parameter_events.publisher.durability' cannot be set because it is read-only set parameter qos_overrides./parameter_events.publisher.history failed: parameter 'qos_overrides./parameter_events.publisher.history' cannot be set because it is read-only set parameter qos_overrides./parameter_events.publisher.reliability failed: parameter 'qos_overrides./parameter_events.publisher.reliability' cannot be set because it is read-only set parameter use_sim_time successful note read-only parameters can only be modified at startup and not afterwards, that is why there are some warnings for the âqos_overridesâ parameters. 7 load parameter file on node startup ï to start the same node using your saved parameter values, use: ros2 run <package_name> <executable_name> --ros-args --params-file <file_name> this is the same command you always use to start turtlesim, with the added flags --ros-args and --params-file , followed by the file you want to load. stop your running turtlesim node, and try reloading it with your saved parameters, using: ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml the turtlesim window should appear as usual, but with the purple background you set earlier. note when a parameter file is used at node startup, all parameters, including the read-only ones, will be updated. summary ï nodes have parameters to define their default configuration values. you can get and set parameter values from the command line. you can also save the parameter settings to a file to reload them in a future session. next steps ï jumping back to ros 2 communication methods, in the next tutorial youâll learn  actions . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling