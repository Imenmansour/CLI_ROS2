tutorials intermediate testing writing basic tests with python edit on github writing basic tests with python ï starting point: weâll assume you have a basic ament_python package set up already and you want to add some tests to it. if you are using ament_cmake_python, refer to the the ament_cmake_python docs for how to make tests dicoverable. the test contents and invocation with colcon remain the same. package setup ï setup.py ï your setup.py must have a test dependency on pytest within the call to setup(...) : tests_require = [ 'pytest' ], test files and folders ï your test code needs to go in a folder named tests in the root of your package. any file that contains tests that you want to run must have the pattern test_foo.py where foo can be replaced with anything. example package layout: ï awesome_ros_package / awesome_ros_package / __init__ . py fozzie . py package . xml setup . cfg setup . py tests / test_init . py test_ . py test_fozzie . py test contents ï you can now write tests to your heartâs content. there are plenty of resources on pytest , but in short, you can write functions with the test_ prefix and include whatever assert statements youâd like. def test_math (): assert 2 + 2 == 5 # this should fail for most mathematical systems running tests ï see the tutorial on how to run tests from the command line for more information on running the tests and inspecting the test results. special commands ï beyond the standard colcon testing commands you can also specify arguments to the pytest framework from the command line with the --pytest-args flag. for example, you can specify the name of the function to run with colcon test --packages-select <name-of-pkg> --pytest-args -k name_of_the_test_function to see the pytest output while running the tests, use these flags: colcon test --event-handlers console_cohesion+ other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling