how-to guides migrating from ros 1 to ros 2 migrating launch files edit on github migrating launch files ï while launch files in ros 1 are always specified using .xml files, ros 2 supports python scripts to enable more flexibility (see launch package ) as well as xml and yaml files. this guide describes how to write ros 2 xml launch files for an easy migration from ros 1. background ï a description of the ros 2 launch system and its python api can be found in launch system tutorial . migrating tags ï launch ï available in ros 1 . launch is the root element of any ros 2 launch xml file. node ï available in ros 1 . launches a new node. differences from ros 1: type attribute is now exec . ns attribute is now namespace . the following attributes arenât available: machine , respawn_delay , clear_params . example ï <launch> <node pkg= "demo_nodes_cpp" exec= "talker" /> <node pkg= "demo_nodes_cpp" exec= "listener" /> </launch> param ï available in ros 1 . used for passing a parameter to a node. thereâs no global parameter concept in ros 2. for that reason, it can only be used nested in a node tag. some attributes arenât supported in ros 2: type , textfile , binfile , executable . the command attribute is now value="(command '...' )" . example ï <launch> <node pkg= "demo_nodes_cpp" exec= "parameter_event" > <param name= "foo" value= "5" /> </node> </launch> type inference rules ï here are some examples of how to write parameters: <node pkg= "my_package" exec= "my_executable" name= "my_node" > <!--a string parameter with value "1"--> <param name= "a_string" value= "'1'" /> <!--a integer parameter with value 1--> <param name= "an_int" value= "1" /> <!--a float parameter with value 1.0--> <param name= "a_float" value= "1.0" /> <!--a string parameter with value "asd"--> <param name= "another_string" value= "asd" /> <!--another string parameter, with value "asd"--> <param name= "string_with_same_value_as_above" value= "'asd'" /> <!--another string parameter, with value "'asd'"--> <param name= "quoted_string" value= "\'asd\'" /> <!--a list of strings, with value ["asd", "bsd", "csd"]--> <param name= "list_of_strings" value= "asd, bsd, csd" value-sep= ", " /> <!--a list of ints, with value [1, 2, 3]--> <param name= "list_of_ints" value= "1,2,3" value-sep= "," /> <!--another list of strings, with value ["1", "2", "3"]--> <param name= "another_list_of_strings" value= "'1';'2';'3'" value-sep= ";" /> <!--a list of strings using an strange separator, with value ["1", "2", "3"]--> <param name= "strange_separator" value= "'1'//'2'//'3'" value-sep= "//" /> </node> parameter grouping ï in ros 2, param tags are allowed to be nested. for example: <node pkg= "my_package" exec= "my_executable" name= "my_node" ns= "/an_absoulute_ns" > <param name= "group1" > <param name= "group2" > <param name= "my_param" value= "1" /> </param> <param name= "another_param" value= "2" /> </param> </node> that will create two parameters: a group1.group2.my_param of value 1 , hosted by node /an_absolute_ns/my_node . a group1.another_param of value 2 hosted by node /an_absolute_ns/my_node . itâs also possible to use full parameter names: <node pkg= "my_package" exec= "my_executable" name= "my_node" ns= "/an_absoulute_ns" > <param name= "group1.group2.my_param" value= "1" /> <param name= "group1.another_param" value= "2" /> </node> rosparam ï available in ros 1 . loads parameters from a yaml file. it has been replaced with a from attribute in param tags. example ï <node pkg= "my_package" exec= "my_executable" name= "my_node" ns= "/an_absoulute_ns" > <param from= "/path/to/file" /> </node> remap ï available in ros 1 . used to pass remapping rules to a node. it can only be used within node tags. example ï <launch> <node pkg= "demo_nodes_cpp" exec= "talker" > <remap from= "chatter" to= "my_topic" /> </node> <node pkg= "demo_nodes_cpp" exec= "listener" > <remap from= "chatter" to= "my_topic" /> </node> </launch> include ï available in ros 1 . allows including another launch file. differences from ros 1: available in ros 1, included content was scoped. in ros 2, itâs not. nest includes in group tags to scope them. ns attribute is not supported. see example of push_ros_namespace tag for a workaround. arg tags nested in an include tag donât support conditionals ( if , unless ) or the description attribute. there is no support for nested env tags. set_env and unset_env can be used instead. both clear_params and pass_all_args attributes arenât supported. examples ï see replacing an include tag . arg ï available in ros 1 . arg is used for declaring a launch argument, or to pass an argument when using include tags. differences from ros 1: value attribute is not allowed. use let tag for this. doc is now description . when nested within an include tag, if , unless , and description attributes arenât allowed. example ï <launch> <arg name= "topic_name" default= "chatter" /> <node pkg= "demo_nodes_cpp" exec= "talker" > <remap from= "chatter" to= "(var topic_name)" /> </node> <node pkg= "demo_nodes_cpp" exec= "listener" > <remap from= "chatter" to= "(var topic_name)" /> </node> </launch> passing an argument to the launch file ï in the xml launch file above, the topic_name defaults to the name chatter , but can be configured on the command-line. assuming the above launch configuration is in a file named mylaunch.xml , a different topic name can be used by launching it with the following: ros2 launch mylaunch.xml topic_name: = custom_topic_name there is some additional information  passing command-line arguments in using substitutions . env ï available in ros 1 . sets an environment variable. it has been replaced with env , set_env and unset_env : env can only be used nested in a node or executable tag. if and unless tags arenât supported. set_env can be nested within the root tag launch or in group tags. it accepts the same attributes as env , and also if and unless tags. unset_env unsets an environment variable. it accepts a name attribute and conditionals. example ï <launch> <set_env name= "my_env_var" value= "my_value" if= "condition_a" /> <set_env name= "another_env_var" value= "another_value" unless= "condition_b" /> <set_env name= "some_env_var" value= "some_value" /> <node pkg= "my_package" exec= "my_executable" name= "my_node" > <env name= "node_env_var" value= "some_value" /> </node> <unset_env name= "my_env_var" if= "condition_a" /> <node pkg= "another_package" exec= "another_executable" name= "another_node" /> <unset_env name= "another_env_var" unless= "condition_b" /> <unset_env name= "some_env_var" /> </launch> group ï available in ros 1 . allows limiting the scope of launch configurations. usually used together with let , include and push_ros_namespace tags. differences from ros 1: there is no ns attribute. see the new push_ros_namespace tag as a workaround. clear_params attribute isnât available. it doesnât accept remap nor param tags as children. example ï launch-prefix configuration affects both executable and node tagsâ actions. this example will use time as a prefix if use_time_prefix_in_talker argument is 1 , only for the talker. <launch> <arg name= "use_time_prefix_in_talker" default= "0" /> <group> <let name= "launch-prefix" value= "time" if= "(var use_time_prefix_in_talker)" /> <node pkg= "demo_nodes_cpp" exec= "talker" /> </group> <node pkg= "demo_nodes_cpp" exec= "listener" /> </launch> machine ï it is not supported at the moment. test ï it is not supported at the moment. new tags in ros 2 ï set_env and unset_env ï see env tag decription. push_ros_namespace ï include and group tags donât accept an ns attribute. this action can be used as a workaround: <!-other tags--> <group> <push_ros_namespace namespace= "my_ns" /> <!--nodes here are namespaced with "my_ns".--> <!--if there is an include action here, its nodes will also be namespaced.--> <push_ros_namespace namespace= "another_ns" /> <!--nodes here are namespaced with "another_ns/my_ns".--> <push_ros_namespace namespace= "/absolute_ns" /> <!--nodes here are namespaced with "/absolute_ns".--> <!--the following node receives an absolute namespace, so it will ignore the others previously pushed.--> <!--the full path of the node will be /asd/my_node.--> <node pkg= "my_pkg" exec= "my_executable" name= "my_node" ns= "/asd" /> </group> <!--nodes outside the group action won't be namespaced.--> <!-other tags--> let ï itâs a replacement of arg tag with a value attribute. <let name= "foo" value= "asd" /> executable ï it allows running any executable. example ï <executable cmd= "ls -las" cwd= "/var/log" name= "my_exec" launch-prefix= "something" output= "screen" shell= "true" > <env name= "ld_library" value= "/lib/some.so" /> </executable> replacing an include tag ï in order to include a launch file under a namespace as in ros 1 then the include tags must be nested in a group tag. <group> <include file= "another_launch_file" /> </group> then, instead of using the ns attribute, add the push_ros_namespace action tag to specify the namespace: <group> <push_ros_namespace namespace= "my_ns" /> <include file= "another_launch_file" /> </group> nesting include tags under a group tag is only required when specifying a namespace substitutions ï documentation  ros 1âs substitutions can be found in roslaunch xml wiki . substitutions syntax hasnât changed, i.e. it still follows the (substitution-name arg1 arg2 ...) pattern. there are, however, some changes w.r.t. ros 1: env and optenv tags have been replaced by the env tag. (env <name>) will fail if the environment variable doesnât exist. (env <name> '') does the same as ros 1âs (optenv <name>) . (env <name> <default>) does the same as ros 1âs (env <name> <default>) or (optenv <name> <default>) . find has been replaced with find-pkg-share (substituting the share directory of an installed package). alternatively find-pkg-prefix will return the root of an installed package. there is a new exec-in-pkg substitution. e.g.: (exec-in-pkg <package_name> <exec_name>) . there is a new find-exec substitution. arg has been replaced with var . it looks at configurations defined either with arg or let tag. eval and dirname substitutions require escape characters for string values, e.g. if="(eval '\'(var variable)\' == \'val1\'')" . anon substitution is not supported. type inference rules ï the rules that were shown in type inference rules subsection of param tag applies to any attribute. for example: <!--setting a string value to an attribute expecting an int will raise an error.--> <tag1 attr-expecting-an-int= "'1'" /> <!--correct version.--> <tag1 attr-expecting-an-int= "1" /> <!--setting an integer in an attribute expecting a string will raise an error.--> <tag2 attr-expecting-a-str= "1" /> <!--correct version.--> <tag2 attr-expecting-a-str= "'1'" /> <!--setting a list of strings in an attribute expecting a string will raise an error.--> <tag3 attr-expecting-a-str= "asd, bsd" str-attr-sep= ", " /> <!--correct version.--> <tag3 attr-expecting-a-str= "don't use a separator" /> some attributes accept more than a single type, for example value attribute of param tag. itâs usual that parameters that are of type int (or float ) also accept an str , that will be later substituted and tried to convert to an int (or float ) by the action. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling