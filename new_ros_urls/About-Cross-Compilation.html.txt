concepts intermediate concepts cross-compilation edit on github cross-compilation 誰 overview 誰 open robotics provides pre-built ros 2 packages for multiple platforms, but a number of developers still rely on cross-compilation for different reasons such as: the development machine does not match the target system. tuning the build for specific core architecture (e.g. setting -mcpu=cortex-a53 -mfpu=neon-fp-armv8 when building for raspberry pi3). targeting a file system other than the ones supported by the pre-built images released by open robotics. how does it work ? 誰 cross-compiling simple software (e.g. no dependencies on external libraries) is relatively simple and only requiring a cross-compiler toolchain to be used instead of the native toolchain. there are a number of factors which make this process more complex: the software being built must support the target architecture. architecture specific code must be properly isolated and enabled during the build according to the target architecture. examples include assembly code. all dependencies (e.g. libraries) must be present, either as pre-built or cross-compiled packages, before the target software using them is cross-compiled. when building software stacks (as opposed to standalone software) using build tools (e.g. colcon), it is expected that the build tool provides a mechanism to allow the developer to enable cross-compilation on the underlying build system used by each piece of software in the stack. alternatives 誰 an alternative to cross-compilation is to build multi-platform docker images using docker buildx . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling