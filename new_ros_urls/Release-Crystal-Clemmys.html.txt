distributions end-of-life distributions crystal clemmys ( crystal ) edit on github crystal clemmys ( crystal ) ï crystal clemmys is the third release of ros 2. supported platforms ï crystal clemmys is primarily supported on the following platforms (see rep 2000 for full details): tier 1 platforms: ubuntu 18.04 (bionic) mac macos 10.12 (sierra) windows 10 tier 2 platforms: ubuntu 16.04 (xenial) new features in this ros 2 release ï actions in c / c++ ( server / client examples) gazebo_ros_pkgs image_transport navigation2 rosbag2 rqt improvement in memory management introspection information  nodes launch system improvements arguments nested launch files conditions pass params to nodes laid the groundwork for file-based logging and /rosout publishing time and duration api in python parameters work with python nodes changes since the bouncy release ï changes since the bouncy bolson release: geometry2 - tf2_ros::buffer api change tf2_ros::buffer now uses rclcpp::time , with the constructor requiring a shared_ptr to a rclcpp::clock instance. see https://github.com/ros2/geometry2/pull/67 for details, with example usage: #include <tf2_ros/transform_listener.h> #include <rclcpp/rclcpp.hpp> ... # assuming you have a rclcpp::node my_node tf2_ros :: buffer buffer ( my_node . get_clock ()); tf2_ros :: transformlistener tf_listener ( buffer ); all rclcpp and rcutils logging macros require semicolons. see https://github.com/ros2/rcutils/issues/113 for details. rcutils_get_error_string_safe() and rcl_get_error_string_safe() have been replaced with rcutils_get_error_string().str and rcl_get_error_string().str . see https://github.com/ros2/rcutils/pull/121 for details. rmw - rmw_init api change there are two new structs, the rcl_context_t and the rcl_init_options_t , which are used with rmw_init . the init options struct is used to pass options down to the middleware and is an input to rmw_init . the context is a handle which is an output of rmw_init function is used to identify which init-shutdown cycle each entity is associated with, where an âentityâ is anything created like a node, guard condition, etc. this is listed here because maintainers of alternative rmw implementations will need to implement these new functions to have their rmw implementation work in crystal. this is the function that had a signature change: rmw_init additionally, there are these new functions which need to be implemented by each rmw implementation: rmw_shutdown rmw_init_options_init rmw_init_options_copy rmw_init_options_fini hereâs an example of what minimally needs to be changed in an rmw implementation to adhere to this api change: rmw_fastrtps pr rcl - rcl_init api change like the rmw change above, thereâs two new structs in rcl called rcl_context_t and rcl_init_options_t . the init options are passed into rcl_init as an input and the context is passed in as an output. the context is used to associate all other rcl entities to a specific init-shutdown cycle, effectively making init and shutdown no longer global functions, or rather those functions no longer use an global state and instead encapsulate all state within the context type. any maintainers of a client library implementation (that also uses rcl under the hood) will need to make changes to work with crystal. these functions were removed: rcl_get_global_arguments rcl_get_instance_id rcl_ok these functions had signature changes: rcl_init rcl_shutdown rcl_guard_condition_init rcl_guard_condition_init_from_rmw rcl_node_init rcl_timer_init these are the new functions and types: rcl_context_t rcl_get_zero_initialized_context rcl_context_fini rcl_context_get_init_options rcl_context_get_instance_id rcl_context_is_valid rcl_init_options_t rcl_get_zero_initialized_init_options rcl_init_options_init rcl_init_options_copy rcl_init_options_fini rcl_init_options_get_rmw_init_options rcl_node_is_valid_except_context rcl_publisher_get_context rcl_publisher_is_valid_except_context these new and changed functions will impact how you handle init and shutdown in your client library. for examples, look at the following rclcpp and rclpy prâs: rclcpp rclpy however, you may just continue to offer a single, global init and shutdown in your client library, and just store a single global context object. known issues ï a race condition in fast-rtps 1.7.0 may cause messages to drop under stress ( issue ). using the transient_local qos setting with rmw_fastrtps_cpp can crash applications with large messages ( issue ). cross-vendor communication between rmw_fastrtps_cpp and other implementations is not functioning on windows ( issue ). when using opensplice (version < 6.9.190227) on macos and windows you might experience naming conflicts when when referencing field types with names from other packages if the same name also exist in the current package ( issue ). by updating to a newer opensplice version as well as at least the third patch release of crystal the problem should be resolved. on linux updating to the latest debian packages will include the newest opensplice version. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling