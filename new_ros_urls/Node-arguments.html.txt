how-to guides passing ros arguments to nodes via the command-line edit on github passing ros arguments to nodes via the command-line ï all ros nodes take a set of arguments that allow various properties to be reconfigured. examples include configuring the name/namespace of the node, topic/service names used, and parameters on the node. all ros-specific arguments have to be specified after a --ros-args flag: ros2 run my_package node_executable --ros-args ... for more details, see this design doc . name remapping ï names within a node (e.g. topics/services) can be remapped using the syntax -r <old name>:=<new name> . the name/namespace of the node itself can be remapped using -r __node:=<new node name> and -r __ns:=<new node namespace> . note that these remappings are âstaticâ remappings, in that they apply for the lifetime of the node. âdynamicâ remapping of names after nodes have been started is not yet supported. see this design doc for more details on remapping arguments (not all functionality is available yet). example ï the following invocation will cause the talker node to be started under the node name my_talker , publishing on the topic named my_topic instead of the default of chatter . the namespace, which must start with a forward slash, is set to /demo , which means that topics are created in that namespace ( /demo/my_topic ), as opposed to globally ( /my_topic ). ros2 run demo_nodes_cpp talker --ros-args -r __ns: = /demo -r __node: = my_talker -r chatter: = my_topic passing remapping arguments to specific nodes ï if multiple nodes are being run within a single process (e.g. using composition ), remapping arguments can be passed to a specific node using its name as a prefix. for example, the following will pass the remapping arguments to the specified nodes: ros2 run composition manual_composition --ros-args -r talker:__node: = my_talker -r listener:__node: = my_listener the following example will both change the node name and remap a topic (node and namespace changes are always applied before topic remapping): ros2 run composition manual_composition --ros-args -r talker:__node: = my_talker -r my_talker:chatter: = my_topic -r listener:__node: = my_listener -r my_listener:chatter: = my_topic logger configuration ï the per-node logging level can be specified using the --log-level command line argument. the executable log file name prefix, which includes all nodes in the executable, can be specified using --log-file-name command line argument. for more information  see the logging page . parameters ï setting parameters directly from the command line ï you can set parameters directly from the command line using the following syntax: ros2 run package_name executable_name --ros-args -p param_name: = param_value as an example, you can run: ros2 run demo_nodes_cpp parameter_blackboard --ros-args -p some_int: = 42 -p "a_string:=hello world" -p "some_lists.some_integers:=[1, 2, 3, 4]" -p "some_lists.some_doubles:=[3.14, 2.718]" other nodes will be able to retrieve the parameter values, e.g.:  ros2 param list parameter_blackboard a_string qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability some_int some_lists.some_doubles some_lists.some_integers use_sim_time setting parameters from yaml files ï parameters can be set from the command-line in the form of yaml files. see here for examples of the yaml file syntax. as an example, save the following as demo_params.yaml : parameter_blackboard : ros__parameters : some_int : 42 a_string : "hello world" some_lists : some_integers : [ 1 , 2 , 3 , 4 ] some_doubles : [ 3.14 , 2.718 ] then either declare the parameters within your node with declare_parameter or declare_parameters , or set the node to automatically declare parameters if they were passed in via a command line override. then run the following: ros2 run demo_nodes_cpp parameter_blackboard --ros-args --params-file demo_params.yaml other nodes will be able to retrieve the parameter values, e.g.:  ros2 param list parameter_blackboard a_string qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability some_int some_lists.some_doubles some_lists.some_integers use_sim_time other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling