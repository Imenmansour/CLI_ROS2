how-to guides releasing a package index your packages edit on github index your packages ï are you releasing a new ros package into a ros distribution? make the process faster by indexing your packages first. put your ros packages into a public repository ï if you havenât done so already, put the source code of your ros packages into a public git repository. all packages released into ros must be open source. you can host code anywhere, but github is recommended because it gives you the option to enable pull request jobs. here are some choices: github recommended gitlab bitbucket give your packages an osi approved license ï choose an osi approved license and give it to your ros packages. if youâre having trouble deciding, consider using the license used by most of the core ros 2 packages: apache-2.0 license . for each package.xml in your repository, put the spdx short identifier of the license in the <license> tag in your package.xml . if all of your ros packages have the same license, or if thereâs only one ros package in your repository, create a file called license at the root of your repository and put the text of the license you chose in it. if the ros packages in your repository have different licenses, create a license file adjacent to every package.xml file. give your packages rep 144 compliant names ï packages released into a ros distribution must have names that comply with rep 144 . read the full rep to understand the rules. if one of your ros package names doesnât comply, then change the name before continuing. decide what ros distribution you want to release into ï decide what ros distribution you want to release your packages into. at a minimum, you should release your packages into ros rolling so that your ros packages are automatically included in the next ros release. you may also want to release into any active ros distributions, but this is up to you. create a github account ï create a github account if you donât already have one. you donât have to host the source code of your ros packages on github, but you will need an account to index and release packages. fork and clone ros/rosdistro ï fork the ros/rosdistro repository. you only need to do this step once on your account. the fork will be used every time you do a release. make changes to your fork ï remember the ros distributions you decided to release into? each ros distribution has a folder in the ros/rosdistro repository. for example, the name of the ros rolling folder is rolling . for each ros distribution you want to release into: fill out the following template put the filled-out template into the distribution.yaml file in the corresponding ros distributionâs folder your-repo-name : source : type : git url : https://your-git-repo-url.git version : your-branch-name status : your-status hereâs how to fill out each item: your-repo-name: this is an arbitrary human-readable name. for repos hosted on github, use the lowercase name of your repository not including the organization. for example, the repository name of https://github.com/ros2/rosidl is rosidl . your-git-repo-url: this is the https url from which one could git clone your repository. for example, the git repo url of https://github.com/ros2/rosidl is https://github.com/ros2/rosidl.git . it is important that this url ends in .git , or it will fail to pass the linters. your-branch-name: this is the git branch on your repository from which you will release your package into this ros distribution. this is commonly one of: main , master , or the name of the ros distribution itself. for example, the rosidl repository uses the branch rolling to hold changes to be released into ros rolling. your-status: this is a status from the list in rep 141 . you likely want either maintained or developed . open a pull request to ros/rosdistro ï open a pull request to ros/rosdistro with the branch that you made your changes to. wait a few days for it to be reviewed. what happens next ï youâve now done everything required to index your ros packages. one of the reviewers will look at your pull request and decide if it satisfies the review guidelines . the reviewer may either approve your changes as is, or give you actionable feedback. once the pull request meets the review guidelines it will be merged, and your packages will appear on the ros index . youâve completed an important step toward releasing your package. proceed to the next guide: first time release . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling