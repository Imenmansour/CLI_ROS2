tutorials miscellaneous deploying on ibm cloud kubernetes [community-contributed] edit on github deploying on ibm cloud kubernetes [community-contributed] ï  ï this article describes how to get ros 2 running on ibm cloud using docker files. it first gives a brief overview of docker images and how they work locally and then explores ibm cloud and how the user can deploy their containers on it. afterwards, a short description of how the user can use their own custom packages for ros 2 from github on ibm cloud is provided. a walkthrough of how to create a cluster and utilize kubernetes on ibm cloud is provided and finally the docker image is deployed on the cluster. originally published here and here . ros 2 on ibm cloud ï in this tutorial, we show how you can easily integrate and run ros 2 on ibm cloud with your custom packages. ros 2 is the new generation of ros which gives more control over multi-robot formations. with the advancements of cloud computing, cloud robotics are becoming more important in todayâs age. in this tutorial, we will go through a short introduction on running ros 2 on ibm cloud. by the end of the tutorial, you will be able to create your own packages in ros 2 and deploy them to the cloud using docker files. the following instructions assume youâre using linux and have been tested with ubuntu 18.04 (bionic beaver). step 1: setting up yourâ system ï before we go into how the exact process works, lets first make sure all the required software is properly installed. weâll point you towards the appropriate sources to set up your system and only highlight the details that pertain to our use-case. a) dockerâ files? ï docker files are a form of containers that can run separate from your system, this way, you can set-up potentially hundreds of different projects without affecting one another. you can even set-up different versions of linux on one machine, without the need for virtual machine. docker files have an advantage of saving space and only utilizing your system resources when running. in addition, dockers are versatile and transferable. they contain all the required pre-requisites to run separately, meaning that you can easily use a docker file for a specific system or service without any cubersome steps! excited yet? letâs start off by installing docker to your system by following the following link . from the tutorial, you should have done some sanity checks to make sure docker is properly set-up. just in case, however, letâs run the following command once again that uses the hello-world docker image:  sudo docker run hello-world you should obtain the following output: hello from docker! this message shows that your installation appears to be working correctly. to generate this message, docker took the following steps: 1 . the docker client ed the docker daemon. 2 . the docker daemon pulled the "hello-world" image from the docker hub. ( amd64 ) 3 . the docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4 . the docker daemon streamed that output to the docker client, which sent it to your terminal. to try something more ambitious, you can run an ubuntu container with:  docker run -it ubuntu bash share images, automate workflows, and more with a free docker id: https://hub.docker.com/ for more examples and ideas, visit: https://docs.docker.com/get-started/ b) ros 2 image ï ros announced image containers for several ros distributions in january 2019. more detailed instructions on the use of ros 2 docker images can be found here . letâs skip through that and get to real-deal right away; creating a local ros 2 docker. weâll create our own dockerfile (instead of using a ready image) since weâll need this method for deployment on ibm cloud. first, we create a new directory which will hold our dockerfile and any other files we need later on and navigate to it. using your favorite editor of choice, open a new file named dockerfile (make sure the file naming is correct):  mkdir ~/ros2_docker  cd ~/ros2_docker  editor dockerfile insert the following in the dockerfile , and save it (also found here ): from ros:foxy # install ros package run apt-get update && apt-get install -y \ ros- { ros_distro } -demo-nodes-cpp \ ros- { ros_distro } -demo-nodes-py && \ rm -rf /var/lib/apt/lists/* && mkdir /ros2_home workdir /ros2_home # launch ros package cmd [ "ros2" , "launch" , "demo_nodes_cpp" , "talker_listener_launch.py" ] from : creates a layer from the ros:foxy docker image run : builds your container by installing vim into it and creating a directory called /ros2_home workdir : informs the container where the working directory should be for it of course, you are free to change the ros distribution ( foxy is used here) or change the directory name. the above docker file sets up ros-foxy and installs the demo nodes for c++ and python. then it launches a file which runs a talker and a listener node. we will see it in action in just a few, but they act very similar to the publisher-subscriber example found in the ros wiki now, we are ready to build the docker image to run ros 2 in it (yes, it is that easy!). note : if you have errors due to insufficient privileges or permission denied , try running the command with sudo privileges:  docker build . # you will see a bunch of lines that execute the docker file instructions followed by: successfully built 0dc6ce7cb487 0dc6ce7cb487 will most probably be different for you, so keep note of it and copy it somewhere for reference. you can always go back and check the docker images you have on your system using:  sudo docker ps -as now, run the docker file using:  docker run -it 0dc6ce7cb487 [ info ] [ launch ] : all log files can be found below /root/.ros/log/2020-10-28-02-41-45-177546-0b5d9ed123be-1 [ info ] [ launch ] : default logging verbosity is set to info [ info ] [ talker-1 ] : process started with pid [ 28 ] [ info ] [ listener-2 ] : process started with pid [ 30 ] [ talker-1 ] [ info ] [ 1603852907 .249886590 ] [ talker ] : publishing: 'hello world: 1' [ listener-2 ] [ info ] [ 1603852907 .250964490 ] [ listener ] : i heard: [ hello world: 1 ] [ talker-1 ] [ info ] [ 1603852908 .249786312 ] [ talker ] : publishing: 'hello world: 2' [ listener-2 ] [ info ] [ 1603852908 .250453386 ] [ listener ] : i heard: [ hello world: 2 ] [ talker-1 ] [ info ] [ 1603852909 .249882257 ] [ talker ] : publishing: 'hello world: 3' [ listener-2 ] [ info ] [ 1603852909 .250536089 ] [ listener ] : i heard: [ hello world: 3 ] [ talker-1 ] [ info ] [ 1603852910 .249845718 ] [ talker ] : publishing: 'hello world: 4' [ listener-2 ] [ info ] [ 1603852910 .250509355 ] [ listener ] : i heard: [ hello world: 4 ] [ talker-1 ] [ info ] [ 1603852911 .249506058 ] [ talker ] : publishing: 'hello world: 5' [ listener-2 ] [ info ] [ 1603852911 .250152324 ] [ listener ] : i heard: [ hello world: 5 ] [ talker-1 ] [ info ] [ 1603852912 .249556670 ] [ talker ] : publishing: 'hello world: 6' [ listener-2 ] [ info ] [ 1603852912 .250212678 ] [ listener ] : i heard: [ hello world: 6 ] if it works correctly, you should see something similar to what is shown above. as can be seen, there are two ros nodes (a publisher and a subscriber) running and their output is provided to us through ros info. step 2: running the image on ibm cloud ï the following steps assume you have an ibm cloud account and have ibmcloud cli installed. if not,  check this link out to get that done first. we also need to make sure that the cli plug-in for the ibm cloud container registry is installed by running the command  ibmcloud plugin install container-registry afterwards, login to your ibmcloud account through the terminal:  ibmcloud login --sso from here, letâs create a container registry name-space. make sure you use a unique name that is also descriptive as to what it is. here, i used ros2nasr .  ibmcloud cr namespace-add ros2nasr ibm cloud has a lot of shortcuts that would help us get our container onto the cloud right away. the command below builds the container and tags it with the name ros2foxy and the version of 1 . make sure you use the correct registry name you created and you are free to change the container name as you wish. the . at the end indicates that the dockerfile is in the current directory (and it is important), if not, change it to point to the directory containing the dockerfile.  ibmcloud cr build --tag registry.bluemix.net/ros2nasr/ros2foxy:1 . you can now make sure that the container has been pushed to the registry you created by running the following command  ibmcloud cr image-list listing images... repository tag digest namespace created size security status us.icr.io/ros2nasr/ros2foxy 1 031be29301e6 ros2nasr 36 seconds ago 120 mb no issues ok next, it is important to log-in to your registry to run the docker image. again, if you face a permission denied error, perform the command with sudo privileges. afterwards, run your docker file as shown below.  ibmcloud cr login logging in to 'registry.ng.bluemix.net' ... logged in to 'registry.ng.bluemix.net' . logging in to 'us.icr.io' ... logged in to 'us.icr.io' . ok  docker run -v -it registry.ng.bluemix.net/ros2nasr/ros2foxy:1 where ros2nasr is the name of the registry you created and ros2foxy:1 is the tag of the docker container and the version as explained previously. you should now see your docker file running and providing similar output to that you saw when you ran it locally on your machine. step 3: using custom ros 2 packages ï so now we have the full pipeline working, from creating the dockerfile, all the way to deploying it and seeing it work on ibm cloud. but, what if we want to use a custom set of packages we (or someone else) created? well that all has to do with how you set-up your dockerfile. lets use the example provided by ros 2 here . create a new directory with a new dockerfile (or overwrite the existing one) and add the following in it (or download the file here ) arg from_image = ros:foxy arg overlay_ws = /opt/ros/overlay_ws # multi-stage for caching from from_image as cacher # clone overlay source arg overlay_ws workdir overlay_ws /src run echo "\ repositories: \n\ ros2/demos: \n\ type: git \n\ url: https://github.com/ros2/demos.git \n\ version: { ros_distro } \n\ " > ../overlay.repos run vcs import ./ < ../overlay.repos # copy manifests for caching workdir /opt run mkdir -p /tmp/opt && \ find ./ -name "package.xml" | \ xargs cp --parents -t /tmp/opt && \ find ./ -name "colcon_ignore" | \ xargs cp --parents -t /tmp/opt || true # multi-stage for building from from_image as builder # install overlay dependencies arg overlay_ws workdir overlay_ws copy --from = cacher /tmp/ overlay_ws /src ./src run . /opt/ros/ ros_distro /setup.sh && \ apt-get update && rosdep install -y \ --from-paths \ src/ros2/demos/demo_nodes_cpp \ src/ros2/demos/demo_nodes_py \ --ignore-src \ && rm -rf /var/lib/apt/lists/* # build overlay source copy --from = cacher overlay_ws /src ./src arg overlay_mixins = "release" run . /opt/ros/ ros_distro /setup.sh && \ colcon build \ --packages-select \ demo_nodes_cpp \ demo_nodes_py \ --mixin overlay_mixins # source entrypoint setup env overlay_ws overlay_ws run sed --in-place --expression \ 'isource "overlay_ws/install/setup.bash"' \ /ros_entrypoint.sh # run launch file cmd [ "ros2" , "launch" , "demo_nodes_cpp" , "talker_listener_launch.py" ] going through the lines shown, we can see how we can add custom packages from github in 4 steps: create an overlay with custom packages cloned from github: arg overlay_ws workdir overlay_ws /src run echo "\ repositories: \n\ ros2/demos: \n\ type: git \n\ url: https://github.com/ros2/demos.git \n\ version: { ros_distro } \n\ " > ../overlay.repos run vcs import ./ < ../overlay.repos install package dependencies using rosdep # install overlay dependencies arg overlay_ws workdir overlay_ws copy --from = cacher /tmp/ overlay_ws /src ./src run . /opt/ros/ ros_distro /setup.sh && \ apt-get update && rosdep install -y \ --from-paths \ src/ros2/demos/demo_nodes_cpp \ src/ros2/demos/demo_nodes_py \ --ignore-src \ && rm -rf /var/lib/apt/lists/* build the packages you need # build overlay source copy --from = cacher overlay_ws /src ./src arg overlay_mixins = "release" run . /opt/ros/ ros_distro /setup.sh && \ colcon build \ --packages-select \ demo_nodes_cpp \ demo_nodes_py \ --mixin overlay_mixins running the launch file # run launch file cmd [ "ros2" , "launch" , "demo_nodes_cpp" , "talker_listener_launch.py" ] likewise, we can change the packages used, install their dependencies, and then run them. back to ibm cloud with this dockerfile, we can follow the same steps we did before to deploy it on ibm cloud. since we already have our registry created, and weâre logged in to ibm cloud, we directly build our new dockerfile. notice how i kept the tag the same but changed the version, this way i can update the docker image created previously. (you are free to create a completely new one if you want)  ibmcloud cr build --tag registry.bluemix.net/ros2nasr/ros2foxy:2 . then, make sure you are logged in to the registry and run the new docker image:  ibmcloud cr login logging in to 'registry.ng.bluemix.net' ... logged in to 'registry.ng.bluemix.net' . logging in to 'us.icr.io' ... logged in to 'us.icr.io' . ok  docker run -v -it registry.ng.bluemix.net/ros2nasr/ros2foxy:2 you should see, again, the same output. however, this time we did it through custom packages from github, which allows us to utilize our personally created packages for ros 2 on ibm cloud. extra: deleting docker images ï as you may find yourself in need of deleting a specific docker image(s) from ibm cloud, this is how you should go  it! list all the images you have and find all the ones that share the image name corresponding to registry.ng.bluemix.net/ros2nasr/ros2foxy:2 (in my case). then delete them using their names  docker rm your_docker_names delete the docker image from ibm cloud using its image name  docker rmi registry.ng.bluemix.net/ros2nasr/ros2foxy:2 step 4: kubernetes ï a) creating the cluster ï create a cluster using the console. the instructions are found here . the settings used are detailed below. these are merely suggestions and can be changed if you need to. however, make sure you understand the implications of your choices: plan: standard orchestration service: kubernetes v1.18.10 infrastructure: classic location: resource group: default geography: north america (you are free to change this) availability: single zone (you are free to change this but make sure you understand the impact of your choices by checking the ibm cloud documentation.) worker zone: toronto 01 (choose the location that is physically closest to you) worker pool: virtual - shared, ubuntu 18 memory: 16 gb worker nodes per zone: 1 master service endpoint: both private & public endpoints resource details (totally flexible): cluster name: mycluster-tor01-rosibm tags: version:1 after you create your cluster, you will be redirected to a page which details how you can set up the cli tools and access your cluster.  follow these instructions (or check the instructions here )and wait for the progress bar to show that the worker nodes you created are ready by indicating normal next to the cluster name. you can also reach this screen from the ibm cloud console inside the kubernetes. b) deploying your docker image finally! ï create a deployment configuration yaml file named ros2-deployment.yaml using your favorite editor and insert the following in it: apiversion: apps/v1 kind: deployment metadata: name: <deployment> spec: replicas: <number_of_replicas> selector: matchlabels: app: <app_name> template: metadata: labels: app: <app_name> spec: containers: - name: <app_name> image: <region>.icr.io/<namespace>/<image>:<tag> you should replace the tags shown between â<â â>â as described here . the file in my case would look something like this: apiversion: apps/v1 kind: deployment metadata: name: ros2-deployment spec: replicas: 1 selector: matchlabels: app: ros2-ibmcloud template: metadata: labels: app: ros2-ibmcloud spec: containers: - name: ros2-ibmcloud image: us.icr.io/ros2nasr/ros2foxy:2 deploy the file using the following command  kubectl apply -f ros2-deployment.yaml deployment.apps/ros2-deployment created now your docker image is fully deployed on your cluster! step 5: using cli for your docker image ï navigate to your cluster through the ibm cloud console kubernetes. click on kubernetes dashboard on the top right corner of the page. you should now be able to see a full list of all the different parameters of your cluster as well as its cpu and memory usage. navigate to pods and click on your deployment. on the top right corner, click on exec into pod now you are inside your docker image! you can source your workspace (if needed) and run ros 2! for example: root@ros2-deployment-xxxxxxxx:/opt/ros/overlay_ws# . install/setup.sh root@ros2-deployment-xxxxxxxx:/opt/ros/overlay_ws# ros2 launch demo_nodes_cpp talker_listener_launch.py final remarks ï at this point, you are capable of creating your own docker image using ros 2 packages on github. it is also possible, with little changes to utilize local ros 2 packages as well. this could be the topic of another article. however, you are encouraged to check out the following dockerfile which uses a local copy of the demos repository. similarly, you can use your own local package. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling