tutorials demos recording and playing back data with rosbag using the ros 1 bridge edit on github recording and playing back data with rosbag using the ros 1 bridge ï this tutorial is a follow up to the bridge communication between ros 1 and ros 2 demo as can be found here , and in the following it is assumed you have completed that tutorial already. the ros1_bridge can be built from source for these examples. what follows is a series of additional examples, like that ones that come at the end of the aforementioned bridge communication between ros 1 and ros 2 demo. recording topic data with rosbag and ros 1 bridge ï in this example, weâll be using the cam2image demo program that comes with ros 2 and a python script to emulate a simple turtlebot-like robotâs sensor data so that we can bridge it to ros 1 and use rosbag to record it. first weâll run a ros 1 roscore in a new shell: # shell a: . /opt/ros/kinetic/setup.bash # or, on osx, something like: # . ~/ros_catkin_ws/install_isolated/setup.bash roscore then weâll run the ros 1 <=> ros 2 dynamic_bridge with the --bridge-all-topics option (so we can do rostopic list and see them) in another shell: # shell b: . /opt/ros/kinetic/setup.bash # or, on osx, something like: # . ~/ros_catkin_ws/install_isolated/setup.bash . /opt/ros/ardent/setup.bash # or, if building ros 2 from source: # . <workspace-with-bridge>/install/setup.bash export ros_master_uri = http://localhost:11311 ros2 run ros1_bridge dynamic_bridge --bridge-all-topics remember to replace <workspace-with-bridge> with the path to where you either extracted the ros 2 binary or where you built ros 2 from source. now we can start up the ros 2 programs that will emulate our turtlebot-like robot. first weâll run the cam2image program with the -b option so it doesnât require a camera to work: # shell c: . /opt/ros/ardent/setup.bash # or, if building ros 2 from source: # . <workspace-with-bridge>/install/setup.bash ros2 run image_tools cam2image -- -b todo: use namespaced topic names then weâll run a simple python script to emulate the odom and imu_data topics from a kobuki base. i would use the more accurate ~sensors/imu_data topic name for the imu data, but we donât have namespace support just yet in ros 2 (itâs coming!). place this script in a file called emulate_kobuki_node.py : #!/usr/bin/env python3 import sys import time import rclpy from nav_msgs.msg import odometry from sensor_msgs.msg import imu def main (): rclpy . init ( args = sys . argv ) node = rclpy . create_node ( 'emulate_kobuki_node' ) imu_publisher = node . create_publisher ( imu , 'imu_data' ) odom_publisher = node . create_publisher ( odometry , 'odom' ) imu_msg = imu () odom_msg = odometry () counter = 0 while true : counter += 1 now = time . time () if ( counter % 50 ) == 0 : odom_msg . header . stamp . sec = int ( now ) odom_msg . header . stamp . nanosec = int ( now * 1e9 ) % 1000000000 odom_publisher . publish ( odom_msg ) if ( counter % 100 ) == 0 : imu_msg . header . stamp . sec = int ( now ) imu_msg . header . stamp . nanosec = int ( now * 1e9 ) % 1000000000 imu_publisher . publish ( imu_msg ) counter = 0 time . sleep ( 0.001 ) if __name__ == '__main__' : sys . exit ( main ()) you can run this python script in a new ros 2 shell: # shell d: . /opt/ros/ardent/setup.bash # or, if building ros 2 from source: # . <workspace-with-bridge>/install/setup.bash python3 emulate_kobuki_node.py now that all the data sources and the dynamic bridge are running, we can look at the available topics in a new ros 1 shell: # shell e: . /opt/ros/kinetic/setup.bash # or, on osx, something like: # . ~/ros_catkin_ws/install_isolated/setup.bash rostopic list you should see something like this: % rostopic list / image / imu_data / odom / rosout / rosout_agg we can now record this data with rosbag record in the same shell: # shell e: rosbag record /image /imu_data /odom after a few seconds you can ctrl-c the rosbag command and do an ls -lh to see how big the file is, you might see something like this: % ls -lh total 0 -rw-rw-r-- 1 william william 12m feb 23 16 :59 2017 -02-23-16-59-47.bag though the file name will be different for your bag (since it is derived from the date and time). playing back topic data with rosbag and ros 1 bridge ï now that we have a bag file you can use any of the ros 1 tools to introspect the bag file, like rosbag info <bag file> , rostopic list -b <bag file> , or rqt_bag <bag file> . however, we can also playback bag data into ros 2 using rosbag play and the ros 1 <=> ros 2 dynamic_bridge . first close out all the shells you opened for the previous tutorial, stopping any running programs. then in a new shell start the roscore : # shell p: . /opt/ros/kinetic/setup.bash # or, on osx, something like: # . ~/ros_catkin_ws/install_isolated/setup.bash roscore then run the dynamic_bridge in another shell: # shell q: . /opt/ros/kinetic/setup.bash # or, on osx, something like: # . ~/ros_catkin_ws/install_isolated/setup.bash . /opt/ros/ardent/setup.bash # or, if building ros 2 from source: # . <workspace-with-bridge>/install/setup.bash export ros_master_uri = http://localhost:11311 ros2 run ros1_bridge dynamic_bridge --bridge-all-topics then play the bag data back with rosbag play in another new shell, using the --loop option so that we donât have to keep restarting it for short bags: # shell r: . /opt/ros/kinetic/setup.bash # or, on osx, something like: # . ~/ros_catkin_ws/install_isolated/setup.bash rosbag play --loop path/to/bag_file make sure to replace path/to/bag_file with the path to the bag file you want to playback. now that the data is being played back and the bridge is running we can see the data coming across in ros 2. # shell s: . /opt/ros/ardent/setup.bash # or, if building ros 2 from source: # . <workspace-with-bridge>/install/setup.bash ros2 topic list ros2 topic echo /odom you should see something like: % ros2 topic list / clock / image / imu_data / odom / parameter_events you can also see the image being played from the bag by using the showimage tool: ros2 run image_tools showimage other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling