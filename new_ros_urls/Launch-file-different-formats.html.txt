how-to guides using python, xml, and yaml for ros 2 launch files edit on github using python, xml, and yaml for ros 2 launch files ï ros 2 launch files can be written in python, xml, and yaml. this guide shows how to use these different formats to accomplish the same task, as well as has some discussion on when to use each format. launch file examples ï below is a launch file implemented in python, xml, and yaml. each launch file performs the following actions: setup command line arguments with defaults include another launch file include another launch file in another namespace start a node and setting its namespace start a node, setting its namespace, and setting parameters in that node (using the args) create a node to remap messages from one topic to another python xml yaml # example_launch.py import os from ament_index_python import get_package_share_directory from launch import launchdescription from launch.actions import declarelaunchargument from launch.actions import groupaction from launch.actions import includelaunchdescription from launch.launch_description_sources import pythonlaunchdescriptionsource from launch.substitutions import launchconfiguration from launch.substitutions import textsubstitution from launch_ros.actions import node from launch_ros.actions import pushrosnamespace from launch_xml.launch_description_sources import xmllaunchdescriptionsource from launch_yaml.launch_description_sources import yamllaunchdescriptionsource def generate_launch_description (): # args that can be set from the command line or a default will be used background_r_launch_arg = declarelaunchargument ( "background_r" , default_value = textsubstitution ( text = "0" ) ) background_g_launch_arg = declarelaunchargument ( "background_g" , default_value = textsubstitution ( text = "255" ) ) background_b_launch_arg = declarelaunchargument ( "background_b" , default_value = textsubstitution ( text = "0" ) ) chatter_py_ns_launch_arg = declarelaunchargument ( "chatter_py_ns" , default_value = textsubstitution ( text = "chatter/py/ns" ) ) chatter_xml_ns_launch_arg = declarelaunchargument ( "chatter_xml_ns" , default_value = textsubstitution ( text = "chatter/xml/ns" ) ) chatter_yaml_ns_launch_arg = declarelaunchargument ( "chatter_yaml_ns" , default_value = textsubstitution ( text = "chatter/yaml/ns" ) ) # include another launch file launch_include = includelaunchdescription ( pythonlaunchdescriptionsource ( os . path . join ( get_package_share_directory ( 'demo_nodes_cpp' ), 'launch/topics/talker_listener_launch.py' )) ) # include a python launch file in the chatter_py_ns namespace launch_py_include_with_namespace = groupaction ( actions = [ # push_ros_namespace to set namespace of included nodes pushrosnamespace ( 'chatter_py_ns' ), includelaunchdescription ( pythonlaunchdescriptionsource ( os . path . join ( get_package_share_directory ( 'demo_nodes_cpp' ), 'launch/topics/talker_listener_launch.py' )) ), ] ) # include a xml launch file in the chatter_xml_ns namespace launch_xml_include_with_namespace = groupaction ( actions = [ # push_ros_namespace to set namespace of included nodes pushrosnamespace ( 'chatter_xml_ns' ), includelaunchdescription ( xmllaunchdescriptionsource ( os . path . join ( get_package_share_directory ( 'demo_nodes_cpp' ), 'launch/topics/talker_listener_launch.xml' )) ), ] ) # include a yaml launch file in the chatter_yaml_ns namespace launch_yaml_include_with_namespace = groupaction ( actions = [ # push_ros_namespace to set namespace of included nodes pushrosnamespace ( 'chatter_yaml_ns' ), includelaunchdescription ( yamllaunchdescriptionsource ( os . path . join ( get_package_share_directory ( 'demo_nodes_cpp' ), 'launch/topics/talker_listener_launch.yaml' )) ), ] ) # start a turtlesim_node in the turtlesim1 namespace turtlesim_node = node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ) # start another turtlesim_node in the turtlesim2 namespace # and use args to set parameters turtlesim_node_with_parameters = node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ "background_r" : launchconfiguration ( 'background_r' ), "background_g" : launchconfiguration ( 'background_g' ), "background_b" : launchconfiguration ( 'background_b' ), }] ) # perform remap so both turtles listen to the same command topic forward_turtlesim_commands_to_second_turtlesim_node = node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) return launchdescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , chatter_py_ns_launch_arg , chatter_xml_ns_launch_arg , chatter_yaml_ns_launch_arg , launch_include , launch_py_include_with_namespace , launch_xml_include_with_namespace , launch_yaml_include_with_namespace , turtlesim_node , turtlesim_node_with_parameters , forward_turtlesim_commands_to_second_turtlesim_node , ]) <!-- example_launch.xml --> <launch> <!-- args that can be set from the command line or a default will be used --> <arg name= "background_r" default= "0" /> <arg name= "background_g" default= "255" /> <arg name= "background_b" default= "0" /> <arg name= "chatter_py_ns" default= "chatter/py/ns" /> <arg name= "chatter_xml_ns" default= "chatter/xml/ns" /> <arg name= "chatter_yaml_ns" default= "chatter/yaml/ns" /> <!-- include another launch file --> <include file= "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py" /> <!-- include a python launch file in the chatter_py_ns namespace--> <group> <!-- push_ros_namespace to set namespace of included nodes --> <push_ros_namespace namespace= "(var chatter_py_ns)" /> <include file= "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py" /> </group> <!-- include a xml launch file in the chatter_xml_ns namespace--> <group> <!-- push_ros_namespace to set namespace of included nodes --> <push_ros_namespace namespace= "(var chatter_xml_ns)" /> <include file= "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.xml" /> </group> <!-- include a yaml launch file in the chatter_yaml_ns namespace--> <group> <!-- push_ros_namespace to set namespace of included nodes --> <push_ros_namespace namespace= "(var chatter_yaml_ns)" /> <include file= "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.yaml" /> </group> <!-- start a turtlesim_node in the turtlesim1 namespace --> <node pkg= "turtlesim" exec= "turtlesim_node" name= "sim" namespace= "turtlesim1" /> <!-- start another turtlesim_node in the turtlesim2 namespace and use args to set parameters --> <node pkg= "turtlesim" exec= "turtlesim_node" name= "sim" namespace= "turtlesim2" > <param name= "background_r" value= "(var background_r)" /> <param name= "background_g" value= "(var background_g)" /> <param name= "background_b" value= "(var background_b)" /> </node> <!-- perform remap so both turtles listen to the same command topic --> <node pkg= "turtlesim" exec= "mimic" name= "mimic" > <remap from= "/input/pose" to= "/turtlesim1/turtle1/pose" /> <remap from= "/output/cmd_vel" to= "/turtlesim2/turtle1/cmd_vel" /> </node> </launch> # example_launch.yaml launch : # args that can be set from the command line or a default will be used - arg : name : "background_r" default : "0" - arg : name : "background_g" default : "255" - arg : name : "background_b" default : "0" - arg : name : "chatter_py_ns" default : "chatter/py/ns" - arg : name : "chatter_xml_ns" default : "chatter/xml/ns" - arg : name : "chatter_yaml_ns" default : "chatter/yaml/ns" # include another launch file - include : file : "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py" # include a python launch file in the chatter_py_ns namespace - group : - push_ros_namespace : namespace : "(var chatter_py_ns)" - include : file : "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py" # include a xml launch file in the chatter_xml_ns namespace - group : - push_ros_namespace : namespace : "(var chatter_xml_ns)" - include : file : "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.xml" # include a yaml launch file in the chatter_yaml_ns namespace - group : - push_ros_namespace : namespace : "(var chatter_yaml_ns)" - include : file : "(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.yaml" # start a turtlesim_node in the turtlesim1 namespace - node : pkg : "turtlesim" exec : "turtlesim_node" name : "sim" namespace : "turtlesim1" # start another turtlesim_node in the turtlesim2 namespace and use args to set parameters - node : pkg : "turtlesim" exec : "turtlesim_node" name : "sim" namespace : "turtlesim2" param : - name : "background_r" value : "(var background_r)" - name : "background_g" value : "(var background_g)" - name : "background_b" value : "(var background_b)" # perform remap so both turtles listen to the same command topic - node : pkg : "turtlesim" exec : "mimic" name : "mimic" remap : - from : "/input/pose" to : "/turtlesim1/turtle1/pose" - from : "/output/cmd_vel" to : "/turtlesim2/turtle1/cmd_vel" using the launch files from the command line ï launching ï any of the launch files above can be run with ros2 launch . to try them locally, you can either create a new package and use ros2 launch <package_name> <launch_file_name> or run the file directly by specifying the path to the launch file ros2 launch <path_to_launch_file> setting arguments ï to set the arguments that are passed to the launch file, you should use key:=value syntax. for example, you can set the value of background_r in the following way: ros2 launch <package_name> <launch_file_name> background_r:=255 or ros2 launch <path_to_launch_file> background_r:=255 controlling the turtles ï to test that the remapping is working, you can control the turtles by running the following command in another terminal: ros2 run turtlesim turtle_teleop_key --ros-args --remap __ns:=/turtlesim1 python, xml, or yaml: which should i use? ï note launch files in ros 1 were written in xml, so xml may be the most familiar to people coming from ros 1. to see whatâs changed, you can visit migrating launch files . for most applications the choice of which ros 2 launch format comes down to developer preference. however, if your launch file requires flexibility that you cannot achieve with xml or yaml, you can use python to write your launch file. using python for ros 2 launch is more flexible because of following two reasons: python is a scripting language, and thus you can leverage the language and its libraries in your launch files. ros2/launch (general launch features) and ros2/launch_ros (ros 2 specific launch features) are written in python and thus you have lower level access to launch features that may not be exposed by xml and yaml. that being said, a launch file written in python may be more complex and verbose than one in xml or yaml. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling