tutorials intermediate creating an action edit on github creating an action ï goal: define an action in a ros 2 package. tutorial level: intermediate time: 5 minutes background ï you learned  actions previously in the understanding actions tutorial. like the other communication types and their respective interfaces (topics/msg and services/srv), you can also custom-define actions in your packages. this tutorial shows you how to define and build an action that you can use with the action server and action client you will write in the next tutorial. prerequisites ï you should have ros 2 and colcon installed. you should know how to set up a workspace and create packages. remember to source your ros 2 installation first. tasks ï 1 creating an interface package ï linux macos windows mkdir -p ~/ros2_ws/src # you can reuse an existing workspace with this naming convention cd ~/ros2_ws/src ros2 pkg create --license apache-2.0 custom_action_interfaces mkdir -p ~/ros2_ws/src cd ~/ros2_ws/src ros2 pkg create --license apache-2.0 custom_action_interfaces md \r os2_ws \s rc cd \r os2_ws \s rc ros2 pkg create --license apache-2.0 custom_action_interfaces 2 defining an action ï actions are defined in .action files of the form: # request --- # result --- # feedback an action definition is made up of three message definitions separated by --- . a request message is sent from an action client to an action server initiating a new goal. a result message is sent from an action server to an action client when a goal is done. feedback messages are periodically sent from an action server to an action client with updates  a goal. an instance of an action is typically referred to as a goal . say we want to define a new action âfibonacciâ for computing the fibonacci sequence . create an action directory in our ros 2 package custom_action_interfaces : linux macos windows cd custom_action_interfaces mkdir action cd custom_action_interfaces mkdir action cd custom_action_interfaces md action within the action directory, create a file called fibonacci.action with the following contents: int32 order --- int32[] sequence --- int32[] partial_sequence the goal request is the order of the fibonacci sequence we want to compute, the result is the final sequence , and the feedback is the partial_sequence computed so far. 3 building an action ï before we can use the new fibonacci action type in our code, we must pass the definition to the rosidl code generation pipeline. this is accomplished by adding the following lines to our cmakelists.txt before the ament_package() line: find_package ( rosidl_default_generators required ) rosidl_generate_interfaces ( { project_name } "action/fibonacci.action" ) we should also add the required dependencies to our package.xml : <buildtool_depend> rosidl_default_generators </buildtool_depend> <member_of_group> rosidl_interface_packages </member_of_group> we should now be able to build the package containing the fibonacci action definition: # change to the root of the workspace cd ~/ros2_ws # build colcon build weâre done! by convention, action types will be prefixed by their package name and the word action . so when we want to refer to our new action, it will have the full name custom_action_interfaces/action/fibonacci . we can check that our action built successfully with the command line tool. first source our workspace: linux macos windows source install/local_setup.bash source install/local_setup.bash call install \l ocal_setup.bat now check that our action definition exists: ros2 interface show custom_action_interfaces/action/fibonacci you should see the fibonacci action definition printed to the screen. summary ï in this tutorial, you learned the structure of an action definition. you also learned how to correctly build a new action interface using cmakelists.txt and package.xml , and how to verify a successful build. next steps ï next, letâs utilize your newly defined action interface by creating an action service and client (in python or c++ ). related content ï for more detailed information  ros actions,  refer to the design article . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling