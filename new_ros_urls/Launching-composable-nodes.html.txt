how-to guides using ros 2 launch to launch composable nodes edit on github using ros 2 launch to launch composable nodes ï in the composition tutorial , you learned  composable nodes and how to use them from the command-line. in the launch tutorials , you learned  launch files and how to use them to manage multiple nodes. this guide will combine the above two topics and teach you how to write launch files for composable nodes. setup ï see the installation instructions for details on installing ros 2. if youâve installed ros 2 from packages, ensure that you have ros-jazzy-image-tools installed. if you downloaded the archive or built ros 2 from source, it will already be part of the installation. launch file examples ï below is a launch file that launches composable nodes in python, xml, and yaml. the launch files all do the following: instantiate a cam2image composable node with remappings, custom parameters, and extra arguments instantiate a showimage composable node with remappings, custom parameters, and extra arguments python xml yaml import launch from launch_ros.actions import composablenodecontainer from launch_ros.descriptions import composablenode def generate_launch_description (): """generate launch description with multiple components.""" container = composablenodecontainer ( name = 'image_container' , namespace = '' , package = 'rclcpp_components' , executable = 'component_container' , composable_node_descriptions = [ composablenode ( package = 'image_tools' , plugin = 'image_tools::cam2image' , name = 'cam2image' , remappings = [( '/image' , '/burgerimage' )], parameters = [{ 'width' : 320 , 'height' : 240 , 'burger_mode' : true , 'history' : 'keep_last' }], extra_arguments = [{ 'use_intra_process_comms' : true }]), composablenode ( package = 'image_tools' , plugin = 'image_tools::showimage' , name = 'showimage' , remappings = [( '/image' , '/burgerimage' )], parameters = [{ 'history' : 'keep_last' }], extra_arguments = [{ 'use_intra_process_comms' : true }]) ], output = 'both' , ) return launch . launchdescription ([ container ]) <launch> <node_container pkg= "rclcpp_components" exec= "component_container" name= "image_container" namespace= "" > <composable_node pkg= "image_tools" plugin= "image_tools::cam2image" name= "cam2image" namespace= "" > <remap from= "/image" to= "/burgerimage" /> <param name= "width" value= "320" /> <param name= "height" value= "240" /> <param name= "burger_mode" value= "true" /> <param name= "history" value= "keep_last" /> <extra_arg name= "use_intra_process_comms" value= "true" /> </composable_node> <composable_node pkg= "image_tools" plugin= "image_tools::showimage" name= "showimage" namespace= "" > <remap from= "/image" to= "/burgerimage" /> <param name= "history" value= "keep_last" /> <extra_arg name= "use_intra_process_comms" value= "true" /> </composable_node> </node_container> </launch> launch : - node_container : pkg : rclcpp_components exec : component_container name : image_container namespace : '' composable_node : - pkg : image_tools plugin : image_tools::cam2image name : cam2image namespace : '' remap : - from : /image to : /burgerimage param : - name : width value : 320 - name : height value : 240 - name : burger_mode value : true - name : history value : keep_last extra_arg : - name : use_intra_process_comms value : 'true' - pkg : image_tools plugin : image_tools::showimage name : showimage namespace : '' remap : - from : /image to : /burgerimage param : - name : history value : keep_last extra_arg : - name : use_intra_process_comms value : 'true' loading composable nodes into an existing container ï containers can sometimes be launched by other launch files or from a commandline. in that case, you need to add your components to an existing container. for this, you may use loadcomposablenodes to load components into a given container. the below example launches the same nodes as above. python xml yaml from launch import launchdescription from launch_ros.actions import loadcomposablenodes , node from launch_ros.descriptions import composablenode def generate_launch_description (): container = node ( name = 'image_container' , package = 'rclcpp_components' , executable = 'component_container' , output = 'both' , ) load_composable_nodes = loadcomposablenodes ( target_container = 'image_container' , composable_node_descriptions = [ composablenode ( package = 'image_tools' , plugin = 'image_tools::cam2image' , name = 'cam2image' , remappings = [( '/image' , '/burgerimage' )], parameters = [{ 'width' : 320 , 'height' : 240 , 'burger_mode' : true , 'history' : 'keep_last' }], extra_arguments = [{ 'use_intra_process_comms' : true }], ), composablenode ( package = 'image_tools' , plugin = 'image_tools::showimage' , name = 'showimage' , remappings = [( '/image' , '/burgerimage' )], parameters = [{ 'history' : 'keep_last' }], extra_arguments = [{ 'use_intra_process_comms' : true }] ), ], ) return launchdescription ([ container , load_composable_nodes ]) <launch> <node pkg= "rclcpp_components" exec= "component_container" name= "image_container" > </node> <load_composable_node target= "image_container" > <composable_node pkg= "image_tools" plugin= "image_tools::cam2image" name= "cam2image" > <remap from= "/image" to= "/burgerimage" /> <param name= "width" value= "320" /> <param name= "height" value= "240" /> <param name= "burger_mode" value= "true" /> <param name= "history" value= "keep_last" /> <extra_arg name= "use_intra_process_comms" value= "true" /> </composable_node> <composable_node pkg= "image_tools" plugin= "image_tools::showimage" name= "showimage" namespace= "" > <remap from= "/image" to= "/burgerimage" /> <param name= "history" value= "keep_last" /> <extra_arg name= "use_intra_process_comms" value= "true" /> </composable_node> </load_composable_node> </launch> launch : - node_container : pkg : rclcpp_components exec : component_container name : image_container namespace : '' composable_node : - pkg : image_tools plugin : image_tools::cam2image name : cam2image namespace : '' remap : - from : /image to : /burgerimage param : - name : width value : 320 - name : height value : 240 - name : burger_mode value : true - name : history value : keep_last extra_arg : - name : use_intra_process_comms value : 'true' - pkg : image_tools plugin : image_tools::showimage name : showimage namespace : '' remap : - from : /image to : /burgerimage param : - name : history value : keep_last extra_arg : - name : use_intra_process_comms value : 'true' using the launch files from the command-line ï any of the launch files above can be run with ros2 launch . copy the data into a local file, and then run: ros2 launch <path_to_launch_file> intra-process communications ï all of the above examples use an extra argument to setup intra-process communication between the nodes. for more information on what intra-process communications are, see the intra-process comms tutorial . python, xml, or yaml: which should i use? ï see the discussion in using python, xml, and yaml for ros 2 launch files for more information. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling