how-to guides documenting a ros 2 package edit on github documenting a ros 2 package ï this guide introduces the standard way to create documentation for ros 2 packages. for packages with binary releases this also results in the docs being hosted at docs.ros.org/en/<distro>/p/<package>/ . for information on how to contribute to this documentation on docs.ros.org, see contributing to ros 2 documentation . prerequisites ï install ros install rosdoc2 package documentation overview ï the type of documentation discussed in this guide is referred to as âpackage docsâ or âapi docsâ. for ros packages that have been released on ros index, their documentation will be built on the ros buildfarm, included on docs.ros.org, and visible via the api docs button on index.ros.org. the tool responsible for generating ros 2 package docs is rosdoc2 . rosdoc2 is a convenient wrapper around the commonly used sphinx documentation framework. sphinx allows freeform written documentation as well as api documentation for python code generated from comments in the code. the breathe + exhale packages allow integration with doxygen, to include autogenerated c++ api documentation as well. rosdoc2 creates a default configuration for packages with no documentation or configuration at all, and applies options for a uniform theme and integration with other packages. building package docs ï to generate the documentation for a package in html format with rosdoc2 , run: rosdoc2 build --package-path <package-path> the documentation is written to docs_output/<package-name>/index.html and can be viewed in a browser. configuration ï there are three configuration locations for ros package docs: rosdoc2.yaml for general settings, conf.py for sphinx settings and the doxyfile for doxygen settings. for all of those, a default is assumed or generated if not present, so none of them is strictly required. however, it might be necessary to create and modify those once you want to use features such as custom textual documentation pages. rosdoc2.yaml ï this is the main entrypoint for rosdoc2. it specifies generic settings, and can be used to control the execution of specific builders (doxygen and sphinx) and decides which builders to run. rosdoc2 provides a multitude of configuration options, which can be adjusted in a config file rosdoc2.yaml . to generate a default rosdoc2.yaml which you can then further customize, run: rosdoc2 default_config --package-path <package-path> and add <rosdoc2>rosdoc2.yaml</rosdoc2> to the export section in your package.xml : <package> <!-- [...] --> <export> <!-- [...] --> <rosdoc2> rosdoc2.yaml </rosdoc2> </export> </package> however, for most packages, the default settings in rosdoc2 will suffice, and no custom config is necessary. more information  rosdoc2.yaml can be found in the rosdoc2 readme . conf.py, rosdoc2_settings ï the final output of the package docs is (almost) always built by sphinx. each sphinx project is configured by a conf.py file in the doc directory. if no configuration is present, a default sphinx project is created and used when building the documentation. if however a conf.py sphinx config is found in the doc subdirectory of the package, this is used instead. a custom sphinx project is required if you want to include a standalone restructuredtext documentation page. a standalone documentation page can be used to list multiple tutorials and guides; if thatâs something you want for your package youâll need to create a custom sphinx project. rosdoc2 provides additional settings to conf.py and overrides some. information  changes done to the sphinx settings are logged to the console with a [rosdoc2] prefix. doxyfile ï doxygen is a tool for automatically generating c++ api docs from code comments. while doxygen can also generate html output directly, in the usual workflow for ros packages, doxygen produces machine readable output in xml format which is then consumed by sphinx and integrated with the rest of the documentation. doxygen-only docs are possible by only enabling the doxygen builder in rosdoc2.yaml , but this is uncommon. customizing sphinx documentation ï creating a sphinx project ï in order to add standalone documentation pages in addition to the automatically generated api docs, a custom sphinx project is necessary. this should be created in a subdirectory called doc in the package directory. a new sphinx project can be created by running sphinx-quickstart in the doc directory, answering no to âseparate source and build directoriesâ. the wizard requires entering the project name, author and version, but this can later be removed and will be provided to sphinx by rosdoc2 from your packages package.xml . more information  creating a sphinx project can be found on the sphinx quickstart page , customizing index.rst ï the sphinx-quickstart wizard creates an index.rst file, which is the custom landing page for your package, similar to a github readme file. adding python api-docs ï by default rosdoc2 uses the sphinx-apidoc tool and the autodoc sphinx extension to automatically generate documentation for python code. in order for autodoc to find the python modules in your package, it must be added to the python search path in conf.py : sys . path . insert ( 0 , os . path . abspath ( '.' )) this is because rosdoc2 wraps the custom conf.py with more configuration from a script which will be placed in the package. in this case the . path in os.path.abspath refers to the packageâs directory root, not the packageâs doc directory due to the interaction between rosdoc2 and conf.py . by default, package api docs are already reachable through the âmodule indexâ link that is present on the landing page. for the api docs to also appear in the table of contents, simply add a link to the modules page to your index.rst : .. toctree :: :maxdepth: 2 :caption: contents: python modules <modules> adding c++ api-docs ï if you would like to add your automatically generated api docs back to your custom landing page, add the line generated/index to your documentation page where you would like the api docs to appear: .. toctree :: :maxdepth: 2 c++ api docs <generated/index> this adds the elements âclass hierarchyâ, âfile hierarchyâ and âreferenceâ to the table of contents in the sidebar. to make those appear under one âc++ api docsâ heading for a less cluttered sidebar, a separate file such as cpp_api_docs.rst can be added, which links to the generated docs: cpp_api_docs.rst ï c++ api docs ============ these are the autogenerated docs for the internal implementation. .. toctree :: :maxdepth: 3 :caption: contents: generated/index which then also needs to be added in index.rst to appear in the sidebar: index.rst ï .. toctree :: :maxdepth: 2 :caption: contents: cpp_api_docs including an existing readme.md ï if your git repository already has an existing readme.md , it is possible to reuse this as the landing page for the documentation, without duplicating the contents. to correctly include a markdown file in sphinx while preserving relative links and images, some additional effort is required. first, create a proxy-file readme_include.md next to index.rst . this is a markdown file which just includes the original readme.md, but preserves the relative image paths, which would otherwise break in the next step: readme_include.md ï ```{include} ../readme.md :relative-images: ``` then, include the contents of this file from index.rst using myst to include markdown from rst: index.rst ï .. include :: readme_include.md :parser: myst_parser.sphinx_ this also requires adding myst_parser to the extensions in conf.py : conf.py ï extensions = [ "myst_parser" ] ci, docs.ros.org ï the ros build farm uses rosdoc2 to build the package documentation hosted at docs.ros.org/en/<distro>/p/<package>/ . to enable this, the repository containing the documentation must be configured in rosdistro/jazzy/distribution.yaml . this would usually be the package source repository: <package_name> : doc : type : git url : https://github.com/<github_username>/<package_name>.git version : main release : [ ... ] the buildfarm hosts the documentation for every distribution separately, and periodically rebuilds it from the latest commit on the specified branch. it is not required to tag a new release to update the hosted documentation. to view the status of your packageâs documentation build, search for doc__<package_name> on https://build.ros2.org . one job is created for every distribution for which the package is released. on each job page, you can see when a build was last triggered, as well as the status and logs of each build. further reading ï rosdoc2 readme: https://github.com/ros-infrastructure/rosdoc2/blob/main/readme.md ros 2 design document on package documentation: https://design.ros2.org/articles/per_package_documentation.html the ros 2 cookbook: https://github.com/mikeferguson/ros2_cookbook/blob/main/pages/rosdoc2.md other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling