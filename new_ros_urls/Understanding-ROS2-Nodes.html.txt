tutorials beginner: cli tools understanding nodes edit on github understanding nodes ï goal: learn  the function of nodes in ros 2, and the tools to interact with them. tutorial level: beginner time: 10 minutes background ï 1 the ros 2 graph ï over the next few tutorials, you will learn  a series of core ros 2 concepts that make up what is referred to as the âros (2) graphâ. the ros graph is a network of ros 2 elements processing data together at the same time. it encompasses all executables and the connections between them if you were to map them all out and visualize them. 2 nodes in ros 2 ï each node in ros should be responsible for a single, modular purpose, e.g. controlling the wheel motors or publishing the sensor data from a laser range-finder. each node can send and receive data from other nodes via topics, services, actions, or parameters. a full robotic system is comprised of many nodes working in concert. in ros 2, a single executable (c++ program, python program, etc.) can contain one or more nodes. prerequisites ï the previous tutorial shows you how to install the turtlesim package used here. as always, donât forget to source ros 2 in every new terminal you open . tasks ï 1 ros2 run ï the command ros2 run launches an executable from a package. ros2 run <package_name> <executable_name> to run turtlesim, open a new terminal, and enter the following command: ros2 run turtlesim turtlesim_node the turtlesim window will open, as you saw in the previous tutorial . here, the package name is turtlesim and the executable name is turtlesim_node . we still donât know the node name, however. you can find node names by using ros2 node list 2 ros2 node list ï ros2 node list will show you the names of all running nodes. this is especially useful when you want to interact with a node, or when you have a system running many nodes and need to keep track of them. open a new terminal while turtlesim is still running in the other one, and enter the following command: ros2 node list the terminal will return the node name: /turtlesim open another new terminal and start the teleop node with the command: ros2 run turtlesim turtle_teleop_key here, we are referring to the turtlesim package again, but this time we target the executable named turtle_teleop_key . return to the terminal where you ran ros2 node list and run it again. you will now see the names of two active nodes: /turtlesim /teleop_turtle 2.1 remapping ï remapping allows you to reassign default node properties, like node name, topic names, service names, etc., to custom values. in the last tutorial, you used remapping on turtle_teleop_key to change the cmd_vel topic and target turtle2 . now, letâs reassign the name of our /turtlesim node. in a new terminal, run the following command: ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle since youâre calling ros2 run on turtlesim again, another turtlesim window will open. however, now if you return to the terminal where you ran ros2 node list , and run it again, you will see three node names: /my_turtle /turtlesim /teleop_turtle 3 ros2 node info ï now that you know the names of your nodes, you can access more information  them with: ros2 node info <node_name> to examine your latest node, my_turtle , run the following command: ros2 node info /my_turtle ros2 node info returns a list of subscribers, publishers, services, and actions. i.e. the ros graph connections that interact with that node. the output should look like this: /my_turtle subscribers: /parameter_events: rcl_interfaces/msg/parameterevent /turtle1/cmd_vel: geometry_msgs/msg/twist publishers: /parameter_events: rcl_interfaces/msg/parameterevent /rosout: rcl_interfaces/msg/log /turtle1/color_sensor: turtlesim/msg/color /turtle1/pose: turtlesim/msg/pose service servers: /clear: std_srvs/srv/empty /kill: turtlesim/srv/kill /my_turtle/describe_parameters: rcl_interfaces/srv/describeparameters /my_turtle/get_parameter_types: rcl_interfaces/srv/getparametertypes /my_turtle/get_parameters: rcl_interfaces/srv/getparameters /my_turtle/list_parameters: rcl_interfaces/srv/listparameters /my_turtle/set_parameters: rcl_interfaces/srv/setparameters /my_turtle/set_parameters_atomically: rcl_interfaces/srv/setparametersatomically /reset: std_srvs/srv/empty /spawn: turtlesim/srv/spawn /turtle1/set_pen: turtlesim/srv/setpen /turtle1/teleport_absolute: turtlesim/srv/teleportabsolute /turtle1/teleport_relative: turtlesim/srv/teleportrelative service clients: action servers: /turtle1/rotate_absolute: turtlesim/action/rotateabsolute action clients: now try running the same command on the /teleop_turtle node, and see how its connections differ from my_turtle . you will learn more  the ros graph connection concepts including the message types in the upcoming tutorials. summary ï a node is a fundamental ros 2 element that serves a single, modular purpose in a robotics system. in this tutorial, you utilized nodes created in the turtlesim package by running the executables turtlesim_node and turtle_teleop_key . you learned how to use ros2 node list to discover active node names and ros2 node info to introspect a single node. these tools are vital to understanding the flow of data in a complex, real-world robot system. next steps ï now that you understand nodes in ros 2, you can move on to the topics tutorial . topics are one of the communication types that connects nodes. related content ï the concepts page adds some more detail to the concept of nodes. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling