concepts advanced concepts the build system edit on github the build system ï the build system is what allows developers to build their ros 2 code as needed. ros 2 relies heavily on the division of code into packages, with each package containing a manifest file ( package.xml ). this manifest file contains essential metadata  the package, including its dependencies on other packages. this manifest is required for the meta-build tool to function. the ros 2 build system consists of 3 major concepts. build tool ï this is the software that controls the compilation and testing of a single package. in ros 2 this is usually cmake for c++, and setuptools for python, but other build tools are supported. build helpers ï these are helper functions that hook into the build tool to developer experience. ros 2 packages typically rely on the ament series of packages for this. ament consists of a few important repositories which are all in the github organization . the ament_package package ï located on github at ament/ament_package , this repository contains a single ament python package that provides various utilities for ament packages , e.g. templates for environment hooks. all ament packages must contain a single package.xml file at the root of the package regardless of their underlying build system. the package.xml âmanifestâ file contains information that is required in order to process and operate on a package . this package information includes things like the package âs name, which is globally unique, and the packageâs dependencies. the package.xml file also serves as the marker file which indicates the location of the package on the file system. parsing of the package.xml files is provided by catkin_pkg (as in ros 1), while functionality to locate packages by searching the file system for these package.xml files is provided by build tools such as colcon . package.xml ï package manifest file which marks the root of a package and contains meta information  the package including its name, version, description, maintainer, license, dependencies, and more. the contents of the manifest are in machine readable xml format and the contents are described in the reps 127 and 140 , with the possibility of further modifications in future reps . so anytime some package is referred to as an ament package , it means that it is a single unit of software (source code, build files, tests, documentation, and other resources) which is described using a package.xml manifest file. ament package ï any package which contains a package.xml and follows the packaging guidelines of ament , regardless of the underlying build system. since the term ament package is build system agnostic, there can be different kinds of ament packages , e.g. ament cmake package , ament python package , etc. here is a list of common package types that you might run into in this software stack: cmake package ï any package containing a plain cmake project and a package.xml manifest file. ament cmake package ï a cmake package that also follows the ament packaging guidelines. python package ï any package containing a setuptools based python project and a package.xml manifest file. ament python package ï a python package that also follows the ament packaging guidelines. the ament_cmake repository ï located on github at ament/ament_cmake , this repository contains many âament cmakeâ and pure cmake packages which provide the infrastructure in cmake that is required to create âament cmakeâ packages. in this context âament cmakeâ packages means: ament packages that are built using cmake. so the packages in this repository provide the necessary cmake functions/macros and cmake modules to facilitate creating more âament cmakeâ (or ament_cmake ) packages. packages of this type are identified with the <build_type>ament_cmake</build_type> tag in the <export> tag of the package.xml file. the packages in this repository are extremely modular, but there is a single âbottleneckâ package called ament_cmake . anyone can depend on the ament_cmake package to get all of the aggregate functionality of the packages in this repository. here a list of the packages in the repository along with a short description: ament_cmake aggregates all other packages in this repository, users need only to depend on this ament_cmake_auto provides convenience cmake functions which automatically handle a lot of the tedious parts of writing a package âs cmakelists.txt file ament_cmake_core provides all built-in core concepts for ament , e.g. environment hooks, resource indexing, symbolic linking install and others ament_cmake_gmock adds convenience functions for making gmock based unit tests ament_cmake_gtest adds convenience functions for making gtest based automated tests ament_cmake_nose adds convenience functions for making nosetests based python automated tests ament_cmake_python provides cmake functions for packages that contain python code see the ament_cmake_python user documentation ament_cmake_test aggregates different kinds of tests, e.g. gtest and nosetests, under a single target using ctest the ament_cmake_core package contains a lot of the cmake infrastructure that makes it possible to cleanly pass information between packages using conventional interfaces. this makes the packages have more decoupled build interfaces with other packages , promoting their reuse and encouraging conventions in the build systems of different packages . for instance, it provides a standard way to pass include directories, libraries, definitions, and dependencies between packages so that consumers of this information can access this information in a conventional way. the ament_cmake_core package also provides features of the ament build system like symbolic link installation, which allows you to symbolically link files from either the source space or the build space into the install space rather than copying them. this allows you to install once and then edit non-generated resources like python code and configuration files without having to rerun the install step for them to take effect. this feature essentially replaces the âdevel spaceâ from catkin because it has most of the advantages with few of the complications or drawbacks. another feature provided by ament_cmake_core is the package resource indexing which is a way for packages to indicate that they contain a resource of some type. the design of this feature makes it much more efficient to answer simple questions like what packages are in this prefix (e.g. /usr/local ) because it only requires that you list the files in a single possible location under that prefix. you can read more  this feature in the design docs for the resource index. like catkin , ament_cmake_core also provides environment setup files and package specific environment hooks. the environment setup files, often named something like setup.bash , are a place for package developers to define changes to the environment that are needed to utilize their package . the developers are able to do this using an âenvironment hookâ which is basically an arbitrary bit of shell code that can set or modify environment variables, define shell functions, setup auto-completion rules, etcâ this feature is how, for example, ros 1 set the ros_distro environment variable without catkin knowing anything  the ros distribution. the ament_lint repository ï located on github at ament/ament_lint , this repository provides several packages which provide linting and testing services in a convenient and consistent manner. currently there are packages to support c++ style linting using uncrustify , static c++ code checks using cppcheck , checking for  in source code, python style linting using pep8 , and other things. the list of helper packages will likely grow in the future. meta-build tool ï this is a piece of software that knows how to topologically order a group of packages, and build or test them in the correct dependency order. this software will call into the build tool to do the actual work of compiling, testing, and installing the package. in ros 2, the tool named colcon is used for this. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling