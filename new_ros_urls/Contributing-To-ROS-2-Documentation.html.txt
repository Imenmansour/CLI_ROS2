the ros 2 project contributing contributing to ros 2 documentation edit on github contributing to ros 2 documentation ï contributions to this site are most welcome. this page explains how to contribute to ros 2 documentation.  be sure to read the below sections carefully before contributing. the site is built using sphinx , and more particularly using sphinx multiversion . branch structure ï the source code of documentation is located in the ros 2 documentation github repository . this repository is set up with one branch per ros 2 distribution to handle differences between the distributions. if a change is common to all ros 2 distributions, it should be made to the rolling branch (and then will be backported as appropriate). if a change is specific to a particular ros 2 distribution, it should be made to the respective branch. source structure ï the source files for the site are all located under the source subdirectory. templates for various sphinx plugins are located under source/_templates . the root directory contains configuration and files required to locally build the site for testing. building the site locally ï start by installing requirements located in the requirements.txt file: linux macos windows the next command does a user-specific install, which requires ~/.local/bin/ to be added to path : pip3 install --user --upgrade -r requirements.txt pip3 install --user --upgrade -r requirements.txt python -m pip install --user --upgrade -r requirements.txt in order for sphinx to be able to generate diagrams, the dot command must be available. linux macos windows sudo apt update ; sudo apt install graphviz brew install graphviz download an installer from the graphviz download page and install it. make sure to allow the installer to add it to the windows %path% , otherwise sphinx will not be able to find it. building the site for one branch ï to build the site for just this branch, type make html at the top-level of the repository. this is the recommended way to test out local changes. make html the build process can take some time. to see the output, open build/html/index.html in your browser. you can also run the documentation tests locally (using doc8 ) with the following command: make test view site through github ci ï for small changes to the ros 2 docs you can view your changes as rendered html using artifacts generated in our github actions. the âbuildâ action produces the entire ros docs as a downloadable zip file that contains all html for docs.ros.org this build action is triggered after passing the test action and lint action. to download and view your changes first go to your pull request and under the title click the âchecksâ tab. on the left hand side of the checks page, click on the âtestâ section under the âtestsâ section click on âbuildâ dialog. this will open a menu on the right, where you can click on âupload document artifactsâ and scroll to the bottom to see the download link for the zippedâ html files under the heading âartifact download urlâ. building the site for all branches ï to build the site for all branches, type make multiversion from the rolling branch. this has two drawbacks: the multiversion plugin doesnât understand how to do incremental builds, so it always rebuilds everything. this can be slow. when typing make multiversion , it will always check out exactly the branches listed in the conf.py file. that means that local changes will not be shown. to show local changes in the multiversion output, you must first commit the changes to a local branch. then you must edit the conf.py file and change the smv_branch_whitelist variable to point to your branch. checking for broken links ï to check for broken links on the site, run: make linkcheck this will check the entire site for broken links, and output the results to the screen and build/linkcheck . migrating pages from the ros wiki ï the first step in migrating a page from the ros wiki to the ros 2 documentation is to determine if the page needs to be migrated. check if the content, or something similar, is available on https://docs.ros.org/en/rolling by searching for related . if it has already been migrated, congratulations! you are done. if it hasnât been migrated, then consider whether it is worth keeping. pages that you or others find useful, and refer to regularly, are good candidates assuming they have not been superseded by other documentation. pages for ros projects and features that are no longer supported by a current distribution should not be migrated. the next step for migrating a ros wiki page is to determine the correct location for the migrated page. only ros wiki pages that cover core ros concepts belong in the ros documentation, these pages should be migrated to a logical location within the ros documentation. package specific documentation should be migrated to the package-level documentation generated in the packageâs source repository. once the package level documentation has been updated it will be visible as part of the package-level documentation . if you are unsure whether and where to migrate a page,  get in touch via an issue on https://github.com/ros2/ros2_documentation or on https://discourse.ros.org . once youâve determined that a ros wiki page is worth migrating, and found an appropriate landing spot in the ros documentation, the next step in the migration process is to set up the conversion tools necessary to migrate the page. in most cases the only tools necessary to migrate a single ros wiki page to the ros docs are the pandoc command line tool and a text editor. pandoc is supported by most modern operating systems using the installation instruction found on their website. it is worth noting that the ros wiki uses an older wiki technology (moinmoin), so the markup language used is an obscure dialect of the mediawiki format. weâve found that the easiest way to migrate a page from the ros wiki is to convert it from html into restructured text using pandoc. migrating a wiki file ï clone the appropriate repository. if you are migrating a page to the official documentation hosted here, then you should clone https://github.com/ros2/ros2_documentation . create a new github branch for your migrated page. we suggest something like pagename-migration . download the appropriate ros wiki page to an html file using wget or a similar tool (e.g. wget -o urdf.html https://wiki.ros.org/urdf ). alternatively you can use your web browser to save the pageâs html. next you need to remove the extraneous html in the file you downloaded using your browserâs developer mode, find the name of the first useful html element in the wiki page. in most cases all of the html between the third line of the file, starting with the <head> tag, through the start of the first <h1> tag can be safely removed. in the case where there is a table of contents, the first useful tag may be an <h2> tag. similarly, the ros wiki contains some footer text that starts with <div id="pagebottom"></div> and ends just above </body></html> that can also be removed. convert your html file by running a pandoc conversion between html and restructured text. the following command coverts an html file to the equivalent restructured text files: pandoc -f html -t rst urdf.html > urdf.rst . attempt to build your new documentation using the make html command. there may be errors and warnings that you will need to address. carefully read through the entire page making sure the material is up to date for ros 2. check every single link to make sure it points to the appropriate location on docs.ros.org. internal document references must be updated to point to the equivalent ros 2 material. your updated document should not point to the ros wiki unless it is absolutely necessary. this process may require you alter the document considerably, and you may need to pull multiple wiki files. you should verify that every code sample in the document is working correctly under ros 2. find and download any images that may be in the old document. the easiest way to do this is to right click in the browser and download all of the images. alternatively you can find images by searching for <img src> tags in the html file. for each image files downloaded update the image file links to point to the correct image directory for the ros docs. if any of the images require updating, or could be replaced with a mermaid chart,  make this change. be aware that mermaid.js is only supported in the core ros 2 documenation currently. once your document is complete add a table of contents to the top of your new rst document using the appropriate sphinx commands. this block should replace any existing table of contents from the old ros wiki. issue your pull request. make sure to point to the original ros wiki file for reference. once your pull request has been accepted  add a note to the top of the page on the original ros wiki article pointing to the new documentation page. for a real-world example of this process in action,  refer to the ros 2 image processing pipeline in both the ros 2 docs and in the original ros wiki . the completed documentation page can be found in the ros 2 package documentation for image_pipeline . building the site with github codespaces ï first, you need to have a github account (if you donât have one, you can create one for free). then, you need to go to the ros 2 documentation github repository . after that, you can open the repository in codespaces, it can be done just by clicking on the âcodeâ button on the repository page, then choose âopen with codespacesâ from the dropdown menu. after that, you will be redirected to your codespaces page, where you can see the progress of the codespaces creation. once it is done, a visual studio code tab will be opened in your browser. you can open the terminal by clicking on the âterminalâ tab in the top panel or by pressing ctrl - j . in this terminal, you can run any command you want, for example, you can run the following command to build the site for just this branch: make html finally, to view the site, you can click on the âgo liveâ button in the right bottom panel and then, it will open the site in a new tab in your browser (you will need to browse to the build/html folder). writing pages ï the ros 2 documentation website uses the restructuredtext format, which is the default plaintext markup language used by sphinx. this section is a brief introduction to restructuredtext concepts, syntax, and best practices. you can refer to restructuredtext user documentation for a detailed technical specification. table of contents ï there are two types of directives used for the generation of a table of contents, .. toctree:: and .. contents:: . the .. toctree:: is used in top-level pages like tutorials.rst to set ordering and visibility of its child pages. this directive creates both left navigation panel and in-page navigation links to the child pages listed. it helps readers to understand the structure of separate documentation sections and navigate between pages. .. toctree :: :maxdepth: 1 the .. contents:: directive is used for the generation of a table of contents for that particular page. it parses all present headings in a page and builds an in-page nested table of contents. it helps readers to see an overview of the content and navigate inside a page. the .. contents:: directive supports the definition of maximum depth of nested sections. using :depth: 2 will only show sections and subsections in the table of contents. .. contents :: table of contents :depth: 2 :local: headings ï there are four main heading types used in the documentation. note that the number of symbols has to match the length of the title. page title header ================= section header -------------- 2 subsection header ^^^^^^^^^^^^^^^^^^^ 2.4 subsubsection header ~~~~~~~~~~~~~~~~~~~~~~~~ we usually use one digit for numbering subsections and two digits (dot separated) for numbering subsubsections in tutorials and how-to-guides. lists ï stars * are used for listing unordered items with bullet points and number sign #. is used for listing numbered items. both of them support nested definitions and will render accordingly. * bullet point * bullet point nested * bullet point nested * bullet point #. first listed item #. second lited item code formatting ï in-text code can be formatted using backticks for showing highlighted code. in-text code can be formatted using ``backticks`` for showing ``highlighted`` code. code blocks inside a page need to be captured using .. code-block:: directive. .. code-block:: supports code highlighting for syntaxes like c++ , yaml , console , bash , and more. code inside the directive needs to be indented. .. code-block :: c++ int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < parametersclass > ()); rclcpp :: shutdown (); return 0 ; } images ï images can be inserted using the .. image:: directive. .. image :: images/turtlesim_follow1.png references and links ï external links ï the syntax of creating links to external web pages is shown below. `ros docs <https://docs.ros.org> `_ the above link will appear as ros docs . note the underscore after the final single quote. internal links ï the :doc: directive is used to create in-text links to other pages. :doc: `quality of service <../tutorials/quality-of-service>` note that the relative path to the file is used. the ref directive is used to make links to specific parts of a page. these could be headings, images or code sections inside the current or different page. definition of explicit target right before the desired object is required. in the example below, the target is defined as _talker-listener one line before the heading try some examples . .. _talker-listener: try some examples ----------------- now the link from any page in the documentation to that header can be created. :ref: `talker-listener demo <talker-listener>` this link will navigate a reader to the target page with an html anchor link #talker-listener . macros ï macros can be used to simplify writing documentation that targets multiple distributions. use a macro by including the macro name in curly braces. for example, when generating the docs for rolling on the rolling branch: use becomes (for rolling) example {distro} rolling ros-{distro}-pkg {distro_title} rolling ros 2 {distro_title} {distro_title_full} rolling ridley ros 2 {distro_title_full} {repos_file_branch} rolling git checkout {repos_file_branch} the same file can be used on multiple branches (i.e., for multiple distros) and the generated content will be distro-specific. other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling