the ros 2 project contributing ros build farms edit on github ros build farms ï the ros build farms are an important infrastructure to support the ros ecosystem, provided and maintained by open robotics . they provide building of source and binary packages, continuous integration, testing, and analysis for ros 1 and ros 2 packages. there are two hosted instance for open source packages: https://build.ros.org/ for ros 1 packages https://build.ros2.org/ for ros 2 packages if you are going to use any of the provided infrastructure  consider g up for the build farm discussion forum in order to receive notifications, e.g.,  any upcoming changes. jobs and deployment ï the ros build farms perform several different jobs. for each job type you will find a detailed description of what they do and how they work: release jobs generate binary packages, e.g., deb packages devel jobs build and test ros packages within a single repository on a polling basis pull_request jobs build and test ros packages within a single repository triggered by webhooks ci jobs build and test ros packages across repositories with the option of using artifacts from other ci jobs to speed up the build doc jobs generate the api documentation of packages and extract information from the manifests miscellaneous jobs perform maintenance tasks and generate informational data to visualize the status of the build farm and its generated artifacts creation and deployment ï the above jobs are created and deployed when packages are bloomed , i.e. released for ros 1 or ros 2. once blooming is successful and a package is incorporated in one of the ros distributions (via pull request to rosdistro ), the according jobs will be spawned. the names of the jobs encode their type and purpose: [ 1 ] release jobs: {distro}src_{platf}__{package}__{platform}__source build source packages of releases {distro}bin_{platf}__{package}__{platform}__binary build binary packages of releases for instance, the binary packaging job of rclcpp on ros 2 rolling (running on ubuntu noble amd64) is named rbin_un64__rclcpp__ubuntu_noble_amd64__binary . devel jobs: {distro}dev__{package}__{platform} perform a ci build for the releasing branch pull_request jobs {distro}pr__{package}__{platform} perform a ci build for a pull request for instance, the pr job for rclcpp on ros 2 rolling (running on ubuntu noble amd64) is named rpr__rclcpp__ubuntu_noble_amd64 . execution ï execution of the jobs depends on the type of the job: devel jobs will be triggered every time a commit is done to the respective branch polling based on a configured frequency. pull_request jobs will be triggered by webhooks from respective pull request of the upstream [ 2 ] repository release jobs will be triggered once every time a new package version is released, i.e. a new rosdistro pull request was accepted for this package. the source jobs are triggered by a version change in the rosdistro distribution file, the binary jobs are triggered by their source counterpart. frequency asked questions (faq) and troubleshooting ï i get jenkins mails from failing build farm jobs. what do i do? go to the job that raised the issue. you find the link on top of the jenkins . once you followed the link to the build job, click console output on the left, then click full log . this will give you the full console output of the failing build. try to find the top-most error as it is usually the most important and other errors might be follow-ups. the bottom of the  might read 'apt-src build [...]' failed. this is usually because of an error building the package. this usually hints at missing dependencies, see 2. i seem to be missing a dependency, how do i find out which one? you basically have two options, a. is easier but may take several iterations, b. is more elaborate and gives you the full insight as well as local debugging. inspect the release job that raised the issue (see 1.) and localize the cmake dependency issue. to do so, browse to the cmake section, e.g., navigate to the build binarydeb section through the menu on the left in case of a ubuntu/debian build job. the cmake error will typically hint at a dependency required by the cmake configuration but missing in the package manifest . once you have fixed the dependency in the manifest, do a new release of your package and wait for feedback from the build farms orâ to get the full insight and faster, local debugging, you can run the release jobs locally . this allows to iterate the manifest locally until all dependencies are fixed. why do release jobs fail when devel jobs / my github actions / my local builds succeed? there are several potential reasons for this. first, release jobs build against a minimal ros installation to check if all dependencies are properly declared in the package manifest . devel jobs / github actions / local builds may be performed in an environment that has the dependencies already installed, therefore does not notice dependency issues. second, they might build different versions of the source code. while devel jobs / github actions / local builds usually build the latest version from the upstream [ 2 ] repository, release jobs build the source code of the latest release, i.e. the source code in the respective upstream branches of the release repository [ 3 ] . further reading ï the following links provide more details and insights into the build farms: https://github.com/ros-infrastructure/ros_buildfarm/blob/master/doc/index.rst - general documentation of the build farm infrastructure and the generated build jobs http://wiki.ros.org/regression_tests#setting_up_your_computer_for_prerelease http://wiki.ros.org/buildfarm - ros wiki entry for the ros 1 build farm (partially outdated ) https://github.com/ros-infrastructure/cookbook-ros-buildfarm - installs and configures ros build farm machines other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling