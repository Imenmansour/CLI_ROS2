tutorials beginner: cli tools using rqt_console to view logs edit on github using rqt_console to view logs ï goal: get to know rqt_console , a tool for introspecting log messages. tutorial level: beginner time: 5 minutes background ï rqt_console is a gui tool used to introspect log messages in ros 2. typically, log messages show up in your terminal. with rqt_console , you can collect those messages over time, view them closely and in a more organized manner, filter them, save them and even reload the saved files to introspect at a different time. nodes use logs to output messages concerning events and status in a variety of ways. their content is usually informational, for the sake of the user. prerequisites ï you will need rqt_console and turtlesim installed. as always, donât forget to source ros 2 in every new terminal you open . tasks ï 1 setup ï start rqt_console in a new terminal with the following command: ros2 run rqt_console rqt_console the rqt_console window will open: the first section of the console is where log messages from your system will display. in the middle you have the option to filter messages by excluding severity levels. you can also add more exclusion filters using the plus-sign button to the right. the bottom section is for highlighting messages that include a string you input. you can add more filters to this section as well. now start turtlesim in a new terminal with the following command: ros2 run turtlesim turtlesim_node 2 messages on rqt_console ï to produce log messages for rqt_console to display, letâs have the turtle run into the wall. in a new terminal, enter the ros2 topic pub command (discussed in detail in the topics tutorial ) below: ros2 topic pub -r 1 /turtle1/cmd_vel geometry_msgs/msg/twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}" since the above command is publishing the topic at a steady rate, the turtle is continuously running into the wall. in rqt_console you will see the same message with the warn severity level displayed over and over, like so: press ctrl+c in the terminal where you ran the ros2 topic pub command to stop your turtle from running into the wall. 3 logger levels ï ros 2âs logger levels are ordered by severity: fatal error warn info debug there is no exact standard for what each level indicates, but itâs safe to assume that: fatal messages indicate the system is going to terminate to try to protect itself from detriment. error messages indicate significant issues that wonât necessarily damage the system, but are preventing it from functioning properly. warn messages indicate unexpected activity or non-ideal results that might represent a deeper issue, but donât harm functionality outright. info messages indicate event and status updates that serve as a visual verification that the system is running as expected. debug messages detail the entire step-by-step process of the system execution. the default level is info . you will only see messages of the default severity level and more-severe levels. normally, only debug messages are hidden because theyâre the only level less severe than info . for example, if you set the default level to warn , you would only see messages of severity warn , error , and fatal . 3.1 set the default logger level ï you can set the default logger level when you first run the /turtlesim node using remapping. enter the following command in your terminal: ros2 run turtlesim turtlesim_node --ros-args --log-level warn now you wonât see the initial info level messages that came up in the console last time you started turtlesim . thatâs because info messages are lower priority than the new default severity, warn . summary ï rqt_console can be very helpful if you need to closely examine the log messages from your system. you might want to examine log messages for any number of reasons, usually to find out where something went wrong and the series of events leading up to that. next steps ï the next tutorial will teach you  starting multiple nodes at once with ros 2 launch . other versions v: jazzy releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling