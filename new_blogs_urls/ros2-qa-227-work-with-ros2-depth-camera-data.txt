[ros2 q&a] 227  work with ros2 depth camera data written by ruben alves  ros2 tutorials  28/01/2022 what we are going to learn how to obtain depth camera data through ros1 simulation how to use topics offered by camera to determine object distance list of resources used in this post use the rosject: https://app.theconstructsim.com/#/l/467026ab/ ros development studio (rosds)  http://rosds.online robot ignite academy  https://www.robotigniteacademy.com ros2 tutorials  ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 ros2 navigation : https://app.theconstructsim.com/#/course/50 get ros2 industrial ready 3-day online workshop creating a rosject in order to learn how work with ros2 depth camera data, we need to have ros installed.we already prepared a rosject ready for that: https://app.theconstructsim.com/#/l/467026ab/ if you want to create your own rosject instead of using the link we just provided, you can do it also. we are going to use the construct ( https://www.theconstruct.ai/ ) for this tutorial, but if you have ros2 installed on your own computer, you should be able to do ~everything on your own computer, except this creating a rosject part. lets start by opening the construct ( https://www.theconstruct.ai/ ) and logging in. you can easily create a free account if you still dont have one. once inside, lets create my rosjects and then, create a new rosject if you decided decided taking this route: my rosjects create a new rosject for the rosject, lets select ros2 foxy for the ros distro, lets name the rosject as you want. you can leave the rosject public. you should see the rosject you just created in your rosjects list (the name is certainly different from the example below that was added just for learning purposes) list of rosjects  using depth camera in ros2 to determine object distance if you mouse over the recently created rosject, you should see a run button. just click that button to launch the rosject. starting a simulation in order to launch a simulation, lets start by opening a new terminal: open a new terminal we can actually open 3 terminals (just by clicking the plus  +  button that appears besides the number #569 in the image above). at the moment there are not a lot of simulations that include depth cameras for ros2, therefore, we are going to use ros1 to launch a simulation, then use ros1_bridge to make the topics available in ros2. after having the terminals open, lets source ros1 noetic in the first terminal, and also source the workspace that contains the simulation: source /opt/ros/noetic/setup.bash source simulation_ws/devel/setup.bash we can now launch the simulation with: roslaunch ur_e_gazebo ur3e.launch the simulation should have been launched. you can ignore some error messages that appear for the moment. the logs should be something similar to the following: checking log directory for disk usage. this may take a while. press ctrl-c to interrupt done checking log file disk usage. usage is <1gb. xacro: in-order processing became default in ros melodic. you can drop the option. started roslaunch server http://4_xterm:32787/ summary ======== parameters * /gazebo/enable_ros_network: true * /gripper_controller/joint: egh_gripper_finge... * /gripper_controller/type: position_controll... * /joint_group_position_controller/joints: ['shoulder_pan_jo... * /joint_group_position_controller/type: position_controll... * /joint_state_controller/publish_rate: 50 * /joint_state_controller/type: joint_state_contr... * /robot_description: <?xml version="1.... * /robot_state_publisher/publish_frequency: 50.0 * /robot_state_publisher/tf_prefix: * /rosdistro: noetic * /rosversion: 1.15.11 * /scaled_pos_joint_traj_controller/action_monitor_rate: 10 * /scaled_pos_joint_traj_controller/constraints/elbow_joint/goal: 0.1 * /scaled_pos_joint_traj_controller/constraints/elbow_joint/trajectory: 0.1 * /scaled_pos_joint_traj_controller/constraints/goal_time: 0.6 * /scaled_pos_joint_traj_controller/constraints/shoulder_lift_joint/goal: 0.1 * /scaled_pos_joint_traj_controller/constraints/shoulder_lift_joint/trajectory: 0.1 * /scaled_pos_joint_traj_controller/constraints/shoulder_pan_joint/goal: 0.1 * /scaled_pos_joint_traj_controller/constraints/shoulder_pan_joint/trajectory: 0.1 * /scaled_pos_joint_traj_controller/constraints/stopped_velocity_tolerance: 0.05 * /scaled_pos_joint_traj_controller/constraints/wrist_1_joint/goal: 0.1 * /scaled_pos_joint_traj_controller/constraints/wrist_1_joint/trajectory: 0.1 * /scaled_pos_joint_traj_controller/constraints/wrist_2_joint/goal: 0.1 * /scaled_pos_joint_traj_controller/constraints/wrist_2_joint/trajectory: 0.1 * /scaled_pos_joint_traj_controller/constraints/wrist_3_joint/goal: 0.1 * /scaled_pos_joint_traj_controller/constraints/wrist_3_joint/trajectory: 0.1 * /scaled_pos_joint_traj_controller/joints: ['shoulder_pan_jo... * /scaled_pos_joint_traj_controller/state_publish_rate: 25 * /scaled_pos_joint_traj_controller/stop_trajectory_duration: 0.5 * /scaled_pos_joint_traj_controller/type: position_controll... * /use_sim_time: true nodes / arm_controller_spawner (controller_manager/controller_manager) controller_spawner_gripper (controller_manager/spawner) fake_joint_calibration (rostopic/rostopic) gazebo (gazebo_ros/gzserver) gazebo_gui (gazebo_ros/gzclient) joint_state_controller_spawner (controller_manager/controller_manager) robot_state_publisher (robot_state_publisher/robot_state_publisher) ros_control_controller_manager (controller_manager/controller_manager) spawn_gazebo_model (gazebo_ros/spawn_model) auto-starting new master process[master]: started with pid [3700] ros_master_uri=http://4_xterm:11311 setting /run_id to 0e52b568-6cd6-11ec-9dc4-0242ac1b0007 process[rosout-1]: started with pid [3719] started core service [/rosout] process[gazebo-2]: started with pid [3722] process[gazebo_gui-3]: started with pid [3724] process[spawn_gazebo_model-4]: started with pid [3729] process[robot_state_publisher-5]: started with pid [3733] process[fake_joint_calibration-6]: started with pid [3741] process[joint_state_controller_spawner-7]: started with pid [3742] process[arm_controller_spawner-8]: started with pid [3747] process[controller_spawner_gripper-9]: started with pid [3748] process[ros_control_controller_manager-10]: started with pid [3749] ++ ls /usr/bin/gzclient-11.5.1 + gzclient_path=/usr/bin/gzclient-11.5.1 + display=:2 + /usr/bin/gzclient-11.5.1 -g /opt/ros/noetic/lib/libgazebo_ros_paths_plugin.so -g /opt/ros/noetic/lib/libgazebo_ros_api_plugin.so __name:=gazebo_gui __log:=/home/user/.ros/log/0e52b568-6cd6-11ec-9dc4-0242ac1b0007/gazebo_gui-3.log info: cannot create a symlink to latest log directory: [errno 2] no such file or directory: '/home/user/.ros/log/latest' [info] [1641242725.661746, 0.000000]: controller spawner: waiting for service controller_manager/load_controller [info] [1641242725.761337, 0.000000]: loading model xml from ros parameter robot_description [info] [1641242725.768781, 0.000000]: waiting for service /gazebo/spawn_urdf_model gazebo multi-robot simulator, version 11.5.1  (c) 2012 open source robotics foundation. released under the apache 2 license. http://gazebosim.org [ info] [1641242726.627685197]: finished loading gazebo ros api plugin. [ info] [1641242726.629782039]: waitforservice: service [/gazebo/set_physics_properties] has not been advertised, waiting... [msg] waiting for master. [msg] connected to gazebo master @ http://172.27.0.7:11345 [msg] publicized address: 172.27.0.7 [ info] [1641242726.738771830]: finished loading gazebo ros api plugin. [ info] [1641242726.742342582]: waitforservice: service [/gazebo_gui/set_physics_properties] has not been advertised, waiting... [msg] loading world file [/usr/share/gazebo-11/worlds/empty.world] [ info] [1641242727.138178149]: waitforservice: service [/gazebo/set_physics_properties] is now available. [ info] [1641242727.244679729, 0.048000000]: physics dynamic reconfigure ready. [info] [1641242727.280947, 0.088000]: calling service /gazebo/spawn_urdf_model [info] [1641242727.537885, 0.104000]: spawn status: spawnmodel: successfully spawned entity [spawn_gazebo_model-4] process has finished cleanly log file: /home/user/.ros/log/0e52b568-6cd6-11ec-9dc4-0242ac1b0007/spawn_gazebo_model-4*.log [ info] [1641242729.504743470, 0.104000000]: camera plugin: using the 'robotnamespace' param: '/' [ info] [1641242729.513059783, 0.104000000]: camera plugin (ns = /) <tf_prefix_>, set to "" [ info] [1641242730.186888511, 0.104000000]: loading gazebo_ros_control plugin [ info] [1641242730.187188566, 0.104000000]: starting gazebo_ros_control plugin in namespace: / [ info] [1641242730.188738334, 0.104000000]: gazebo_ros_control plugin is waiting for model urdf in parameter [robot_description] on the ros param server. [error] [1641242730.480595227, 0.104000000]: no p gain specified for pid. namespace: /gazebo_ros_control/pid_gains/shoulder_pan_joint [error] [1641242730.482573352, 0.104000000]: no p gain specified for pid. namespace: /gazebo_ros_control/pid_gains/shoulder_lift_joint [error] [1641242730.483960993, 0.104000000]: no p gain specified for pid. namespace: /gazebo_ros_control/pid_gains/elbow_joint [error] [1641242730.485373065, 0.104000000]: no p gain specified for pid. namespace: /gazebo_ros_control/pid_gains/wrist_1_joint [error] [1641242730.486771098, 0.104000000]: no p gain specified for pid. namespace: /gazebo_ros_control/pid_gains/wrist_2_joint [error] [1641242730.488209294, 0.104000000]: no p gain specified for pid. namespace: /gazebo_ros_control/pid_gains/wrist_3_joint [error] [1641242730.489539274, 0.104000000]: no p gain specified for pid. namespace: /gazebo_ros_control/pid_gains/egh_gripper_finger_left_joint [ info] [1641242730.503064828, 0.104000000]: loaded gazebo_ros_control. [ info] [1641242730.514695030, 0.104000000]: mimicjointplugin loaded! joint: "egh_gripper_finger_left_joint", mimic joint: "egh_gripper_finger_right_joint", multiplier: 1, offset: 0, maxeffort: 200, sensitiveness: 0 [msg] loading grasp-fix plugin [msg] gazebograspfix: using disable_collisions_on_attach 0 [msg] gazebograspfix: using update rate 10 [msg] gazebograspfix: using max_grip_count 10 [msg] gazebograspfix: using grip_count_threshold 3 [msg] gazebograspfix: using release_tolerance 0.001 [msg] gazebograspfix: adding collision scoped name robot::egh_gripper_left_finger::egh_gripper_left_finger_collision [msg] gazebograspfix: adding collision scoped name robot::egh_gripper_right_finger::egh_gripper_right_finger_collision [msg] subscribing  manager to topic ~/robot/s [msg] advertising grasping events on topic grasp_events [wrn] [publisher.cc:136] queue limit reached for topic /gazebo/default/pose/local/info, deleting message. this warning is printed only once. [info] [1641242730.834305, 0.401000]: controller spawner: waiting for service controller_manager/switch_controller [info] [1641242730.842565, 0.415000]: controller spawner: waiting for service controller_manager/unload_controller [info] [1641242730.846773, 0.422000]: loading controller: gripper_controller loaded 'joint_state_controller' [error] [1641242731.068522252, 0.634000000]: could not load controller 'arm_controller' because the type was not specified. did you load the controller configuration on the parameter server (namespace: '/arm_controller')? error when loading 'arm_controller' loaded 'joint_group_position_controller' [info] [1641242731.563780, 1.066000]: controller spawner: loaded controllers: gripper_controller [error] [1641242731.564298128, 1.067000000]: could not start controller with name 'arm_controller' because no controller with this name exists started ['joint_state_controller'] successfully error when starting ['arm_controller'] and stopping [] [info] [1641242731.573472, 1.076000]: started controllers: gripper_controller you can now click open gazebo to see the simulation: click open gazebo to see the ur3 simulation with depth camera we are most interested in the depth camera that we can see inside a red box in the image above. that camera has a normal rgb camera and a depth camera that can be used to detect distance. launching ros1_bridge now that we have the simulation running in ros1, lets start ros1_bridge so that we can interact with the topics using ros2. for that, lets run the following command (in this order, first ros1, then ros2) in the second terminal to source ros: source /opt/ros/noetic/setup.bash source /opt/ros/foxy/setup.bash we can now launch ros1_bridge with: ros2 run ros1_bridge dynamic_bridge --bridge-all-topics the output should be similar to: created 1to2 bridge for topic '/calibrated' with ros 1 type 'std_msgs/bool' and ros 2type 'std_msgs/msg/bool' created 1to2 bridge for topic '/clock' with ros 1 type 'rosgraph_msgs/clock' and ros 2 type 'rosgraph_msgs/msg/clock' created 1to2 bridge for topic '/gazebo/link_states' with ros 1 type 'gazebo_msgs/linkstates' and ros 2 type 'gazebo_msgs/msg/linkstates' created 1to2 bridge for topic '/gazebo/model_states' with ros 1 type 'gazebo_msgs/modelstates' and ros 2 type 'gazebo_msgs/msg/modelstates' created 1to2 bridge for topic '/gripper_controller/gripper_cmd/status' with ros 1 type 'actionlib_msgs/goalstatusarray' and ros 2 type 'actionlib_msgs/msg/goalstatusarray' created 1to2 bridge for topic '/joint_states' with ros 1 type 'sensor_msgs/jointstate' and ros 2 type 'sensor_msgs/msg/jointstate' created 1to2 bridge for topic '/rosout' with ros 1 type 'rosgraph_msgs/log' and ros 2type 'rcl_interfaces/msg/log' created 1to2 bridge for topic '/rosout_agg' with ros 1 type 'rosgraph_msgs/log' and ros 2 type 'rcl_interfaces/msg/log' created 1to2 bridge for topic '/tf' with ros 1 type 'tf2_msgs/tfmessage' and ros 2 type 'tf2_msgs/msg/tfmessage' created 1to2 bridge for topic '/tf_static' with ros 1 type 'tf2_msgs/tfmessage' and ros 2 type 'tf2_msgs/msg/tfmessage' created 1to2 bridge for topic '/wrist_rgbd/depth/camera_info' with ros 1 type 'sensor_msgs/camerainfo' and ros 2 type 'sensor_msgs/msg/camerainfo' created 1to2 bridge for topic '/wrist_rgbd/depth/image_raw' with ros 1 type 'sensor_msgs/image' and ros 2 type 'sensor_msgs/msg/image' created 1to2 bridge for topic '/wrist_rgbd/depth/points' with ros 1 type 'sensor_msgs/pointcloud2' and ros 2 type 'sensor_msgs/msg/pointcloud2' created 1to2 bridge for topic '/wrist_rgbd/rgb/camera_info' with ros 1 type 'sensor_msgs/camerainfo' and ros 2 type 'sensor_msgs/msg/camerainfo' created 1to2 bridge for topic '/wrist_rgbd/rgb/image_raw' with ros 1 type 'sensor_msgs/image' and ros 2 type 'sensor_msgs/msg/image' created 1to2 bridge for topic '/wrist_rgbd/rgb/image_raw/compressed' with ros 1 type 'sensor_msgs/compressedimage' and ros 2 type 'sensor_msgs/msg/compressedimage' created 1to2 bridge for topic '/wrist_rgbd/rgb/image_raw/compresseddepth' with ros 1 type 'sensor_msgs/compressedimage' and ros 2 type 'sensor_msgs/msg/compressedimage' created 2 to 1 bridge for service /gazebo/clear_body_wrenches created 2 to 1 bridge for service /gazebo/clear_joint_forces created 2 to 1 bridge for service /gazebo/delete_light created 2 to 1 bridge for service /gazebo/delete_model created 2 to 1 bridge for service /gazebo/get_joint_properties created 2 to 1 bridge for service /gazebo/get_light_properties created 2 to 1 bridge for service /gazebo/get_link_properties created 2 to 1 bridge for service /gazebo/get_link_state created 2 to 1 bridge for service /gazebo/get_model_properties created 2 to 1 bridge for service /gazebo/get_model_state created 2 to 1 bridge for service /gazebo/get_physics_properties created 2 to 1 bridge for service /gazebo/get_world_properties created 2 to 1 bridge for service /gazebo/pause_physics created 2 to 1 bridge for service /gazebo/reset_simulation created 2 to 1 bridge for service /gazebo/reset_world created 2 to 1 bridge for service /gazebo/set_joint_properties created 2 to 1 bridge for service /gazebo/set_link_properties created 2 to 1 bridge for service /gazebo/set_link_state created 2 to 1 bridge for service /gazebo/set_model_configuration created 2 to 1 bridge for service /gazebo/set_model_state created 2 to 1 bridge for service /gazebo/set_physics_properties created 2 to 1 bridge for service /gazebo/spawn_sdf_model created 2 to 1 bridge for service /gazebo/spawn_urdf_model created 2 to 1 bridge for service /gazebo/unpause_physics created 2 to 1 bridge for service /wrist_rgbd/set_camera_info [info] [1641243318.565086017] [ros_bridge]: passing message from ros 1 std_msgs/bool to ros 2 std_msgs/msg/bool (showing msg only once per type) [info] [1641243318.565407501] [ros_bridge]: passing message from ros 1 rosgraph_msgs/clock to ros 2 rosgraph_msgs/msg/clock (showing msg only once per type) [info] [1641243318.634712568] [ros_bridge]: passing message from ros 1 gazebo_msgs/linkstates to ros 2 gazebo_msgs/msg/linkstates (showing msg only once per type) [info] [1641243318.636128359] [ros_bridge]: passing message from ros 1 gazebo_msgs/modelstates to ros 2 gazebo_msgs/msg/modelstates (showing msg only once per type) [info] [1641243318.636843101] [ros_bridge]: passing message from ros 1 actionlib_msgs/goalstatusarray to ros 2 actionlib_msgs/msg/goalstatusarray (showing msg only once per type) [info] [1641243318.637282514] [ros_bridge]: passing message from ros 1 sensor_msgs/jointstate to ros 2 sensor_msgs/msg/jointstate (showing msg only once per type) [info] [1641243318.637751048] [ros_bridge]: passing message from ros 1 rosgraph_msgs/log to ros 2 rcl_interfaces/msg/log (showing msg only once per type) [info] [1641243318.638771467] [ros_bridge]: passing message from ros 1 tf2_msgs/tfmessage to ros 2 tf2_msgs/msg/tfmessage (showing msg only once per type) created 2to1 bridge for topic '/calibrated' with ros 2 type 'std_msgs/msg/bool' and ros 1 type 'std_msgs/bool' created 2to1 bridge for topic '/rosout' with ros 2 type 'rcl_interfaces/msg/log' and ros 1 type 'rosgraph_msgs/log' removed 2to1 bridge for topic '/calibrated' [info] [1641243320.970126882] [ros_bridge]: passing message from ros 1 sensor_msgs/image to ros 2 sensor_msgs/msg/image (showing msg only once per type) [info] [1641243320.971249839] [ros_bridge]: passing message from ros 1 sensor_msgs/camerainfo to ros 2 sensor_msgs/msg/camerainfo (showing msg only once per type) [info] [1641243321.032322768] [ros_bridge]: passing message from ros 2 rcl_interfaces/msg/log to ros 1 rosgraph_msgs/log (showing msg only once per type) [info] [1641243321.057171155] [ros_bridge]: passing message from ros 1 sensor_msgs/pointcloud2 to ros 2 sensor_msgs/msg/pointcloud2 (showing msg only once per type) [info] [1641243321.136791384] [ros_bridge]: passing message from ros 1 sensor_msgs/compressedimage to ros 2 sensor_msgs/msg/compressedimage (showing msg only once per type) if we now go to the third terminal , we can list the topics in ros2 with: ros2 topic list which would show something like this: /calibrated /clock /gazebo/link_states /gazebo/model_states /gripper_controller/gripper_cmd/status /joint_states /parameter_events /rosout /rosout_agg /tf /tf_static /wrist_rgbd/depth/camera_info /wrist_rgbd/depth/image_raw /wrist_rgbd/depth/points /wrist_rgbd/rgb/camera_info /wrist_rgbd/rgb/image_raw /wrist_rgbd/rgb/image_raw/compressed /wrist_rgbd/rgb/image_raw/compresseddepth the topics we are most interested in are the ones that start with /wrist_rgbd: /wrist_rgbd/depth/camera_info /wrist_rgbd/depth/image_raw /wrist_rgbd/depth/points /wrist_rgbd/rgb/camera_info /wrist_rgbd/rgb/image_raw /wrist_rgbd/rgb/image_raw/compressed /wrist_rgbd/rgb/image_raw/compresseddepth some important notes  the topics above. the /wrist_rgbd/depth/camera_info topic does not show any distance of any object. is just shows the configurations of the camera. the /wrist_rgbd/rgb/image_raw just shows an array of pixels that just represent the colors that we can see in an image. it does not contain any distance information either. the topic we are really interested in this one: /wrist_rgbd/depth/points lets open rviz2 in a fourth terminal so that we can understand things better by visualizing data like the depth information of the camera: rviz2 rviz is a graphical tool, so, in order to see it, you have to click the graphical tools button. open graphical tools / rviz now that rviz is open, lets change the fixed frame to wrist_rgbd_camera_link after that, lets click the add button that appears on the bottom left, and click the by topic tab, and select /wrist_rgbd/depth/points add  by topic  wrist_rgbd/depth/points you should now be able to see the depth info visually: add  by topic  wrist_rgbd depth points visually the points you see in the last image above actually tell you the distance of the arm. by checking the values that are sent in the /wrist_rgbd/depth/points topic you can easily determine how far an object is. that is pretty much how you would use a depth camera to determine the distance of an object. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. topics: perception | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment δ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail