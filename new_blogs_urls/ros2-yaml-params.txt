skip to content in this tutorial you will see how to use yaml to handle your ros2 parameters. >> watch this video as an additional resource to this article: after watching the video, subscribe to the robotics back-end youtube channel so you dont miss the next tutorials! table of contents toggle why using yaml for ros2 params so, you start to write a ros2 application and as you progress, you add more nodes, more features, more settings. you use ros2 params in your nodes because thats a nice way to set parameters at run time, without having to modify (+recompile) the file containing the code for the node. (if you dont know how to use params in your code, check out this rclpy params tutorial and this rclcpp params tutorial .) you want to learn ros2 efficiently? check out ros2 for beginners and learn ros2 step by step, in 1 week. but now your application has 4 nodes and 150 parameters. managing parameters is becoming a real problem. adding them from command line is now not an option anymore. you can add each one of them in a launch file, but that will also take many lines in your launch file, and for each different config youd have to write different launch files. you can see here how important it is to have a better system for writing parameters. create a yaml file in ros2 yaml means yaml aint markup language, which doesnt really help. lets say its like json or xml, but much more human readable. its a great fit for loading a configuration file at run time, which is exactly what ros2 params are . possible types for yaml params you can use all the available types for ros2 params: boolean value integer number float number string array of all the 4 previous types array of bytes write a yaml config file for a ros2 node lets write a yaml config file using all the available ros2 param types. there is a required minimal structure for ros2 to know those are parameters to load for a given node. first you write the name of the node, then ros__parameters with one indentation (2 or 4 spaces, recommended: 2), and then you can write the parameters with one more indentation. by adding more indentations you can create nested parameters. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter your_amazing_node: ros__parameters: bool_value: true int_number: 5 float_number: 3.14 str_text: "hello universe" bool_array: [ true , false , true ] int_array: [ 10 , 11 , 12 , 13 ] float_array: [ 7.5 , 400.4 ] str_array: [ 'nice' , 'more' , 'params' ] bytes_array: [ 0x01, 0xf1, 0xa2 ] nested_param: another_int: 7 your_amazing_node: ros__parameters: bool_value: true int_number: 5 float_number: 3.14 str_text: "hello universe" bool_array: [true, false, true] int_array: [10, 11, 12, 13] float_array: [7.5, 400.4] str_array: ['nice', 'more', 'params'] bytes_array: [0x01, 0xf1, 0xa2] nested_param: another_int: 7 your_amazing_node: ros__parameters: bool_value: true int_number: 5 float_number: 3.14 str_text: "hello universe" bool_array: [true, false, true] int_array: [10, 11, 12, 13] float_array: [7.5, 400.4] str_array: ['nice', 'more', 'params'] bytes_array: [0x01, 0xf1, 0xa2] nested_param: another_int: 7 important: if the name is not exactly the same as the node name, parameters wont be loaded , and ros2 will not display the error. in this case, your node name (which can be different from the executable name) should be your_amazing_node. note: you can start parameters for multiple nodes in the same file. all you need to do is to write the same structure multiple times. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter node_1: ros__parameters: some_text: "abc" node_2: ros__parameters: int_number: 27 float_param: 45.2 node_3: ros__parameters: int_number: 45 node_1: ros__parameters: some_text: "abc" node_2: ros__parameters: int_number: 27 float_param: 45.2 node_3: ros__parameters: int_number: 45 node_1: ros__parameters: some_text: "abc" node_2: ros__parameters: int_number: 27 float_param: 45.2 node_3: ros__parameters: int_number: 45 where to put your ros2 yaml config files? just before we launch the ros2 yaml params, lets see where you should put your files, so everything is correctly setup before we run the code. there is no particular rule as to where you have to put your config files. but heres a common way to do it (kind of a convention now): the same as you would put your launch files into a launch/ folder, you can put all your yaml config files into a config/ folder, directly at the root of your package. heres an excerpt of what your package would look like (whether its a python/cpp package): plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter your_package/  config   params.yaml  launch   test_params.launch.py  package.xml  ... your_package/  config   params.yaml  launch   test_params.launch.py  package.xml  ... your_package/  config   params.yaml  launch   test_params.launch.py  package.xml  ... doing this will help other developers when working with your code, and help you when working with others code, because the architecture is the same. sometimes, developers will use the name param for the folder, instead of config, but the way to handle yaml files is the same. of course you can follow your own rules and place yaml files wherever you want, it will still work, but i advise you to follow this convention. load a yaml config file for a node as a ros2 parameter only exist within a node, we have to create a node first if we want to test our yaml config file. the node by itself doesnt (and doesnt need to) know if the parameters where launched from a yaml file. heres a minimal python node which simply declares all parameters used in this tutorial. you can then see how to make them match with the yaml file. the parameter declaration for a cpp is the same, just using the rclcpp api. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter import rclpy from rclpy.node import node class testyamlparams ( node ) : def __init__ ( self ) : super () . __init__ ( 'your_amazing_node' ) self. declare_parameters ( namespace= '' , parameters= [ ( 'bool_value' , none ) , ( 'int_number' , none ) , ( 'float_number' , none ) , ( 'str_text' , none ) , ( 'bool_array' , none ) , ( 'int_array' , none ) , ( 'float_array' , none ) , ( 'str_array' , none ) , ( 'bytes_array' , none ) , ( 'nested_param.another_int' , none ) ]) def main ( args= none ) : rclpy. init ( args=args ) node = testyamlparams () rclpy. spin ( node ) node. destroy_node () rclpy. shutdown () if __name__ == '__main__' : main () import rclpy from rclpy.node import node class testyamlparams(node): def __init__(self): super().__init__('your_amazing_node') self.declare_parameters( namespace='', parameters=[ ('bool_value', none), ('int_number', none), ('float_number', none), ('str_text', none), ('bool_array', none), ('int_array', none), ('float_array', none), ('str_array', none), ('bytes_array', none), ('nested_param.another_int', none) ]) def main(args=none): rclpy.init(args=args) node = testyamlparams() rclpy.spin(node) node.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() import rclpy from rclpy.node import node class testyamlparams(node): def __init__(self): super().__init__('your_amazing_node') self.declare_parameters( namespace='', parameters=[ ('bool_value', none), ('int_number', none), ('float_number', none), ('str_text', none), ('bool_array', none), ('int_array', none), ('float_array', none), ('str_array', none), ('bytes_array', none), ('nested_param.another_int', none) ]) def main(args=none): rclpy.init(args=args) node = testyamlparams() rclpy.spin(node) node.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() lets now load those params! from command line this command will start your node with all params from your yaml config file. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 run ros2_tutorials test_yaml_params --ros-args --params-file ~/ros2_ws/src/ros2_tutorials/config/params.yaml  ros2 run ros2_tutorials test_yaml_params --ros-args --params-file ~/ros2_ws/src/ros2_tutorials/config/params.yaml  ros2 run ros2_tutorials test_yaml_params --ros-args --params-file ~/ros2_ws/src/ros2_tutorials/config/params.yaml quite simple, isnt it? whether you have 1 or 400 params for your node, the command will stay the same. when running this command by yourself, dont forget to change the name of the package, name of the executable, and path to your yaml file. from a launch file heres a minimal ros2 launch file which just launches one node with params from a yaml file. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter import os from ament_index_python.packages import get_package_share_directory from launch import launchdescription from launch_ros.actions import node def generate_launch_description () : ld = launchdescription () config = os.path. join ( get_package_share_directory ( 'ros2_tutorials' ) , 'config' , 'params.yaml' ) node= node ( package = 'ros2_tutorials' , name = 'your_amazing_node' , executable = 'test_yaml_params' , parameters = [ config ] ) ld. add_action ( node ) return ld import os from ament_index_python.packages import get_package_share_directory from launch import launchdescription from launch_ros.actions import node def generate_launch_description(): ld = launchdescription() config = os.path.join( get_package_share_directory('ros2_tutorials'), 'config', 'params.yaml' ) node=node( package = 'ros2_tutorials', name = 'your_amazing_node', executable = 'test_yaml_params', parameters = [config] ) ld.add_action(node) return ld import os from ament_index_python.packages import get_package_share_directory from launch import launchdescription from launch_ros.actions import node def generate_launch_description(): ld = launchdescription() config = os.path.join( get_package_share_directory('ros2_tutorials'), 'config', 'params.yaml' ) node=node( package = 'ros2_tutorials', name = 'your_amazing_node', executable = 'test_yaml_params', parameters = [config] ) ld.add_action(node) return ld first we get the path of the yaml config file. in this example the file is expected to be in the install/ros2_tutorials/share/ros2_tutorials/config/ folder of your ros2 workspace. make sure you installed the yaml file in the right place. for a python package, in setup.py: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ... data_files= [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]) , ( 'share/' + package_name, [ 'package.xml' ]) , ( os.path. join ( 'share' , package_name, 'launch' ) , glob ( 'launch/*.launch.py' )) , ( os.path. join ( 'share' , package_name, 'config' ) , glob ( 'config/*.yaml' )) ] , ... ... data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), (os.path.join('share', package_name, 'launch'), glob('launch/*.launch.py')), (os.path.join('share', package_name, 'config'), glob('config/*.yaml')) ], ... ... data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), (os.path.join('share', package_name, 'launch'), glob('launch/*.launch.py')), (os.path.join('share', package_name, 'config'), glob('config/*.yaml')) ], ... for a cpp package, in cmakelists.txt: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ... install(directory launch destination share/{project_name} ) install(directory config destination share/{project_name} ) ... ... install(directory launch destination share/{project_name} ) install(directory config destination share/{project_name} ) ... ... install(directory launch destination share/{project_name} ) install(directory config destination share/{project_name} ) ... of course you can install the launch and config files wherever you want, the example above is just a suggestion. dump yaml file from existing params once you have a node and params launched, you can directly dump those parameters into a yaml file. its a great way to get a global overview of your params for a node, in order to spot potential mistakes. also, in the case where you have to deal with an existing node (without an existing yaml config file), you can first run the node with its existing params and dump them into a yaml file. next time you start your node you can load params directly from this file. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 param dump /your_amazing_node saving to: ./your_amazing_node.yaml  ros2 param dump /your_amazing_node saving to: ./your_amazing_node.yaml  ros2 param dump /your_amazing_node saving to: ./your_amazing_node.yaml you can also print directly the params on the terminal if you want to copy-paste some of them in an existing config file, or look for mistakes. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 param dump /your_amazing_node --print your_amazing_node: ros__parameters: bool_array: - true - false - true bool_value: true bytes_array: !!python/object/apply:array.array - q - - 1 - 241 - 162 float_array: !!python/object/apply:array.array - d - - 7. 5 - 400. 4 float_number: 3. 14 int_array: !!python/object/apply:array.array - q - - 10 - 11 - 12 - 13 int_number: 5 nested_param: another_int: 7 str_array: - nice - more - params str_text: hello universe use_sim_time: false  ros2 param dump /your_amazing_node --print your_amazing_node: ros__parameters: bool_array: - true - false - true bool_value: true bytes_array: !!python/object/apply:array.array - q - - 1 - 241 - 162 float_array: !!python/object/apply:array.array - d - - 7.5 - 400.4 float_number: 3.14 int_array: !!python/object/apply:array.array - q - - 10 - 11 - 12 - 13 int_number: 5 nested_param: another_int: 7 str_array: - nice - more - params str_text: hello universe use_sim_time: false  ros2 param dump /your_amazing_node --print your_amazing_node: ros__parameters: bool_array: - true - false - true bool_value: true bytes_array: !!python/object/apply:array.array - q - - 1 - 241 - 162 float_array: !!python/object/apply:array.array - d - - 7.5 - 400.4 float_number: 3.14 int_array: !!python/object/apply:array.array - q - - 10 - 11 - 12 - 13 int_number: 5 nested_param: another_int: 7 str_array: - nice - more - params str_text: hello universe use_sim_time: false ros2 yaml params with namespaces one last thing: lets see how to handle params from yaml files when you want to put your nodes into namespaces. well use the same example as before, but this time we want the your_awesome_node to be in a ns1 namespace. a few simple modifications are needed. yaml config file: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ns1: your_amazing_node: ros__parameters: bool_value: true ... ns1: your_amazing_node: ros__parameters: bool_value: true ... ns1: your_amazing_node: ros__parameters: bool_value: true ... to run node from terminal: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 run ros2_tutorials test_yaml_params --ros-args -r __ns:=/ns1 --params-file ~/ros2_ws/src/ros2_tutorials/config/params.yaml  ros2 run ros2_tutorials test_yaml_params --ros-args -r __ns:=/ns1 --params-file ~/ros2_ws/src/ros2_tutorials/config/params.yaml  ros2 run ros2_tutorials test_yaml_params --ros-args -r __ns:=/ns1 --params-file ~/ros2_ws/src/ros2_tutorials/config/params.yaml launch file: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ... node= node ( package = 'ros2_tutorials' , namespace= 'ns1' , name = 'your_amazing_node' , executable = 'test_yaml_params' , parameters = [ config ] ) ... ... node=node( package = 'ros2_tutorials', namespace='ns1', name = 'your_amazing_node', executable = 'test_yaml_params', parameters = [config] ) ... ... node=node( package = 'ros2_tutorials', namespace='ns1', name = 'your_amazing_node', executable = 'test_yaml_params', parameters = [config] ) ... and thats it! conclusion on ros2 yaml with this tutorial you should have all the basics to launch your ros2 params from yaml config files. its very likely that youll have to use yaml often, either for your own ros2 projects, or when working on other robots. this tool will help you organize your project better, and allow you to test many different configurations for a single node in no time. want to learn how to program with ros2? don't miss this opportunity: [new] ros 2 book or, learn with a video course want to learn ros2? [new] ros 2 book or, learn with a video course we use s on our website to give you the most relevant experience by remembering your preferences and repeat visits. by clicking accept all, you consent to the use of all the s. however, you may visit " settings" to provide a controlled consent.  settings accept all manage consent close  overview this website uses s to improve your experience while you navigate through the website. out of these, the s that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the ... necessary necessary always enabled necessary s are absolutely essential for the website to function properly. these s ensure basic functionalities and security features of the website, anonymously.  duration description lawinfo-checkbox-analytics 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "analytics". lawinfo-checkbox-functional 11 months the  is set by gdpr  consent to record the user consent for the s in the category "functional". lawinfo-checkbox-necessary 11 months this  is set by gdpr  consent plugin. the s is used to store the user consent for the s in the category "necessary". lawinfo-checkbox-others 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "other. lawinfo-checkbox-performance 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "performance". viewed__policy 11 months the  is set by the gdpr  consent plugin and is used to store whether or not user has consented to the use of s. it does not store any personal data. functional functional functional s help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features. performance performance performance s are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors. analytics analytics analytical s are used to understand how visitors interact with the website. these s help provide information on metrics the number of visitors, bounce rate, traffic source, etc.    s are used to provide visitors with relevant ads and  campaigns. these s track visitors across websites and collect information to provide customized ads. others others other uncategorized s are those that are being analyzed and have not been classified into a category as yet. save & accept learn ros2 in a week check out the course here