[ros2 in 5 mins] 006  what is a ros2 message? written by bayode aderinola  ros2 tutorials  02/12/2018 hello ros developers and enthusiasts! in this short post, well find out what a ros2 message is and what ros2 has provided to work with messages. keeping up with our usual style, well use a practical-centric approach to learning ros, with some sort of twist here  a practical/theory sandwich! lets go! setup for the practicals to follow this post, you need access to a ros2 installation. there are two options for this. i recommend option 1; i used it for this post. avoid all headaches related to ros(2) installation and embrace the future  spin a development environment within a few seconds and with a few clicks on rosds . if you select this option, to open a terminal, just select the shell app on the rosds tools menu. keep all the headaches related with ros(2) installation; you have good reasons like supporting the drug companieskidding   use a local ros2 install or a pc with docker installed. okay, you just made your choice; now, lets shoot the first command. on a new terminal, spin up the ros2 docker machine. you can skip this if you have ros2 installed locally : user:~ docker run -it osrf/ros2:nightly unable to find image 'osrf/ros2:nightly' locally nightly: pulling from osrf/ros2 ... root@9cd3dc8de69a:/# good job; now we are ready for some action! so, what is a ros2 message? heres your sandwich! well, you had it coming; here you go! what does ros2 have to say  messages? in your open shell, type this command at the shell: root@9cd3dc8de69a:/# ros2 msg usage: ros2 msg [-h] call `ros2 msg <command> -h` for more detailed usage. ... various msg related sub-commands optional arguments: -h, --help show this help message and exit commands: list output a list of available message types package output a list of available message types within one package packages output a list of packages which contain messages show output the message definition call `ros2 msg <command> -h` for more detailed usage. thats  all you get to work with ros2 messages in the current version. the makers of ros2 decided to save you some typing by shortening message to msg, but you might find yourself typing ros2 message sometimes. not to worry, it happens, and the shell will faithfully do its job of shocking you back to reality :). but i digress back to the issue on ground: all that output above and not a word  what a ros2 message is? the shell output is rather assuming, dont you think? anyways, time to use some theory. well come back to the shell later on. a picture speaks a thousand words so they say. since the shell couldnt help us, maybe a picture will. here is it: key points  the picture above: nodes need to communicate with one another. they do so by sending and receiving messages over channels called topics . these are the basics of ros(2) messages. well see more in the tell and show subsections that follow. there are different kind of messages yes, depending on the goal. for instance, a message to move a robot wheel is different from a message to take a picture with its camera. lets see what the shell has to say  this, using the first command ( list ) shown in our first shell output: root@9cd3dc8de69a:/# ros2 msg list ... geometry_msgs/twist ... geometry_msgs/vector3 ... std_msgs/string ... root@9cd3dc8de69a:/# whew, we have a bucket list there (output truncated)! those are the message types bundled with ros2. you can create your own messages, but we wont talk  that here. you now know that there are many message type, but theres one more important thing you should know you need to know the structure of messages before you can use them effectively yes, that right: sending nodes need this to compose a valid message. receiving nodes need this to properly process the message received. lets say we want to send a string message hello world. looking at the list of bundled messages, std_msgs/string looks like a good candidate. how do we compose a message of that type? heres where the last command ( show ) proposed by our first shell output comes in: root@9cd3dc8de69a:/# ros2 msg show std_msgs/string string data so we know from the output above that we need to compose a message object with a single variable data of string type. now lets send the message over the wire: root@9cd3dc8de69a:/# ros2 topic pub /world std_msgs/string "data: hello world!" publisher: beginning loop publishing #1: std_msgs.msg.string(data='hello world!') remember we mentioned that we send messages over channels called topics? here were sending out message over the /world channel. if you want to learn more  working with topics, please see this post . take home  make your own sandwich! so far so good! having taken the sandwich in the section above, i believe you have come of age and can make some yourself now  . the following were intentionally left out of this post, try them out: examine the structure of the geometry_msgs/twist , geometry_msgs/vector3 and any other message(s) you wish from the bucket list of message types. try out the message sub-commands shown in the first shell output: package and packages . video version of this post one mans meat is another mans fish. if you prefer to learn  ros2 messages by watching a short video, we have one for your below. happy watching! feedback did you like this post or the video? whatever the case, please leave us your thoughts in the comments section below, so we can interact and learn from each other. if you want to learn  other ros topics, please let us know in the comments area and we will do a post or video  it. thank you! topics: ros q&a | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail