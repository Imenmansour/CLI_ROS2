how to pass ros2 arguments to a ros2 node via the command line written by ruben alves  ros2 q&a | ros2 tutorials  09/09/2022 what we are going to learn how to put a node inside a namespace how to remap a topic how to set a node parameter how to set the logger level list of resources used in this post use the rosject: https://app.theconstructsim.com/#/l/4e79d8dd/ the construct: https://app.theconstructsim.com/ ros2 guide: https://docs.ros.org/en/humble/how-to-guides/node-arguments.html ros2 courses  ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 overview in this post we are going to show are ros arguments are, how to use them from the command line with the ros-args flag, and how they can modify some aspects of a ros node in a ros network. ros inside! ros inside before anything else, in case you want to use the logo above on your own robot or laptop, feel free to download it for free and attach it to your robot. it is really free. find it in the link below: ros inside logo opening the rosject in order to learn how to pass ros2 arguments to a ros2 node via the command line, we need to have ros2 installed in our system, and it is also useful to have some simulations. to make your life easier, we already prepared a rosject with a simulation for that: https://app.theconstructsim.com/#/l/4e79d8dd/ you can download the rosject to your own computer if you want to work locally, but just by copying the rosject (clicking the link), you will have a setup already prepared for you. after the rosject has been successfully copied to your own area, you should see a run button. just click that button to launch the rosject (below you have a rosject example). ros2 arguments  run rosject (example of the run button) after pressing the run button, you should have the rosject loaded. lets now head to the next section to really get some real practice. launching the simulation the rosject we provided contains the packages needed to run a simulation in ros2. the ros2_ws ( ros2 workspace ) is already compiled. lets compile it again just in case. for that, lets first open a terminal : open a new terminal now, lets compile the ros2_ws folder: cd ~/ros2_ws colcon build once the workspace is compiled, lets source it. source install/setup.bash now that the workspace is compiled and sourced, lets start the simulation by running the following commands: cd ~/ros2_ws/src/t3_humble ./start_sim_house.sh the simulation should have been loaded, as we can see on the left side of the image below: ros2 ros-args: simulation launched starting a normal obstacle avoidance node (without ros-args) now that we have the simulation running, lets run the obstacle avoidance node. for that, lets open a new terminal, lets call it second terminal and type the following command on it: ros2 run rule_based_obstacle_avoidance obstacle_avoidance lets now to go to a third terminal and list the ros2 nodes there: ros2 node list the expected list of nodes should be similar to the following: /obstacleavoidance /camera_driver /gazebo /robot_state_publisher /turtlebot3_diff_drive /turtlebot3_imu /turtlebot3_joint_state /turtlebot3_laserscan lets take the chance and also check the list of ros2 topics still in the third terminal : ros2 topic list we should have something like this: /camera/camera_info /camera/image_raw /camera/image_raw/compressed /camera/image_raw/compresseddepth /camera/image_raw/theora /clock /cmd_vel /imu /joint_states /odom /parameter_events /performance_metrics /robot_description /rosout /scan /tf /tf_static starting the obstacle avoidance node in a specific namespace (using ros-args) now that we saw how to launch a normal node in ros2, lets see how to launch it in a specific namespace. for that, we are going to use the ros-args parameter when running ros2 run . lets go to the second terminal where we launched the node, and stop the node by pressing ctrl+c. after the node has stopped, lets launch it again in the /robot1 namespace. ros2 run rule_based_obstacle_avoidance obstacle_avoidance --ros-args -r __ns:=/robot1 if we now list the nodes again, just as we did before in the third terminal , we should see something different: ros2 node list the output must be something like this: /camera_driver /gazebo /robot1/obstacleavoidance /robot_state_publisher /turtlebot3_diff_drive /turtlebot3_imu /turtlebot3_joint_state /turtlebot3_laserscan as we can see, now the obstacleavoidance node that we just launched is under the /robot1 namespace. the reason why the other nodes are not under a namespace is that those nodes were launched in the first terminal, where we launched the simulation. we can also check the topics now, in order to find whether the obstacle avoidance-related topics are under the namespace. lets run the following command in the third terminal: ros2 topic list we should have something similar to this: /camera/camera_info /camera/image_raw /camera/image_raw/compressed /camera/image_raw/compresseddepth /camera/image_raw/theora /clock /cmd_vel /imu /joint_states /odom /parameter_events /performance_metrics /robot1/cmd_vel /robot1/scan /robot_description /rosout /scan /tf /tf_static the important difference in the list of topics here are the cmd_vel and scan topics, which are now under the /robot1 namespace, yet, some topics with the same name without the namespace: ... /cmd_vel ... /robot1/cmd_vel /robot1/scan ... /scan the topics under the / robot1 namespace are the ones that the obstacle avoidance node subscribes to. the topics without the namespace are watched by other nodes in the gazebo simulation, not by the obstacle avoidance. why have a namespace for ros2 nodes? one of the reasons why namespaces are useful is because this way, you can run the same node multiple times, once for each robot. this way, you will not have two robots processing the same messages, nor will you have to change your code to consider whether the code is running on robot1 or robot2, for example. you can run multiple instances of a node with the same name, as long as they are in different namespaces. examples: ros2 run rule_based_obstacle_avoidance obstacle_avoidance --ros-args -r __ns:=/robot1 ros2 run rule_based_obstacle_avoidance obstacle_avoidance --ros-args -r __ns:=/robot2 asg a different name to a ros2 node using ros-args in order to change the name of a given ros2 node, we use the __node variable. in order to run this example, please remember to kill the node that we launched in the second terminal by pressing ctrl+c . once the old node is terminated, we can launch it again with a different name using the following command: ros2 run rule_based_obstacle_avoidance obstacle_avoidance --ros-args --remap __node:=collision_avoidance the above command will cause the node to be started under the node collision_avoidance name. lets check it by listing the nodes using the third terminal : ros2 node list you should now see the /collision_avoidance . instead of /obstacle_avoidance that we had before. changing topic names in ros2 (remapping) remapping means changing topics names. so far we have learned how to add a namespace to a node, and how to change the node name. time now has come to learn how to change the topic that a given node publishes or subscribes to. lets go again to the second terminal , kill the node we launched earlier by pressing ctrl+c, then launch the node again using the command below: ros2 run rule_based_obstacle_avoidance obstacle_avoidance --ros-args -r scan:=laser_scan the command above will make the node subscribe to the topic named laser_scan instead of the default scan . if you now check the topics again in the third terminal , you should see the /laser_scan topic, which is the one that the obstacle avoidance subscribes to: ros2 topic list setting parameters directly from the command line when the node starts up if you pay attention carefully, you will see that up to now we have been using the  ros-args remap parameters. now, in order to pass parameters to the node, we use ros-args -p instead. in order to set the  safety_distance  parameter to 0.5, for example, we would use the following command in the second terminal: ros2 run rule_based_obstacle_avoidance obstacle_avoidance --ros-args -p safety_distance:=0.5 to check of the parameter was set, we can start by listing the parameters in the third terminal: ros2 param list with the command above you will see that we have a node called obstacleavoidance and there is a parameter called safety_distance associated with the node. we can check the value of the node with the following command: ros2 param get obstacleavoidance safety_distance after retrieving the value, you will see that it matches exactly with the value we set in the second terminal when we ran the node. setting logger level using ros-args now we will see that we can control log severity levels printed out to the terminal, using the command line. lets go again to our second terminal and kill the node we launched previously by pressing ctrl+c . after the node has stopped, lets run the following command: ros2 run rule_based_obstacle_avoidance obstacle_avoidance --ros-args --log-level debug the command above specifies that our logger level is debug, which means we will see basically all log messages, given that debug is the lowest level. we set the level to debug , but you could also use info , warn or error , for example. after having launched the node, you should have seen a lot of log messages coming out, logs that we didnt have the previous times. using different parameters, you can control which logs you are going to see, without having to recompile your nodes, in case the nodes are in c++. congratulations on reaching the end of this post. we really hope it was of great use to you. if case you want a live version of this post, please check the video in the next section. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. related courses & training if you want to learn more  ros and ros2, we recommend the following courses: ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 topics: check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment δ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail