the ros 2 project feature ideas edit on github you're reading the documentation for an older, but still supported, version of ros 2. for information on the latest version, please have a look at jazzy . feature ideas ï the following are feature ideas in no specific order. this list contains features that we think are important and can make for good contributions to ros 2. please get in touch with us before digging into a new feature. we can offer guidance, and connect you with other developers. design / concept ï idl format leverage new features like grouping constants into enums extend usage to .idl files with just constants and/or declare parameters with ranges revisit constraints of idl interface naming, see ros2/design#220 create migration plan for ros 1 -> ros 2 transition uniqueness of node names, see ros2/design#187 specific âapiâ of a node in  of topics / services / etc. in a descriptive format, see ros2/design#266 infrastructure and tools ï building consolidate https://build.ros2.org and https://ci.ros2.org provision macos windows and macos packages support profiles in colcon documentation deprecate https://design.ros2.org . content should move to either an rep, to https://github.com/ros2/ros2_documentation , or be removed. fix per-package documentation builder to be able to document build artifacts, i.e. messages, services, actions, etc. make https://docs.ros.org/en/ros2_documentation automatically rebuild on changes to https://github.com/ros2/ros2_documentation . ament documentation add documentation examples of using ros 2 with jupyter notebooks. add documentation for implementing a new rmw. provide three different kinds of content: âdemosâ to show features and cover them with tests âexamplesâ to show a simple/minimalistic usage which might have multiple ways to do something âtutorialsâ which contain more comments and anchors for the wiki (teaching one recommended way) new features ï the trailing stars indicate the rough effort: 1 star for small, 2 stars for medium, 3 stars for large. logging improvements [* / **] configuration specified in a file per-logger configuration (enabling e.g. rqt_logger_level ) time related support rate and sleep based on clock additional graph api features [** / ***] introspect qos setting for all (especially remote) topics a la ros 1 master api: https://wiki.ros.org/ros/master_api event-based notification requires knowledge of the rmw interface which needs to be extended executor performance improvements (mostly around the waitset) deterministic ordering (fair scheduling) decouple waitables message generation catch-up message generation for languages not supported out-of-the-box mangle field names in message to avoid language specific keywords improve generator performance by running them in the same python interpreter launch support for launching multi-node executables (i.e. manual composition) extend launch xml/yaml support: events and event handlers, tag namespaces and aliasing rosbag support recording services (and actions) ros1_bridge support bridging actions rmw configuration unified standard way of configuring the middleware remapping [** / ***] dynamic remapping and aliasing through a service interface type masquerading [***] a la ros 1âs message traits: https://wiki.ros.org/roscpp/overview/messagesserializationandadaptingtypes requires knowledge of the typesupport system expand on real-time safety [***] for services, clients, and parameters expose more quality of service parameters related to real-time performance real-time-safe intra-process messaging multi-robot supporting features and demos [***] undesired that all nodes across all robots share the same domain (and discover each other) design how to âpartitionâ the system support more dds / rtps implementations: rti connext dds micro (implemented, not enabled by default or officially supported). security improvements: more granularity in security configuration (allow authentication only, authentication and encryption, etc.) [*] integrate dds-security logging plugin (unified way to aggregate security events and report them to the users through a ros interface) [**] key storage security (right now, keys are just stored in the filesystem) [**] more user friendly interface (make it easier to specify security config). maybe a qt gui? this gui could also assist in distributing keys somehow. [***] a way to say âplease secure this running systemâ with some ui that would auto-generate keys and policies for everything that is currently running. [***] if there are hardware-specific features for securing keys or accelerating encryption/g messages, that could be interesting to add to dds/rtps implementations that donât use it already. [***] reducing technical debt ï fix flaky tests on https://ci.ros2.org/view/nightly . ability to run (all) unit tests with tools e.g. valgrind, clang-tidy, clang static analysis (scan-build), asan, tsan, ubsan, etc. api review, specifically user-facing apis in rclcpp and rclpy refactor the rclcpp api into separate packages focused on a single aspect, rclcpp should afterward still provide the combined user-facing api revisit message allocators, consider using std::polymorphic_allocator to address problems synchronize / reconcile design docs with the implementation. address / classify pending tickets address todos in code / docs remove tinyxml as a dependency other versions v: humble releases jazzy (latest) iron humble galactic (eol) foxy (eol) eloquent (eol) dashing (eol) crystal (eol) in development rolling