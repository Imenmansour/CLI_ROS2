the snapcraft cli (the tool used to create snaps ) has long had support for building snaps that use both ros 1 and ros 2. ros 2 foxy fitzroy is the latest ros 2 lts, which runs on ubuntu 20.04 (focal fossa). the snapcraft cli recently gained experimental support for building foxy snaps, so i wanted to walk you through doing exactly that with the goal of helping both of us: getting you familiar with this new feature, and at the same time getting some mileage on this so as to make it not experimental. lets get to it! prerequisites # in order to follow along, youll need at least v4.2 of the snapcraft cli:  sudo snap install --classic snapcraft of course, some previous experience building a snap will also be helpful. lets get started # the first step toward creating any snap is to create the snapcraft.yaml , which serves as the recipe instructing the snapcraft cli on how to piece together your snap. create the snapcraft.yaml # lets create a new directory, and then initialize it with a snapcraft.yaml :  mkdir ~/ros2-foxy-snap  cd ~/ros2-foxy-snap  snapcraft init created snap/snapcraft.yaml. go to https://docs.snapcraft.io/the-snapcraft-format/8337 for more information  the snapcraft.yaml format. open that snap/snapcraft.yaml file, and make it look like this: name : ros2-talker-listener version : '0.1' summary : ros2 talker/listener example description : | this example launches a ros2 talker and listener. grade : devel confinement : strict base : core20 parts : ros-demos : plugin : colcon source : https://github.com/ros2/demos.git source-branch : foxy source-subdir : demo_nodes_cpp build-packages : [ make, gcc, g++] stage-packages : [ ros-foxy-ros2launch] apps : ros2-talker-listener : command : opt/ros/foxy/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py plugs : [ network, network-bind] extensions : [ ros2-foxy] lets break that down by section. name : ros2-talker-listener version : '0.1' summary : ros2 talker/listener example description : | this example launches a ros2 talker and listener. this is the basic metadata required by all snaps. these fields are fairly self-explanatory, but note that the name must be globally unique among all snaps. you might consider appending your developer name to the end of the snap name, for example. grade : devel confinement : strict base : core20 grade can be either stable or devel . if its devel , the store will prevent you from releasing into one of the two stable channels ( stable and candidate , specifically). if its stable , you can release it anywhere. confinement can be strict , devmode , or classic . strict enforces confinement, whereas devmode allows all accesses, even those that would be disallowed under strict confinement, and logs access that would be disallowed. classic is even less confined than devmode in that it doesnt even get private namespaces anymore (among other things). there is more extensive documentation on confinement available. as ive said multiple times in the past, i typically use strict confinement unless i know for sure that the thing im snapping wont run successfully under confinement, in which case ill use devmode . i typically avoid classic unless i never intend for the snap to run confined (e.g. youll notice the snapcraft cli is a classic snap, since it needs more access to the host than confinement would allow). finally, the base keyword specifies a special kind of snap that provides a minimal set of libraries common to most applications (e.g. libc). it will be the root filesystem for this snap. in this case, were using core20 which is a minimal rootfs based upon ubuntu 20.04 (focal). parts : ros-demos : plugin : colcon source : https://github.com/ros2/demos.git source-branch : foxy source-subdir : demo_nodes_cpp build-packages : [ make, gcc, g++] stage-packages : [ ros-foxy-ros2launch] the snapcraft cli is responsible for taking many disparate parts and orchestrating them all into one cohesive snap. you tell it the parts that make up your snap, and it takes care of the rest. here, were saying that we have a single part called ros-demos . we specify that it builds using the colcon plugin, and we point it to the ros 2 demos github repository (this could just as easily be a directory on disk). we point the colcon plugin at the subdirectory containing the c++ demo nodes as opposed to letting it build the whole thing. we also provide a list of packages that need to be installed in order to build ( build-packages ), and also ask that ros-foxy-ros2launch gets staged into the snap alongside the rest of the part to be used at runtime (specifically, well use it in the app, below). to view all the options supported by the colcon plugin, run the command snapcraft help colcon . apps : ros2-talker-listener : command : opt/ros/foxy/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py plugs : [ network, network-bind] extensions : [ ros2-foxy] this part is interesting, and even if youve built snaps in the past there might be something new here. when we build this snap, it will include a complete ros 2 system: rclcpp , the demo_nodes_cpp workspace, etc. it could contain the entire system necessary for a robot in one installable blob. its a standalone unit: were in total control of how we want our users to interact with it. we exercise that control via the apps keyword, where we expose specific commands to the user. here we specify that this snap has a single app called ros2-talker-listener (the same name as the snap itself), although it could be anything. the command that this app actually runs within the snap uses the ros-foxy-ros2launch that we staged to fire up the demo nodes' talker/listener launch file. we use plugs to specify that this app requires network access ( read more  interfaces ). finally, the new bit: we specify that this uses the ros2-foxy extension. this is where a significant chunk of the magic happens, wrapping the app in the environment necessary to run ros 2 foxy stuff, etc. every app that needs ros 2 will need to use that extension, and those that dont need ros 2 dont need the extension ( read more  snapcraft extensions ). build the snap # now that weve defined the snapcraft.yaml , its time to build the snap. make sure youre in the directory we created earlier (the one that contained the snap/ directory), and run snapcraft with the --enable-experimental-extensions flag (i told you this was experimental):  cd ~/ros2-snap  snapcraft --enable-experimental-extensions *experimental* extensions enabled. *experimental* extension 'ros2-foxy' enabled. <snip> snapped ros2-talker-listener_0.1_amd64.snap note that depending on your host and whether or not youve built snaps in the past, the snapcraft cli may prompt you to install multipass, a tool used by the snapcraft cli to manage vms for building snaps (rather than building straight on your host). the build process will take a few minutes. youll see the snapcraft cli install the build dependencies of the demo nodes, build the packages in the workspace and install them into the snap, and fetch their runtime dependencies and unpack them into the snap as well. this is a bit different than previous ros snap build processes that used rosdep : this uses catkin_pkg directly to avoid rosdep s issue of unpacking even build dependencies into the snap, which means ros snaps using extensions will be significantly smaller than in the past (and take less time to rebuild). anyway, at the end, youll have your snap. test the snap # lets install the snap we just built:  cd ~/ros2-snap  sudo snap install ros2-talker-listener_0.1_amd64.snap --dangerous note the use of the --dangerous flag. thats required because were installing a snap from disk instead of using the store, and snapd (the daemon with which were communicating using the snap command) only trusts snaps that it can cryptographically verify as being from the store unless we tell it otherwise with this flag. finally, lets run the app we defined in the snapcraft.yaml :  ros2-talker-listener <snip> [ info ] [ talker-1 ] : process started with pid [ 21071 ] [ info ] [ listener-2 ] : process started with pid [ 21073 ] [ talker-1 ] [ info ] [ 1597444182.799512859 ] [ talker ] : publishing: 'hello world: 1' [ listener-2 ] [ info ] [ 1597444182.800671590 ] [ listener ] : i heard: [ hello world: 1 ] [ talker-1 ] [ info ] [ 1597444183.799313385 ] [ talker ] : publishing: 'hello world: 2' [ listener-2 ] [ info ] [ 1597444183.799922986 ] [ listener ] : i heard: [ hello world: 2 ] ctrl+c to stop that. as you can see, it works great! you could hand this snap to anyone with a snap-capable system, even if they dont have ros installed, and it would work exactly the same way for them. i hope this is helpful in your snap journey, and gives you a decent guide to building ros 2 foxy snaps using the new ros2-foxy extension. please feel free to ask any questions here, on the snapcraft forums , or on the ros forums . id love to hear any feedback you have.