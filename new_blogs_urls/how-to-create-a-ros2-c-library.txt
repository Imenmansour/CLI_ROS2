how to create a ros2 c++ library written by bayode aderinola  ros2 q&a | ros2 tutorials  27/10/2022 in this post, you will learn how to create and use your own ros2 c++ library. ill show you how to create the library and then use it in a demo package. step 1: fire up a system with ros2 installation hey, do you mean i have to install ros2 first? absolutely not! just log in to the construct to get access to virtual machines pre-installed with ros. once logged in, click on my rosjects , then create a new rosject , supply the information as shown in the video and click create . then run the rosject. create a new rosject you might also want to try this on a local pc if you have ros2 installed. however, please note that we cannot support local pcs and you will have to fix any errors you run into on your own. the rest of the instruction assumes that you are working on the construct; please adapt them to your local pc and ros2 installation. step 2: create a new package that contains the librarys source code (logic) open a web shell open a web shell and run the following commands to create the package. cd ros2_ws/src source /opt/ros/humble/setup.bash/ ros2 pkg create my_value_converter_library --build-type ament_cmake --license bsd-3-clause now that your package is created, we need to create a header file for the library . move inside the include/my_value_converter_library directory and create a header file named library_header.h . cd ~/ros2_ws/src/my_value_converter_library/include/my_value_converter_library touch library_header.h now head over to the code editor to make changes to the header file. check the image below for how to open the code editor. open the code editor locate the header file in the code editor: ros2_ws > src > my_value_converter_library > include > my_value_converter_library > library_header.h and paste in the following code. #ifndef map_value_h #define map_value_h double map_value(double x, double in_min, double in_max, double out_min, double out_max); #endif next, we create the c++ source code file for the library. in the same web shell: cd ~/ros2_ws/src/my_value_converter_library/src touch my_value_converter_library.cpp locate the my_value_converter_library.cpp file in the code editor and paste in the following code: #include "my_value_converter_library/library_header.h" double map_value(double x, double in_min, double in_max, double out_min, double out_max) { return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; } now we need to edit the cmakelists.txt file of our package to recognize the source code we have just added. open the file ros2_ws > src > my_value_converter_library > cmakelists.txt and add the following lines before the ament_package() call. # let the compiler search for headers in the include folder include_directories(include) # define a library target called my_value_converter_library add_library(my_value_converter_library src/my_value_converter_library.cpp) # this line to exports the library ament_export_targets(my_value_converter_library has_library_target) # install the include/my_cpp_library directory to the install/include/my_cpp_library install( directory include/my_value_converter_library destination include ) install( targets my_value_converter_library export my_value_converter_library library destination lib archive destination lib runtime destination bin includes destination include ) so much for all the hard work  now is the time to see if it works. time to compile the code. in the same web shell, run the following commands: cd ~/ros2_ws colcon build success! we have now created our library. next, we are going to use it! ps: if your code did not compile correctly, please go over the instructions and ensure you have created the files in the exact locations specified. step 3: create a new package that uses the library you just created create the new package in the open shell. note that my_value_converter_library is passed as a dependency during the creation of the new package. this will simplify some of the work that needs to be done when modifying the cmakelists.txt file. cd ros2_ws/src ros2 pkg create my_value_converter_node --build-type ament_cmake --license bsd-3-clause --dependencies rclcpp std_msgs my_value_converter_library now verify that the dependencies have been properly added. if the build runs successfully, it is so. if not, please correct the errors before you proceed. cd ~/ros2_ws colcon build if you got to this point, great! now we will create the c++ source code that will use your library. cd ~/ros2_ws/src/my_value_converter_node/src touch my_value_converter_node.cpp now locate the my_value_converter_node.cpp file in the code editor and paste in the following source code. #include <memory> #include <string> #include "my_value_converter_library/library_header.h" #include "rclcpp/rclcpp.hpp" #include "std_msgs/msg/float32.hpp" class converternode : public rclcpp::node { public: explicit converternode() : node("converter_node") { auto callback = [this](const std_msgs::msg::float32::sharedptr input_msg) -> void { rclcpp_debug(this->get_logger(), "i heard: [%f]", input_msg->data); // use the library // map an value from 0 - 1023 range to -1.0 to +1.0 range double new_value = map_value(input_msg->data, 0, 1023, -1.0, 1.0); output_msg_ = std::make_unique<std_msgs::msg::float32>(); output_msg_->data = new_value; rclcpp_debug(this->get_logger(), "publishing: '%f'", output_msg_->data); pub_->publish(std::move(output_msg_)); }; sub_ = create_subscription<std_msgs::msg::float32>("output_topic", 10, callback); // create a publisher rclcpp::qos qos(rclcpp::keeplast(7)); pub_ = this->create_publisher<std_msgs::msg::float32>("input_topic", qos); } private: std::unique_ptr<std_msgs::msg::float32> output_msg_; rclcpp::publisher<std_msgs::msg::float32>::sharedptr pub_; rclcpp::subscription<std_msgs::msg::float32>::sharedptr sub_; }; int main(int argc, char *argv[]) { rclcpp::init(argc, argv); auto node = std::make_shared<converternode>(); rclcpp_info(node->get_logger(), "my value converter node started."); rclcpp::spin(node); rclcpp::shutdown(); return 0; } as you might have expected, we need to modify the cmakelists.txt file for our new package. locate the ros2_ws > src > my_value_converter_node > cmakelists.txt in the code editor and paste in the following code before the ament_package() call. # define the binary to be built and identify the source files with with which to build it add_executable(main src/my_value_converter_node.cpp) # tell cmake that the executable "main" depends on the library "my_value_converter_library" ament_target_dependencies(main my_value_converter_library rclcpp std_msgs) # install the executable in the lib folder to make it detectable through setup.bash install(targets main destination lib/{project_name}/ ) now build and use your package! cd ~/ros2_ws colcon build source install/setup.bash ros2 run my_value_converter_node main step 4: check your learning do you understand how to create a ros2 c++ library? if you dont know it yet, please go over the post again, more carefully this time. (extra) step 5: watch the video to understand how to install a ros2 binary package here you go: feedback did you like this post? do you have any questions  how to create a ros2 c++ library? please leave a comment in the comments section below, so we can interact and learn from each other. if you want to learn  other ros2 topics, please let us know in the comments area and we will do a video or post  it. topics: binaries | ros2 | ros2 binaries | ros2 packages | ros2 pkg check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 1 comment matheus sousa on 31/03/2023 at 7:07 pm great tutorial! thank you! reply submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail