how to create & test a publisher in ros2 (python) written by bayode aderinola  ros2 tutorials  14/01/2019 hello ros developers! in this post lets see how to create and test a publisher in ros2 using python (rclpy). i break it down into 5 easy steps, lets see one by one: create a python-based package in ros2. create the python code for your publisher. edit package.xml. replace cmakelists.txt with setup.py . run and test your python code in ros2. lets go! 1. create a python-based package in ros2 at this point, im taking for granted that you already have the following in place: your ros2 is installed and running. (dont have this? no issues, you can spin a free ros2 development environment at rosds . no installation required, just a few clicks and you will have a fully-functional ros2 installation within your browser.) you have created a ros2 workspace. need help on this? see this tutorial . once you have crossed the two bridges above, you just need to run this command from the src folder of your ros2 workspace: ~/ros2_ws/src ros2 pkg create ro2_pub_py here the name of the package is ros2_pub_py , and our workspace directory is ros2_ws . feel free to name yours differently. the final structure of your project should look something like this (when you have completed all steps): easy step 1 done! 2. create the python code for your publisher yes, you guessed right, we must write the publisher in python, since this post says using python. ros2 official repo provides 3 different ways with examples on how to write the python code. in this post, we will use the local function method becausei like it and get to decide here :)kiddingi think its still somewhat ros1-like while showcasing the differences in ros2. take home bonus: try translating the code into the old school and member function variants. enough small talk, lets do the work! create python file located at `~/ros2_ws/src/ro2_pub_py/sos_publisher.py`. heres the code: #  2016 open source robotics foundation, inc. # # licensed under the apache license, version 2.0 (the "license"); # you may not use this file except in compliance with the license. # you may obtain a copy of the license at # # http://www.apache.org/licenses/license-2.0 # # unless required by applicable law or agreed to in writing, software # distributed under the license is distributed on an "as is" basis, # without warranties or conditions of any kind, either express or implied. # see the license for the specific language governing permissions and # limitations under the license. import rclpy from std_msgs.msg import string def main(args=none): rclpy.init(args=args) node = rclpy.create_node('sos_publisher') publisher = node.create_publisher(string, 'sos') msg = string() def timer_callback(): msg.data = 'obiwan kenobi, please help me. you\'re my only hope' node.get_logger().info('publishing sos message: "%s"' % msg.data) publisher.publish(msg) timer_period = 0.5 # seconds timer = node.create_timer(timer_period, timer_callback) rclpy.spin(node) # destroy the timer attached to the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) node.destroy_timer(timer) node.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() a few notes  the code above: the statement import rclpy imports the ros2 python module. this is equivalent to import rospy in ros1. the statement from std_msgs import string imports the type of message the publisher uses. basically no change from ros1. the statements from rclpy.init(args=args) to publisher = node.create_publisher(string, 'sos') initialize the ros2 python module and create a node sos_publisher publishing to the topic sos . did you notice the subtle differences in how this is achieved in ros1? the variable timer provides similar functionality as rospy.rate() in ros1, providing the frequency at which a particular code block is repeated. next! 3. edit package.xml actually, this step is technically part of creating the python package, because the changes we are doing here is just indicating that its a python package. but i wanted to call this out separately because i think its an important step. now, the original package.xml should look something like this after creating the package: <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format2.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format="2"> <name>ros2_pub_py</name> <version>0.0.0</version> <description>todo: package description</description> <maintainer email="user@todo.todo">user</maintainer> <license>todo: license declaration</license> <buildtool_depend>ament_cmake</buildtool_depend> <test_depend>ament_lint_auto</test_depend> <test_depend>ament_lint_common</test_depend> <export> <build_type>ament_cmake</build_type> </export> </package> change to the following, following the example given in the official repo: <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format2.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format="2"> <name>ros2_pub_py</name> <version>0.0.0</version> <description>todo: package description</description> <maintainer email="user@todo.todo">user</maintainer> <license>apache license 2.0</license> <exec_depend>rclpy</exec_depend> <exec_depend>std_msgs</exec_depend> <!-- these test dependencies are optional their purpose is to make sure that the code passes the linters --> <test_depend>ament_</test_depend> <test_depend>ament_flake8</test_depend> <test_depend>ament_pep257</test_depend> <test_depend>python3-pytest</test_depend> <export> <build_type>ament_python</build_type> </export> </package> you can spot the differences, right? great, next step! 4. replace cmakelists.txt with setup.py similar to step 3 above, this is also something thats related to package creation that i decided to call out separately. these steps are necessary because as of now ros2 package creator does not yet support python-based packages out of the box (the package.xml and cmakelist.txt are created for a c-based package by default). hopefully, a future release would make these steps unnecessary. not in some many words: delete cmakelist.txt ; we dont need it here. add a setup.py properly configured for the package and python program. here you go, following the official example : from setuptools import setup package_name = 'ros2_pub_py' setup( name=package_name, version='0.0.0', packages=[], py_modules=[ 'sos_publisher', ], install_requires=['setuptools'], zip_safe=true, author='user', author_email="user@todo.todo", maintainer='user', maintainer_email="user@todo.todo", keywords=['ros', 'ros2'], classifiers=[ 'intended audience :: developers', 'license :: osi approved :: apache software license', 'programming language :: python', 'topic :: software development', ], description='todo: package description.', license='apache license, version 2.0', tests_require=['pytest'], entry_points={ 'console_scripts': [ 'sos_publisher = sos_publisher:main', ], }, ) also, add a setup.cfg file to the same location as setup.py : [develop] script-dir=base/lib/ros2_pub_py [install] install-scripts=base/lib/ros2_pub_py done here. last step! 5. run and test your python code in ros2 now time to ros2 run your code, but not so fast! before we become ros2-run-happy, we need to take care of some basic things so that we dont have bad surprises. in your ros2 workspace directory, run: ~/ros2_ws colcon build yes, we need to rebuild the package, after all those changes. also, we need to run: ~/ros2_ws source install/setup.bash && source install/local_setup.bash and then youre ready for ros2-run: ros2 run ros2_pub_py sos_publisher you should see output similar to: ~/ros2_ws ros2 run ros2_pub_py sos_publisher [info] [sos_publisher]: publishing sos message: "obiwan kenobi, please help me. you're my only hope" [info] [sos_publisher]: publishing sos message: "obiwan kenobi, please help me. you're my only hope" [info] [sos_publisher]: publishing sos message: "obiwan kenobi, please help me. you're my only hope" [info] [sos_publisher]: publishing sos message: "obiwan kenobi, please help me. you're my only hope" ... from another terminal, run the following commands and check the output: ~ ros2 node list /sos_publisher ~ ros2 topic list /parameter_events /sos ~ ros2 topic echo /sos data: obiwan kenobi, please help me. you're my only hope data: obiwan kenobi, please help me. you're my only hope data: obiwan kenobi, please help me. you're my only hope and were all done! final take away i hope you found this post useful. i would suggest that you try following the post and creating your package from scratch, but in case you want to have a sneak-peek at the code used for this post, you can find it here: https://rds.theconstructsim.com/r/bayodesegun/ros2_demo_4698/ . keep pushing your ros2 learning! ros2 basics course topics: python | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 3 comments anonymous on 03/01/2020 at 4:07 am just tried it and there are three problems with this code: 1.) your setup.py has a none python line (line 2) 2.) you forgot to add that the source code is either not in /src or line 8 is wrong. the correct way seems to be: py_modules=[ src/sos_publisher, ], (i couldnt believe that either but i tried it any other way and apparently you need to state the src folder) 3.) you do not even mention that ros2 is trying to object orient everything. i know that some people are not down for this but at least mention it somewhere. reply chidanand on 06/02/2020 at 8:25 am do you python code for publishing and subscribing to pointcloud reply chidanand on 06/02/2020 at 12:45 pm do you ros2 python code for publishing and subscribing to pointcloud reply submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment δ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail