how to use persistent parameters in ros2 written by ruben alves  ros2 q&a | ros2 tutorials  16/12/2022 what we are going to learn what persistent parameters are how to install the ros2_persist_parameter_server package how to run the ros2_persist_parameter_server package how to set and get persistent parameters from the command line how to get persistent parameters programmatically list of resources used in this post use the rosject: https://app.theconstructsim.com/l/51ef510a/ the construct: https://app.theconstructsim.com/ a repository from https://github.com/fujitatomoya ros2 courses  ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 overview in this post, we will have a look at the ros2_persist_parameter_server package by the github user fujitatomoya . with this package, you can have parameters saved to the disk. this way they are not lost when the machine is powered off or reset. the package we are going to use can be found at: https://github.com/fujitatomoya/ros2_persist_parameter_server ros inside! ros inside before anything else, in case you want to use the logo above on your own robot or computer, feel free to download it for free and attach it to your robot. it is really free. find it in the link below: ros inside logo how to set and get persistent parameters in ros2 you might already know that in ros 2, all parameters are node-specific. a far less discussed aspect of parameters is their non-persistent nature. non-persistent parameters are those parameters whose values are not saved to the disk. they are lost when the machine is powered off or reset. in this post, we will have a look at the ros2_persist_parameter_server package aforementioned. we would like to thank tomoya fujita for making it open source. opening the rosject in order to follow this tutorial, we need to have ros2 installed in our system, and ideally a ros2_ws (ros2 workspace). to make your life easier, we already prepared a rosject with a simulation for that: https://app.theconstructsim.com/l/51ef510a/ . you can download the rosject on your own computer if you want to work locally, but just by copying the rosject (clicking the link), you will have a setup already prepared for you. after the rosject has been successfully copied to your own area, you should see a run button. just click that button to launch the rosject (below you have a rosject example). learn ros2 topics vs service vs action  run rosject (example of the run button) after pressing the run button, you should have the rosject loaded. now, lets head to the next section to get some real practice. get the ros2_persist_parameter_server package and compile it after having opened the rosject, lets close the ros2_persist_parameter_server package. for that, lets open a terminal by clicking the open a new terminal button. open a new terminal once inside the terminal, lets run the commands below: cd ~/ros2_ws/src git clone https://github.com/fujitatomoya/ros2_persist_parameter_server.git cd ~/ros2_ws/ colcon build source install/setup.bash running the parameter_server server node still in the first terminal , lets run the parameter server, specifying where to save the parameters using the -f parameter: ros2 run parameter_server server -f /home/user/ros2_ws/persistent_parameters.yaml now, lets set a ros2 parameter using the following command in a second terminal : ros2 param set /parameter_server persistent.some_int 81 we should see the following output: set parameter successful one thing worth noticing in the command above is the  persistent.  prefix in the some_int parameter. the parameters need that prefix in order to be saved automatically in the /home/user/ros2_ws/persistent_parameters.yaml file. we can now set more parameters, which should also be successfully set: ros2 param set /parameter_server persistent.a_string konnichiwa ros2 param set /parameter_server persistent.pi 3.14159265359 ros2 param set /parameter_server persistent.some_lists.some_integers 81,82,83,84 after the parameters are set, we can list them using the following command: ros2 param list how to use persistent parameters in ros2 we can also retrieve the persistent.pi parameter, for example, just in case you want to be really sure that it is there: ros2 param get /parameter_server persistent.pi you can now kill the node running in the first terminal by pressing ctrl+c . you can also make sure there are no nodes running by running: ros2 node list now, lets start the node again to see that the parameters are loaded: ros2 run parameter_server server -f /home/user/ros2_ws/persistent_parameters.yaml and again, in another terminal you can list the parameters again, to confirm that the parameters from the previous session were successfully loaded: ros2 param list ros2 param get /parameter_server persistent.pi get those persistent parameters programmatically from another node alright. we have saved the parameters but they are related to a node that does nothing nothing. we need to be able to use those values in a ros 2 node that really does some hard work. in ros 2, parameters are available via service interfaces. we could implement a service client ourselves and retrieve the parameters associated with any individual node. however, we could also use the rclpcpp library includes this functionality built in. the rclcpp library implements the classes syncparametersclient and asyncparametersclient on which you can call functions like get_parameters that will handle the service calls to retrieve values  one or more parameters. lets create another package called my_app_node using a third terminal (make sure you still have the server running in the first terminal) : cd ~/ros2_ws/src ros2 pkg create my_app_node --build-type ament_cmake --dependencies rclcpp cd ~/ros2_ws/src/my_app_node/src touch my_app_node.cpp you can now open the ~/ros2_ws/src/my_app_node/src/my_app_node.cpp file using the code editor to paste some content on it. you can open the code editor by clicking on the second link of the bottom bar: open the ide  code editor once the code editor is open, you should be able to see the ros2_ws folder (ros2 workspace) and navigate to the my_app_node.cpp file we just created. after having the file open, lets past the following content to it to read the value of the persistent.a_string variable: #include "rclcpp/rclcpp.hpp" class myappnode : public rclcpp::node { public: myappnode() : node("my_app_node") { parameters_client = std::make_shared(this, "/parameter_server"); parameters_client->wait_for_service(); auto parameters_future = parameters_client->get_parameters( {"persistent.a_string"}, std::bind(&myappnode::callbackparamserver, this, std::placeholders::_1)); } void callbackparamserver(std::shared_future<std::vector> future) { auto result = future.get(); auto param = result.at(0); rclcpp_info(this->get_logger(), "got persistent parameter: %s", param.as_string().c_str()); } private: std::shared_ptr parameters_client; }; int main(int argc, char * argv[]) { rclcpp::init(argc, argv); rclcpp::spin(std::make_shared()); rclcpp::shutdown(); return 0; } you can now save the file by pressing ctrl+s . let us now open the cmakelists.txt file found at ~/ros2_ws/src/my_app_node . below the existing dependency find_package(ament_cmake required) , add the following lines: find_package(rclcpp required) add_executable(my_app_node src/my_app_node.cpp ) ament_target_dependencies(my_app_node rclcpp ) install(targets my_app_node destination lib/{project_name} ) we can now compile our package using the commands below: cd ~/ros2_ws/ colcon build source install/setup.bash ros2 run my_app_node my_app_node if everything went well, you should see the value of persistent.a_string printed. congratulations!!! you now know how to persist ros 2 parameters, and retrieve them programmatically using a ros 2 node. we hope this post was really helpful to you. if you want a live version of this post with more details , please check the video in the next section. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. related courses & training if you want to learn more  ros and ros2, we recommend the following courses: ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 ros2 navigation (galactic): https://app.theconstructsim.com/course/109 ros2 navigation training : https://www.theconstruct.ai/ros2-navigation-training/ get ros2 industrial ready- hands-on training by the construct cover.png topics: ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail