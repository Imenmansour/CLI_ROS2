[ros2 q&a] 228  how to work with rosbags and laser_assembler in ros2 written by ruben alves  ros2 tutorials  04/02/2022 what we are going to learn how to record your own rosbag how to use laser_assembler package how to visualize results from ros2 list of resources used in this post use the rosject: https://app.theconstructsim.com/#/l/4733ef97/ ros development studio (rosds)  http://rosds.online robot ignite academy  https://www.robotigniteacademy.com [ros q&a] 047  how to use the laser_assembler package: https://www.youtube.com/watch?v=mya0as18wkk ros2 tutorials  ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 ros2 navigation : https://app.theconstructsim.com/#/course/50 get ros2 industrial ready 3-day online workshop the question that this post answers: https://answers.ros.org/question/393958/unable-to-visualize-point-cloud-in-rviz-using-rosbag-in-ros2/ creating a rosject in order to learn how to see data coming from rosbags in ros2 depth camera data, we need to have ros installed. we already prepared a rosject ready for that: https://app.theconstructsim.com/#/l/4733ef97/ . you can download the rosject on your own computer if you prefer to work locally. if you want to create your own rosject instead of using the link we just provided, you can do it also. we are going to use the construct ( https://www.theconstruct.ai/ ) for this tutorial, but if you have ros2 installed on your own computer, you should be able to do ~everything on your own computer, except this creating a rosject part. lets start by opening the construct ( https://www.theconstruct.ai/ ) and logging in. you can easily create a free account if you still dont have one. once inside, lets create my rosjects and then, create a new rosject if you decided taking this route: my rosjects create a new rosject for the rosject, lets select ros2 foxy for the ros distro, lets name the rosject as you want. you can leave the rosject public. you should see the rosject you just created in your rosjects list (the name is certainly different from the example below that was added just for learning purposes) list of rosjects  using depth camera in ros2 to determine object distance if you mouse over the recently created rosject, you should see a run button. just click that button to launch the rosject. launching the laser_scan_assember server to convert from laser scan to point cloud assuming you have a copy of the rosject , after opening it by clicking the run button mentioned earlier, lets open the ide (code editor) to see its content. open the ide  code editor you should see a rosbag file named 2022-01-17-11-40-32.bag , which is a rosbag for the turtlebot simulation. in order to launch the laser_scan_assembler, we need a launch file. if you check carefully, you may notice that we already have a launch file under the path ~/catkin_ws/src/laser_assembler_demo/launch/assembler.launch . its content is as follows: <launch> <node type="laser_scan_assembler" pkg="laser_assembler" name="my_assembler"> <!-- <remap from="scan" to="tilt_scan"/> --> <param name="max_scans" type="int" value="400" /> <param name="fixed_frame" type="string" value="base_footprint" /> </node> </launch> well, before launching that file, lets learn how to record a rosbag file, in case you want at some point create your own: creating a rosbag file in order to create a rosbag file, lets start by opening a new terminal: open a new terminal after opening the shell, lets source ros noetic: source /opt/ros/noetic/setup.bash lets also source the simulation_ws (simulation workspace), because it is where we have the turtlebot simulation source simulation_ws/devel/setup.bash rospack profile now, lets launch a turtlebot simulation with the following commands: export turtlebot3_model=burger roslaunch turtlebot3_gazebo turtlebot3_world.launch you can click open gazebo to make sure the simulation is running (although for you it may not show the blue laser in gazebo) click open gazebo to view the gazebo simulation you can now open a new web shell and list the topics with the following command: source /opt/ros/noetic/setup.bash rostopic list the list of topics should be something like the following: /clock /cmd_vel /gazebo/link_states /gazebo/model_states /gazebo/parameter_descriptions /gazebo/parameter_updates /gazebo/performance_metrics /gazebo/set_link_state /gazebo/set_model_state /imu /joint_states /odom /rosout /rosout_agg /scan /tf so, in order to record all topics in a rosbag file, you can just run the rosbag record -a command. you can press ctrl+c to stop recording, or youcan also especify the duration param if you want to record only for a few seconds or minutes (because rosbag files grow really fast): rosbag record -a --duration=1m the logs should be similar to the following: [ info] [1643640738.398965449, 298.390000000]: recording to '2022-01-31-14-52-18.bag'. [ info] [1643640738.402667915, 298.395000000]: subscribing to /rosout_agg [ info] [1643640738.408196688, 298.402000000]: subscribing to /rosout [ info] [1643640738.417414694, 298.406000000]: subscribing to /clock [ info] [1643640738.492442317, 298.422000000]: subscribing to /gazebo/link_states [ info] [1643640738.511223062, 298.468000000]: subscribing to /gazebo/model_states [ info] [1643640738.518154757, 298.481000000]: subscribing to /gazebo/performance_metrics [ info] [1643640738.526057506, 298.488000000]: subscribing to /gazebo/parameter_descriptions [ info] [1643640738.598167676, 298.535000000]: subscribing to /gazebo/parameter_updates [ info] [1643640738.784914410, 298.633000000]: subscribing to /scan [ info] [1643640738.795856579, 298.650000000]: subscribing to /joint_states [ info] [1643640738.806535006, 298.665000000]: subscribing to /tf [ info] [1643640738.817849095, 298.673000000]: subscribing to /odom [ info] [1643640738.901146360, 298.732000000]: subscribing to /imu lets use the rosbag file that already exists, called 2022-01-17-11-40-32.bag . playing a rosbag file now that we have learned how to record a rosbag file, lets play the one that we already had, called 2022-01-17-11-40-32.bag. before that, lets kill the simulation we launched previously (pressing ctrl+c in the terminal where we launched the simulation). if we now check the topics again, we should have only the following 3 topics: rostopic list /clock /rosout /rosout_agg lets first start roscore: roscore & if you wait  ~5 seconds, roscore will be running. after that, we can run rosbag: rosbag play 2022-01-17-11-40-32.bag the output would be similar to the following: setting /run_id to 5cbe4c68-82c9-11ec-bbc7-0242c0a86007 [ info] [1643656195.261386757]: connected to master at [1_xterm:11311] [ info] [1643656195.265748530]: opening 2022-01-17-11-40-32.bag process[rosout-1]: started with pid [1430] started core service [/rosout] waiting 0.2 seconds after advertising topics... done. hit space to toggle paused, or 's' to step. [running] bag time: 345.418104 duration: 13.739104 / 70.197000 if we now check the topics again in another terminal, we will have the topics listed again: source /opt/ros/noetic/setup.bash rostopic list which would give us: /clock /gazebo/link_states /gazebo/model_states /gazebo/parameter_descriptions /gazebo/parameter_updates /gazebo/performance_metrics /imu /joint_states /odom /rosout /rosout_agg /scan /tf /tf_static you can now kill the rosbag play process, now that you learned how to play it and how it works. launching the laser_scan_assember server to convert from laser scan to point cloud lets start by opening 6 terminals. if you want, you can name them like the names below to easily know what each terminal is doing: 1  roscore 2  rosbag 3  assembler 4  call_assembler 5  bridge 6  rviz2 in the end, you would have something like the following image: how to work with rosbags and laser_assembler in ros2 14-36 lets launch roscore in the first terminal (named roscore) if you have killed it: source /opt/ros/noetic/setup.bash roscore now lets run rosbag play in the second terminal: source /opt/ros/noetic/setup.bash while true; do rosbag play 2022-01-17-11-40-32.bag; sleep 1; done the reason why we are running inside a while loop is because it finishes after ~70 seconds, which is the duration of the rosbag file. by being inside the while loop, it keeps running forever until we stop it with ctrl+c . now in the third terminal, lets run the laser assembler: source ~/catkin_ws/devel/setup.bash roslaunch laser_assembler_demo assembler.launch lets now in the 4th terminal and list the services: source ~/catkin_ws/devel/setup.bash rosservice list you should see the services running.: /assemble_scans / assemble_scans2 /build_cloud /build_cloud2 /my_assembler/get_loggers /my_assembler/set_logger_level /play_1643657183488619006/get_loggers /play_1643657183488619006/pause_playback /play_1643657183488619006/set_logger_level /rosout/get_loggers /rosout/set_logger_level still in the 4th terminal , we can now run the node used to call the assembler: rosrun laser_assembler_demo call_assembler.py the output you should get must be similar to the following: got cloud with 2592000 points got cloud with 2592000 points got cloud with 2592000 points got cloud with 2592000 points ... everything so far was running in ros1. lets now run ros1_bridge in the 5th terminal to be able to see the topics in ros2. source /opt/ros/noetic/setup.bash source /opt/ros/foxy/setup.bash ros2 run ros1_bridge dynamic_bridge --bridge-all-topics among other text output, you should see the following: created 1to2 bridge for topic '/clock' with ros 1 type 'rosgraph_msgs/clock' and ros 2 type 'rosgraph_msgs/msg/clock' created 1to2 bridge for topic '/gazebo/link_states' with ros 1 type 'gazebo_msgs/linkstates' and ros 2 type 'gazebo_msgs/msg/linkstates' created 1to2 bridge for topic '/gazebo/model_states' with ros 1 type 'gazebo_msgs/modelstates' and ros 2 type 'gazebo_msgs/msg/modelstates' created 1to2 bridge for topic '/imu' with ros 1 type 'sensor_msgs/imu' and ros 2 type 'sensor_msgs/msg/imu' created 1to2 bridge for topic '/joint_states' with ros 1 type 'sensor_msgs/jointstate' and ros 2 type 'sensor_msgs/msg/jointstate' created 1to2 bridge for topic '/laser_pointcloud' with ros 1 type 'sensor_msgs/pointcloud2' and ros 2 type 'sensor_msgs/msg/pointcloud2' created 1to2 bridge for topic '/odom' with ros 1 type 'nav_msgs/odometry' and ros 2 type 'nav_msgs/msg/odometry' created 1to2 bridge for topic '/rosout' with ros 1 type 'rosgraph_msgs/log' and ros 2 type 'rcl_interfaces/msg/log' created 1to2 bridge for topic '/rosout_agg' with ros 1 type 'rosgraph_msgs/log' and ros 2 type 'rcl_interfaces/msg/log' created 1to2 bridge for topic '/scan' with ros 1 type 'sensor_msgs/laserscan' and ros 2 type 'sensor_msgs/msg/laserscan' created 1to2 bridge for topic '/tf' with ros 1 type 'tf2_msgs/tfmessage' and ros 2 type 'tf2_msgs/msg/tfmessage' created 1to2 bridge for topic '/tf_static' with ros 1 type 'tf2_msgs/tfmessage' and ros 2 type 'tf2_msgs/msg/tfmessage now, lets launch rviz2 in the 6th terminal: rviz2 if you now open the graphical tools, you should be able to see rviz: open graphical tools / rviz once you have opened the graphical tools, lets change the fixed frame in rviz2 to / base_footprint instead of / map . lets also click add (in the left bottom of rviz2) and select a point cloud2. after the pointcloud2 was added, lets select the topic /laser_pointcloud (as defined on ~/catkin_ws/src/laser_assembler_demo/src/call_assembler.py ): now, you should be able to see the laser being shown in rviz2 ( in red ). laser pointcloud being output in rviz2 with ros1_bridge congratulations. you now know how to work with rosbags and laser_assembler in ros2. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. related courses & training if you want to learn more  ros and ros2, we recommend the following courses: ros basics in 5 days ros2 basics for python get ros2 industrial ready 3-day online workshop topics: laser_assembler | ros2 | rosbags check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment δ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail