ros2 vs ros1? or more like ros2 + ros1? written by miguel angel  ros q&a | ros2 tutorials  21/12/2018 this 14th of december of 2018, ros2 crystal clemmys was released officially. its a very important step due to the fact that it adds enough new functionality versus its prior older brother ros2 bouncy bolson to be a real option to consider to make the jump from ros to ros2. so here are some of my findings and facts  ros2 versus ros1. just bear in mind that crystal is evolving really fast and it wouldnt be a surprise that more improvements appear in the near future. use differences between ros2 and ros1 we will talk  ros2 crystal being the latest release. we will talk  the main basic differences in the way you use ros2 versus ros1: launch files using .xml format are gone . forget what you knew  launching nodes and other launch files using the package structure. the system now relies upon python files launching binaries or python scripts. you will use the python module launch and package launch_ros. here you have a basic example of how the binary tc_node from a package called the_construct_pkg would be launched now . from launch import launchdescription import launch_ros.actions def generate_launch_description(): return launchdescription([ launch_ros.actions.node( package='the_construct_package', node_executable='tc_node', output='screen'), ]) catkin_make is gone : catkin has been replaced by colcon . this new building system is in essence a universal building system for the ros ecosystem. this means that it can compile not only ros2 packages, but packages from ros1 or even packages without any manifest. this is really useful to compile non-ros-packages like gazebo, which traditionally was something to compile separated from ros. its grammar is very similar to the good old catkin_make: # compile one package colcon build --symlink-install --packages-select cpp_unit_3_services # for everything in the "ros2_workspace" colcon build ros packages support exists but with some manual labor: ros2 supports perfectly cpp projects with the rclcpp. python projects is another story. although you can create rospackages that use python code with rclpy ros library in their scripts and rosrun those programs, the packages need to be configured manually for python use adding the ament_python export in the package xml . but that is defining the build type of the package and therefore, for the moment you wont have easy mixing cpp and python code in the same package. as for the main great features that ros2 gives among others is the great capability of managing easily multiple robots and preliminary real-time programming support, features that are very welcomed by the community no doubt  that. can i use ros2 completely forgetting ros1? ros1bridge the quick answer is: yes but with drawbacks . so ros2 crystal has worked with the new gazebo with ros2 support, so you have access to creating your own simulations using only ros2. you have access to the main ros packages like tf, navigation, image_transport, rqt, and the big rviz. so it would seem that 90% of the current ros users would be satisfied. but the reality is that a huge amount of packages dont come out of the bix working for ros2 or are installed through debians. you will be obliged to compile them and probably make the modifications for ros2 system. but there is an option which is using the ros1_bridge package. this package allows you to run for example gazebo simulations using ros1, but communicate and control with ros2 packages. it connects topics and services with the same message type and name. crystal supports ros1bridge by default but only basic message types. if you want to use nonbasic message types, such as gazebo_ros_msgs you will have to compile ros1-bridge from source and in the same workspace have all the necessary messages you want to use with ros2. probably in the near future, it will support more message by default. ros2 recommended? absolutely! it feels cleaner and faster for sure . and unless you need to use specific packages that dont exist yet in ros2 and are difficult to port, i would use it no doubt. its obvious that ros2 will become the main ros on the long run and now its functional enough to do practically anything that you did with the good old ros1. and you have the added bonus of all the improvements added to the mix. so my recommendation is to go there and have a try with ros2. if you are a previous ros1 developer: you are bound to stumble upon some functionality that you were used to that now has no support or is buggy. but no doubt this is the future and is just like when rosbuild was removed back in the old days of ros1. just deal with the changes and you will see its worth the initial headaches. here you have a migration ros1 to ros2 guide . but i would highly recommend to for the next years until ros2 gets total support, combine ros1 and ros2. especially in simulations which are not yet ported to ros2 because they tend to be the less updated and more critical to change. just until more and more simulations get ros2 versions. if you are new in the ros world: you wont notice most of the missing or buggy features that another person used to ros1 would notice. you will undoubtedly have a headstart and ros2 is not much more difficult to learn than ros1, as far as the basics are concerned. reading further sources : course for ros2 features complete list colcon full documentation ros2 examples demos infographic | ros2 vs ros1 topics: ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 1 comment r.sarvana murugan on 15/05/2021 at 12:15 pm this class is very interesting reply submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail