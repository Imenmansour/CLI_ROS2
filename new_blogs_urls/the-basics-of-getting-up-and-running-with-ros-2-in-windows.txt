ros-industrial ros-industrial the open solution for manufacturing automation  ros-industrial  rss to submit content for publication on the ros-i , please email matt.robinson <at> rosindustrial.org (north america) or christoph.hellmann.santos<at> ipa.fraunhofer.de (europe), or ros-i_asia@artc.a-star.edu.sg (asia pacific). development in ros used to only be able to be done in linux, with ubuntu being the only fully supported operating system. with ros 2, more options have opened up to support ros development. in this  post, well discuss how you can get ros 2 up and running on the windows. why use ros 2 in windows? there are a number of reasons you may wish to pursue ros development in windows. you or a client are limited in available operating systems you want to utilize applications/libraries that are only supported in windows you are much more comfortable with windows development over linux development why not use ros 2 in windows? while there are good reasons to use ros in windows, the reasons against it are substantial: ros 2 packages are still typically developed with linux in mind, and often dont build without modification ros in windows is generally less supported and complete than it is in linux. you will have more trouble finding solutions for any problems that come up more unexpected issues are likely to pop up than in linux ros behaviors are not entirely consistent between operating systems rviz launching in windows what are my options? the simplest option to using ros 2 in windows is to avoid using windows as much as possible by using windows subsystem for linux (wsl). wsl operates a linux kernel on top of the already running windows kernel, allowing it to execute programs meant for linux while within windows. this is much more lightweight than a full virtual machine and allows easy access to files located within your windows system. head here ( https://learn.microsoft.com/en-us/windows/wsl/install ) to get started with wsl. >a second option is to use a fully pre-built package from the chocolatey package manager. this will streamline the installation process to a few copy-paste commands and greatly reduces the likelihood of errors occurring in the installation process (which can be non-trivial to debug). aka.ms/ros hosts a package for ros 2 foxy, with instructions available here ( https://ms-iot.github.io/rosonwindows/gettingstarted/setupros2.html ) a final option if you really need a version that is not installable as a full package via chocolatey is to follow the installation instructions for that distro from the ros 2 docs ( https://docs.ros.org/en/humble/installation/windows-install-binary.html) . there are a large number of steps that are far more prone to error, and since windows is not as well supported, these instructions are more likely to be out of date themselves. working with ros in windows: if you choose to use wsl, then congratulations! you dont have anything new to learn. you have access to a bash shell with all the usual ros 2 commands you know and love. simply start your wsl instance and youre good to go. if you are truly only using windows, you will be working within a powershell or command prompt window, which will work with their own commands for you to learn instead of bash. make sure to call the appropriate setup.ps1 or setup.bat for the terminal you are using, and expect to modify the cmake for any ros projects that you are building from source. a few other considerations are listed here ( https://docs.ros.org/en/foxy/the-ros2-project/contributing/windows-tips-and-tricks.html ) conclusion while it is recommended to stick with linux for your ros development, you have options to continue your applications in windows. there are some extra limitations and difficulties, but once you get past the initial pains, the development process is largely the same. index of older entries