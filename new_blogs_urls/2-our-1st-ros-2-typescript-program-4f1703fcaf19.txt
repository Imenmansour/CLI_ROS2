open in app sign up sign in write sign up sign in 2: our 1st ros 2 typescript program ros2jsguy  follow 6 min read  jun 11, 2020 -- listen share photo by alex knight on unsplash join along as we develop a high level introduction of ros while coding up our first ros2 javascript program, a simple ros node that sends hello world messages using a twitter style publish-subscribe model. edited 20220211  updated to use nodejs 16, typescript 4.5 & rclnodejs-cli ros 2 conceptual overview ros 2 is a cool distributed computing platform. the unit of independent activity is the ros node. ros enables nodes to discover one another and coordinate their activities and exchange data by passing messages through an anonymous publish-subscribe mechanism. one or more nodes can reside within an os process that may reside on the same computer or different computers. the group of nodes within a system and their communications is known as the ros graph . the ros 2 api includes c, c++ and python programming language bindings known as ros client libraries (rcl). additional community developed rcls exists for javascript, java, rust, etc. throughout all of the tutorials we will be using the open-source ros 2 rcl known as rclnodejs for javascript and typescript. when deg the interaction and data exchange between nodes we can choose between 3 styles of communications: publisher-subscriber  anonymous asynchronous message passing, e.g., twitter client-server  synchronous request-reply communications, e.g., rcp, rest actions  long running asynchronous client-server communications, e.g., jobs in this tutorial we use typescript and nodejs to code a ros 2 node that communicates using publisher-subscriber messaging. publisher-subscriber (pub-sub) communications in a ros 2 pub-sub communications model, messages are asynchronously broadcast, i.e., published, to the ros 2 node graph on uniquely named channels. nodes within the graph that are interested in receiving these messages create a subscription to the channel. ros handles the network interface and message routing between nodes. a ros node wishing to broadcast a message creates a publisher that is configured with the type of message it will broadcast and the uniquely named topic to which it will broadcast. when ready, the node asks the publisher to publish, i.e., send, the message. where upon ros network services dispatch the message. to receive these messages a node creates a subscription that is configured with the type of messages and topic to listen and a handler that will process incoming messages. ros network services route and deliver messages to awaiting subscriptions. where upon each subscriptions handler is invoked to process the incoming message. the ros 2 rclnodejs javascript library that we will be using provides pub-sub messaging in an interoperable manner with nodes implemented in javascript and other languages such as c++ and python. lets code some details  this project. it will consist of: a ros node that manages the life-cycle of a publisher instance and all of its communications a ros publisher that broadcasts string messages to the topic msg a timer that sends a time-stamped hello world message once every second the program will run indefinitely until the process is manually terminated, e.g., ctrl-c from shell prerequisites getting started youll need a dev environment with nodejs v10.2217.x  im using node 16.13.0 (lts) ros 2 foxy (lts) or galactic release if you havent setup your ros 2 javascript coding environment see this article . lastly if you would like to skip ahead and see the end result, you can find a link to a github project in the resources section found at the end of this article. step-1: project setup lets begin setting up a nodejs project named ros2-js-examples with module dependencies for rclnodejs , the ros 2 javascript client library and typescript. see resources section below for jsdoc documentation. note: if you wish to code in javascript most of the examples are easily ported from typescript to javascript (es6). ive chosen to use typescript due to its rising popularity and i just like using it especially when project complexity and size grows beyond the few examples presented on this site. we will use rclnodejs-cli to create a working project that we will then evolve. from a command shell enter the following unix/linux commands (omit comment lines, e.g., any line starting with #): # make project folder structure npx rclnodejs-cli ros2-js-examples --typescript the rclnodejs-cli tool generates a few more files and folders than we need for now. so lets do a bit of quick clean up. cd ros2-js-examples # clean up unused files and folders rm -rf cmakelists.txt include launch package.xml *.md src # create src/example folder mkdir -p src/example1 cd src/example1 note that for all tutorials we will develop example code in the ros2-js-examples project. the code for each tutorial will reside in its on folder following this pattern: ros2-js-examples src/ example1/ example2/ ... examplen/ step-2: code node and publisher now lets code up a ros 2 node that publishes a hello world message. from the ros2-js-examples/src/example1 folder create and open the file node-publisher.ts in your editor. copy-paste the following code into the editor and save. heres a quick explanation of the code: line-5: import the rclnodejs library import * as rclnodejs from 'rclnodejs'; line-10: the rclnodejs library must be initialized and made ready to connecting with other ros 2 nodes. await rclnodejs.init(); line-13: using rclnodejs, we create a node named node-publisher in the ros2_js_examples namespace. let node = rclnodejs.createnode('node_publisher', 'ros2_js_examples'); line-14: next we create a publisher instance for the topic msg we must include the type of message that will be published. in this case it is a std_msgs string let publisher = node.createpublisher(); line-16: begin asynchronously listening for incoming messages. rclnodejs.spin(node); line-19, 22: start a timer, i.e., setinterval() , that will publish a message every 1 second. step-3: compile typescript invoke the typescript compiler tsc to transcode our node-publisher.ts file into javascript. the resulting js file is created in the dist/ folder with the same name as its src typescript file. npm run build step-4: run using the nodejs runtime, lets run our example1-publisher program. in your terminal shell enter this command: node dist/example1/node-publisher.js you should see messages begin dribbling to stdout as shown below. step-5: using ros2 cli tools the ros2 commandline interface (cli) provides tools for launching and running ros 2 nodes and messages. for example with our example1-publisher program running we can view its ros 2 node as follows: ros2 node list next lets view the messages actively being published to the msg topic. enter the following command. ros2 topic echo /ros2_js_examples/msg to view other ros2 cli commands enter: ros2 -h or for help on a specific command enter: ros2 <command> -h summary ros 2 pub-sub communications is very common. this tutorial introduced you to the steps for creating a node and publishing a message to a topic. in the next tutorial we will learn how to subscribe to a topic to receive published messages. resources source code for this tutorial can be found here . ros 2 concepts rclnodejs jsdoc please consider liking this tutorial and following me here and on twitter @ros2jsguy ros2 typescript javascript ros operating system rclnodejs follow written by ros2jsguy 36 followers ros 2 for javascript & typescript developers tutorials from a guy named wayne follow help status  careers press    text to speech teams