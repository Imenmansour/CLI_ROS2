element14 community search register log in site search log in register technologies more robotics  ros2 learning series -  5 - basic programming - part 2  forum documents quiz events polls members mentions sub-groups tags more cancel new robotics requires membership for participation - click to join share more cancel group actions group rss more cancel engagement author author: crisdeodates date created: 9 apr 2024 1:41 pm date created views 300 views likes 4 likes comments 4 comments robot operating system robotics ros2 ros related recommended ros2 learning series -  5 - basic programming - part 2 crisdeodates 9 apr 2024 ros2 service - client server project in the previous , we saw how to create a publisher subscriber project . this project makes remakes it into a service based client server project. for developing a service, a service package needs to be created using ament_cmake build tool. go to the src folder in the root of the workspace and create a package called sum_nums_srv using ament_cmake.  cd ~/ros2_ws/src  ros2 pkg create --build-type ament_cmake sum_nums_srv if we look at the directory structure of the new package sum_nums_srv, we can see that there is an include and src folder which we don't need. we will add a srv folder to place our service structure file called sumnumssrv.srv.  cd sum_nums_srv  rm -rf include src  mkdir srv  cd srv  touch sumnumssrv.srv note : a service structure file is treated as an interface file in ros2 and hence needs to start with a capital letter. now our package sum_nums_srv folder should look like the following structure: sum_nums_srv/  cmakelists.txt  package.xml  srv  sumnumssrv.srv populate the srv file with the following service request and response structure and save it: int8 n --- int64 sum this srv file informs ros2 that this service will request an integer n, and responds with an integer called sum. to convert the service interfaces into language-specific code (like c++ and python) we should add the following lines to cmakelists.txt, including any dependencies if any: find_package(rosidl_default_generators required) rosidl_generate_interfaces({project_name} "srv/sumnumssrv.srv" ) add the following lines within the <package> element of package.xml: <buildtool_depend>rosidl_default_generators</buildtool_depend> <exec_depend>rosidl_default_runtime</exec_depend> <member_of_group>rosidl_interface_packages</member_of_group> since the interfaces rely on rosidl_default_generators for generating language-specific code, we need to declare a build tool dependency on it. rosidl_default_runtime is a runtime or execution-stage dependency, needed for using the interfaces later. the rosidl_interface_packages is the name of the dependency group that our package, sum_nums_srv, should be associated with, declared using the <member_of_group> tag. build the sum_nums_srv package (selecting only the new package).  source install/setup.bash  ros2 interface show sum_nums_srv/srv/sumnumssrv test the new service.  source install/setup.bash  ros2 interface show sum_nums_srv/srv/sumnumssrv this will display the service structure. now go back to our sum_nums package and use this newly created service package. create two files called sum_nums_service_server.py and sum_nums_service_client.py in the same folder as our publisher subscriber files are.  cd src/sum_nums/sum_nums  touch sum_nums_service_server.py sum_nums_service_client.py populate the sum_nums_service_server.py file with the service server code: from sum_nums_srv.srv import sumnumssrv import rclpy from rclpy.node import node class sumnumsclient(node): """ node to send requests to compute the sum of first n integer numbers. """ def __init__(self): """ initializes the sumnumsclient class. """ super().__init__('sum_nums_client_node') self.cli = self.create_client(sumnumssrv, 'sum_n_nums') while not self.cli.wait_for_service(timeout_sec=1.0): self.get_logger().info(' sumnumssrv service not available, waiting...') self.req = sumnumssrv.request() def send_request(self, n): """ sends a request to compute the sum of first n integer numbers. parameters: n: the number of integer numbers to sum. returns: the response containing the computed sum. """ self.req.n = n self.future = self.cli.call_async(self.req) rclpy.spin_until_future_complete(self, self.future) return self.future.result() def main(args=none): """ main function to initialize the node and send a request to compute the sum of first n integer numbers. """ rclpy.init(args=args) sum_nums_client_node = sumnumsclient() num_input = int(input("enter a positive integer number: ")) if num_input < 0: print("input number is not positive") else: print('entered:', num_input) response = sum_nums_client_node.send_request(num_input) print("sum of first", num_input, "integer numbers is:", response.sum) # destroy the node explicitly sum_nums_client_node.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() populate the sum_nums_service_client.py file with the service client code: from sum_nums_srv.srv import sumnumssrv import rclpy from rclpy.node import node class sumnumsclient(node): """ node to send requests to compute the sum of first n integer numbers. """ def __init__(self): """ initializes the sumnumsclient class. """ super().__init__('sum_nums_client_node') self.cli = self.create_client(sumnumssrv, 'sum_n_nums') while not self.cli.wait_for_service(timeout_sec=1.0): self.get_logger().info(' sumnumssrv service not available, waiting...') self.req = sumnumssrv.request() def send_request(self, n): """ sends a request to compute the sum of first n integer numbers. parameters: n: the number of integer numbers to sum. returns: the response containing the computed sum. """ self.req.n = n self.future = self.cli.call_async(self.req) rclpy.spin_until_future_complete(self, self.future) return self.future.result() def main(args=none): """ main function to initialize the node and send a request to compute the sum of first n integer numbers. """ rclpy.init(args=args) sum_nums_client_node = sumnumsclient() num_input = int(input("enter a positive integer number: ")) if num_input < 0: print("input number is not positive") else: print('entered:', num_input) response = sum_nums_client_node.send_request(num_input) print("sum of first", num_input, "integer numbers is:", response.sum) # destroy the node explicitly sum_nums_client_node.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() add the entry points to setup.py inside console_scripts section: 'sum_nums_server = sum_nums.sum_nums_service_server:main', 'sum_nums_client = sum_nums.sum_nums_service_client:main', since our sum_nums package depends on sum_nums_srv package for the service structure, add it as a dependency inside the package.xml file: <exec_depend>sum_nums_srv</exec_depend> build the sum_nums package again.  cd ~/ros2_ws/  colcon build --packages-select sum_nums  source install/setup.bash execute the service node in the same terminal window.  ros2 run sum_nums sum_nums_server execute the client node in a new terminal window.  source install/setup.bash  ros2 run sum_nums sum_nums_client enter a positive integer number and press enter. the sum will be displayed by the sum_nums_client node. sign in to reply crisdeodates 4 months ago in reply to dab usually we wrap these complex data types as custom messages in ros which are used in those particular cases. i will definitely cover them in the future s. thanks for the suggestion dab cancel vote up 0 vote down sign in to reply more cancel dab 4 months ago in reply to crisdeodates most projects use complex data structures mixing integer, floating point, boolean and character data. when you are running distributed and parallel computing applications, you need to send multiple data and types between computers for information and status transfers. cancel vote up 0 vote down sign in to reply more cancel crisdeodates 4 months ago in reply to dab yes dab could you give some examples? i am also working on publishing some advanced projects as part of this series. may be i can try to include your recommendations as well cancel vote up 0 vote down sign in to reply more cancel dab 4 months ago i assume you can use more complex data structures? cancel vote up 0 vote down sign in to reply more cancel