how to spawn a gazebo robot using xml launch files written by ruben alves  gazebo tutorials | ros2 q&a | ros2 tutorials  28/07/2023 what we are going to learn how to start gazebo how to spawn a robot to gazebo how to run the robot state publisher node how to start rviz configured list of resources used in this post use the rosject: https://app.theconstructsim.com/l/56476c77/ the construct: https://app.theconstructsim.com/ ros2 courses  ros2 basics in 5 days humble (python): https://app.theconstructsim.com/course/132 ros2 basics in 5 days humble (c++) : https://app.theconstructsim.com/course/133 overview while many examples demonstrate how to spawn gazebo robots using python launch files, in this post, we will be learning how to achieve the same result using xml launch files. lets get started! ros inside! ros inside before anything else, if you want to use the logo above on your own robot or computer, feel free to download it and attach it to your robot. it is really free. find it in the link below: ros inside logo opening the rosject in order to follow this tutorial, we need to have ros2 installed in our system, and ideally a ros2_ws (ros2 workspace). to make your life easier, we have already prepared a rosject with a simulation for that: https://app.theconstructsim.com/l/56476c77/ . you can download the rosject on your own computer if you want to work locally, but just by copying the rosject (clicking the link), you will have a setup already prepared for you. after the rosject has been successfully copied to your own area, you should see a run button. just click that button to launch the rosject (below you have a rosject example). how to spawn a gazebo robot using xml launch files  run rosject (example of the run button) after pressing the run button, you should have the rosject loaded. now, lets head to the next section to get some real practice. compiling the workspace as you may already know, instead of using a real robot, we are going to use a simulation. in order to spawn that simulated robot, we need to have our workspace compiled, and for that, we need a terminal. lets open a terminal by clicking the open a new terminal button. open a new terminal once inside the first terminal , lets run the commands below, to compile the workspace cd ~/ros2_ws colcon build source install/setup.bash there may be some warning messages when running colcon build. lets just ignore those messages for now. if everything went well, you should have a message saying that 3 packages were compiled: how to spawn a gazebo robot using xml launch files  ros2_ws compiled starting the gazebo simulator now that our workspace is compiled, lets run a gazebo simulation and rviz using normal python launch files. for that, run the following command in the terminal: ros2 launch minimal_diff_drive_robot gazebo_and_rviz.launch.py again, you may see some error messages. as long as the simulation appears, you can just ignore those error messages. now, in a second terminal , lets also launch the robot state publisher, so that we can properly see the robot in rviz ( r obot vi suali z ation tool). ros2 run joint_state_publisher joint_state_publisher now you should be able to see both gazebo simulator and rviz, similar to what we can see in the image below: how to spawn a gazebo robot using xml launch files  gazebo and rviz launched in case you want to know, the content of the file used to spawn the robot can be seen with: cat ~/ros2_ws/src/minimal_diff_drive_robot/launch/gazebo_and_rviz.launch.py moving the robot around to make sure everything is working as expected so far, you can also run a new command to move the robot around using the keyboard. for that, open a third terminal , and run the following command: ros2 run teleop_twist_keyboard teleop_twist_keyboard now, to move the robot around just press the keys  i ,  k , or other keys presented in the terminal where you launched the teleop_twist_keyboard command. the xml file for launching spawning the robot as we mentioned earlier, the code for the python launch file can be found seen with: cat ~/ros2_ws/src/minimal_diff_drive_robot/launch/gazebo_and_rviz.launch.py and for the xml file? the xml file is in the exact same folder, but the file has an xml extension. the content of the file can be seen with: cat ~/ros2_ws/src/minimal_diff_drive_robot/launch/gazebo_and_rviz.launch.xml the command above outputs the following: <?xml version="1.0"?> <launch> <arg name="model" default="(find-pkg-share minimal_diff_drive_robot)/urdf/minimal_diff_drive_robot.urdf" /> <arg name="start_gazebo" default="true" /> <arg name="start_rviz" default="true" /> <!-- start gazebo --> <group if="(var start_gazebo)"> <include file="(find-pkg-share gazebo_ros)/launch/gazebo.launch.py"> <!--arg name="paused" value="true"/> <arg name="use_sim_time" value="true"/> <arg name="gui" value="true"/> <arg name="recording" value="false"/> <arg name="debug" value="false"/> <arg name="verbose" value="true"/--> </include> <!-- spawn robot in gazebo --> <node name="spawn_robot_urdf" pkg="gazebo_ros" exec="spawn_entity.py" args="-file (var model) -x 0.0 -y 0.0 -z 0.0 -entity my_robot" output="screen" /> </group> <!-- tf description --> <node name="robot_state_publisher" pkg="robot_state_publisher" exec="robot_state_publisher" output="screen"> <param name="robot_description" value="(command 'cat (var model)')"/> <param name="use_sim_time" value="true" /> </node> <!-- show in rviz --> <group if="(var start_rviz)"> <node name="rviz" pkg="rviz2" exec="rviz2" args="-d (find-pkg-share minimal_diff_drive_robot)/config/robot.rviz"> <param name="use_sim_time" value="true" /> </node> </group> </launch> if we check carefully the output above, we can see that we start launching the gazebo simulator, and in the same <group> we spawn the robot in gazebo by calling spawn_entity.py then we launch the robot state publisher to be able to see the robot in rviz , and finally, we launch rviz itself. when launching rviz, we tell it to use a file named config/robot.rviz , as we can see at: (find-pkg-share minimal_diff_drive_robot)/config/robot.rviz that command translates to the following path: cat ~/ros2_ws/src/minimal_diff_drive_robot/config/robot.rviz feel free to check the content of that file, be it through the code editor, or in the terminal by checking what the cat command outputs. spawning the robot in gazebo using xml launch files similar to what we did with python, you can just run the following command to spawn the robot using xml file. please, remember to kill the previous programs by pressing ctrl+c in the terminals where you launched the commands previously. assuming that now all previous programs are terminated, lets spawn gazebo using xml in the first terminal : ros2 launch minimal_diff_drive_robot gazebo_and_rviz.launch.xml now, in the second terminal , lets launch the joint state publisher to be able to correctly see the robot wheels in rviz: ros2 run joint_state_publisher joint_state_publisher and on the third terminal , you can start the command to move the robot around: ros2 run teleop_twist_keyboard teleop_twist_keyboard and that is basically it congratulations. now you know how to spawn a robot in gazebo using python and also using xml launch files. we hope this post was really helpful to you. if you want a live version of this post with more details , please check the video in the next section. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. related courses & training if you want to learn more  ros and ros2, we recommend the following courses: ros2 basics in 5 days humble (python): https://app.theconstructsim.com/course/132 ros2 basics in 5 days humble (c++) : https://app.theconstructsim.com/course/133 open-rmf / fleet management training : https://www.theconstruct.ai/robot-fleet-management-ros2-open-rmf-training/ get ros2 industrial ready- hands-on training by the construct cover.png topics: gazebo | ros launch file | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments pin it on pinterest share this twitter linkedin reddit facebook gmail