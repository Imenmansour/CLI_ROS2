open in app sign up sign in write sign up sign in getting started with ros2: understanding nodes part 6 of our getting started with ros2 series sagar kumar  follow published in spinor  6 min read  jul 16, 2024 1 listen share welcome, fellow readers, to our getting started with ros2 series! in this series, we aim to provide you with a comprehensive introduction to ros 2 and will guide you through the fundamentals, its key concepts, and practical applications. if you have never used the robot operating system(ros) before, even ros 1, or if you want a practical and quick refreshment of the basics then this series is for you. feel free to explore the links provided for a more in-depth understanding of the concepts discussed. prerequisites before we start, you must have a basic understanding of ros2 concepts. please refer to the following articles in our series: getting started with ros2: an introduction  provides a foundational overview of ros2. getting started with ros2: why ros2?  explains the advantages and motivations for using ros2. getting started with ros2: install and setup ros2 humble on ubuntu 22.04(lts)  guides you through installing and setting up ros2 on ubuntu. getting started with ros2: overview of ros2 workspaces, packages and nodes  gives an overview of the essential components of ros2. getting started with ros2: create and set up a workspace  explains how to create and configure a ros2 workspace for your projects. having a solid grasp of these basics will help you follow along and understand the steps involved in creating and managing workspaces in ros2. introduction to ros2 nodes nodes are the fundamental building blocks of a ros2 system. a node is essentially a single process that performs computation . each node is designed to perform a specific task within a robotic system, such as controlling a motor, processing sensor data, or communicating with other nodes . this modular approach allows for the development of complex robotic systems by combining multiple small, reusable, and independent nodes. nodes communicate with each other using a publish-subscribe model, services, and actions , enabling them to share information and request tasks from one another. by breaking down a system into individual nodes, developers can create more manageable, maintainable, and scalable robotics applications. to better understand how nodes work in ros2, lets look at an example using the pre-existing packages demo_nodes_cpp and demo_nodes_py . these packages contain example nodes that can help illustrate the publish-subscribe communication model. publisher/subscriber example using demo_nodes_cpp and demo_nodes_py the demo_nodes_cpp package contains example nodes written in c++, and the demo_nodes_py package contains example nodes written in python. we will use these packages to demonstrate a simple publisher/subscriber interaction. in this example, the python node ( talker from demo_nodes_py ) will act as the publisher, and the c++ node ( listener from demo_nodes_cpp ) will act as the subscriber. running the publisher node ( talker from demo_nodes_py ) ros2 run demo_nodes_py talker this command starts the talker node, which publishes messages to the /chatter topic. the talker node continuously sends messages such as "hello world: [count]". talker node running the subscriber node ( listener from demo_nodes_cpp ) ros2 run demo_nodes_cpp listener this command starts the listener node, which subscribes to the /chatter topic and prints the received messages. listener node using rqt_graph to visualize running nodes to better understand the relationships between nodes and topics in your ros2 system, you can use the rqt_graph tool. rqt_graph provides a graphical interface that displays the nodes and the topics they are publishing to or subscribing from. installing rqt_graph: first, ensure that rqt_graph is installed. if it's not already installed, you can install it using the following command: sudo apt install ros-humble-rqt-graph running rqt_graph: once rqt_graph is installed, type the following command in a separate terminal to visualize your running nodes: rqt_graph viewing the graph: the rqt_graph window will open, displaying a graph of your ros2 system. you will see nodes represented as ellipses and topics as arrows connecting these nodes. for the example with talker and listener , you should see: - a node named /talker (the publisher). - a node named /listener (the subscriber). - an arrow representing the /chatter topic connecting the talker node to the listener node. rqt_graph visualizing the nodes and the topic this visualization helps you understand the structure and communication flow of your ros2 system, making it easier to debug and optimize your setup. using rqt_graph is an excellent way to ensure your nodes are interacting as expected and to diagnose any issues in your ros2 network. multi-node communication with turtlesim package turtlesim is a beginner-friendly simulation package within the robot operating system (ros) ecosystem, designed to introduce users to key concepts of robotic control and simulation. it features a simple graphical interface where users can interact with a turtle that moves within a virtual environment. turtlesim allows users to control the turtles movements using commands published over ros topics, making it an excellent tool for learning  ross publish-subscribe communication model. the package includes nodes for simulating the turtles behavior, such as `turtlesim_node`, and utilities like `turtle_teleop_key` for keyboard control. its widely used for educational purposes, providing a hands-on approach to understanding robotic concepts such as teleoperation, node interaction, and graphical visualization within ros environments. to demonstrate a multi-node communication in a ros2 system using the turtlesim package, we will run several nodes , including turtlesim_node , turtle_teleop_key , and use rqt_graph to visualize their interactions with other nodes in the background. install the turtlesim package: if you dont already have the turtlesim package installed, you can install it using the following command: sudo apt install ros-humble-turtlesim start the turtlesim node: open a terminal and run the following command to start the turtlesim_node , which launches the turtlesim simulator: ros2 run turtlesim turtlesim_node you should see a window open with a turtle in the center. control the turtle with the keyboard: open another terminal and run the following command to start the turtle_teleop_key node. this node allows you to control the turtle using the keyboard. ros2 run turtlesim turtle_teleop_key you can now use the arrow keys on your keyboard to move the turtle around in the turtlesim window. visualize with rqt_graph : open a third terminal and run the following command to start rqt_graph : rqt_graph the rqt_graph window will open, displaying a graph of the running nodes and their connections. video demo: for a visual walkthrough of the demo described above, ive recorded a video capturing the screen while running the turtlesim package with turtle_teleop_key and rqt_graph . watch the video below to see how nodes interact in a ros2 environment. understanding the turtlesim demo turtlesim_node : this node provides the simulation environment. it subscribes to the /turtle1/cmd_vel topic to receive velocity commands and updates the turtle's position accordingly. turtle_teleop_key : this node reads keyboard input and publishes velocity commands to the /turtle1/cmd_vel topic. when you press the arrow keys, this node sends the corresponding velocity commands to the turtlesim_node . other nodes : in addition to turtlesim_node and turtle_teleop_key , there are other nodes running in the background that facilitate various functionalities such as rendering the gui, handling internal communications, and managing other aspects of the ros2 system. for more details follow this link . whats next? in the upcoming article, you will learn how to create custom packages and understand how to structure them effectively to encapsulate functionality. youll also learn how to write custom nodes that communicate seamlessly within the ros2 framework, enabling you to expand the capabilities of your robotic applications. if youve made it this far, it means youre not just interested  youre committed, and were delighted to have you here! your interest and engagement inspire us to create more content and share knowledge with fellow learners, the community of robotics, and tech enthusiasts who share our passion. so, thank you for being a part of this journey with us. stay tuned for more insightful articles, tutorials, and practical examples as we continue our exploration of ros 2 together. references using turtlesim, ros2, and rqt sign up to discover human stories that deepen your understanding of the world. free distraction-free reading. no ads. organize your knowledge with lists and highlights. tell your story. find your audience. sign up for free membership read member-only stories support writers you read most earn money for your writing listen to audio narrations read offline with the medium app try for 5 /month ros2 robot operating system robotics turtlesim technology follow written by sagar kumar 53 followers  editor for spinor sagar is a computer vision and robotics expert with a focus on perception & localization | twitter: twitter.com/sagarcadet | linkedin: linkedin.com/in/sagark30 follow more from sagar kumar and spinor sagar kumar in spinor getting started with ros2: install and setup ros2 humble on ubuntu 22.04(lts) part 3 of our getting started with ros2 series may 15 sagar kumar in spinor getting started with ros2: why ros2? part 2 of our getting started with ros2 series may 9 sagar kumar in spinor getting started with ros2: create and set up a workspace part 5 of our getting started with ros2 series jul 7 sagar kumar in spinor getting started with ros2: an introduction part 1 of our getting started with ros2" series may 8 see all from sagar kumar see all from spinor recommended from medium soham building secure embedded c programs: best practices and code examples introduction: security is a critical concern in embedded systems, especially as they become increasingly interconnected. writing secure mar 12 gealleh understanding slam: simultaneous localization and mapping introduction apr 26 lists ai regulation 6 stories  559 saves chatgpt prompts 48 stories  1969 saves generative ai recommended reading 52 stories  1344 saves tech & tools 19 stories  302 saves wassim dhokar embedded systems : arm debug interface and structure introduction may 1 deeperandcheaper [quantization] yolov8 qat x2 speed up on your jetson orin nano #2  how to achieve the best qat abstract aug 27 1 canyon lake robotics tuning the ros2 nav2 stack if you have a wheeled robot in ros2, you are almost surely using the nav2 stack. it provides a ton of great features such as mapping may 30 jorgecardete in the deep hub building a parking space detector with computer vision [part 1] creating the machine learning model mar 6 3 see more recommendations help status  careers press    text to speech teams