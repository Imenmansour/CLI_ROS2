[ros2 how-to] ros2 topics vs services vs actions #5 written by ruben alves  ros2 q&a | ros2 tutorials  23/09/2022 what we are going to learn when to use topics when to use services when to use actions list of resources used in this post use the rosject: https://app.theconstructsim.com/l/4dc71d42/ the construct: https://app.theconstructsim.com/ ros2 courses  ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 ros2 navigation training : https://www.theconstruct.ai/ros2-navigation-training/ overview ros2, the improved version of ros (ros1), is quickly becoming the standard for developing robotics applications. in this post, we will quickly compare the differences between three main ros2 ways of interacting with nodes: topics, services, and actions. we will have some insights on when to use each of them. ros inside! ros inside before anything else, in case you want to use the logo above on your own robot, feel free to download it for free and attach it to your robot. it is really free. find it in the link below: ros inside logo what is a ros2 action lets assume you wish to wash your clothing. there are two possible ways you could go  it: go to the laundry service provider put your clothes to wash. wait until the clothes are washed. get your clothes. if you have a washing machine at home: put your clothes to wash instead of waiting, you can do other things and leave the watching machine doing its jobs check once in a while if the clothes are finished do other things. clothes are washed. option 1 is a blocking activity because you have to wait (in theory not able to do anything else) for the clothes to be washed, while option 2 is non-blocking because you can do some other things while your clothes are being washed. this non-blocking is what defines an action. if ros2 services are for instant request-responses , an action is a task that may take a lot of time to be finished, and in the meantime, a robot (or you) is free to do other things and is also able to constantly check the status of the action. opening the rosject in order to understand ros2 topics, services, and actions, we need to have ros2 installed in our system, and it is also useful to have some simulations. to make your life easier, we already prepared a rosject with a simulation for that: https://app.theconstructsim.com/l/4dc71d42/ . you can download the rosject on your own computer if you want to work locally, but just by copying the rosject (clicking the link), you will have a setup already prepared for you. after the rosject has been successfully copied to your own area, you should see a run button. just click that button to launch the rosject (below you have a rosject example). learn ros2 topics vs service vs action  run rosject (example of the run button) after pressing the run button, you should have the rosject loaded. lets now head to the next section to really get some real practice. launching the simulation lets run a simulation before actually starting with the comparison between these three ways of interacting with ros2 nodes. lets start by opening a terminal: open a new terminal now, in the first terminal that we just open, lets setup our environment: cd ~/ros2_ws colcon build after our workspace is compiled, lets source it: source install/setup.bash now, we can start our simulation with the following commands: cd ~/ros2_ws/src/t3_galactic ./start_sim_house.sh if everything went well, you should have a simulation running, similar to what we have in the image below: [ros2 how-to] #5  ros2 topics vs services vs actions  simulation ros2 topics topics are the channel of communication between a publisher node and a subscriber node. lets see an example of ros2 topics. lets open a second terminal and run the following command: ros2 topic pub /cmd_vel geometry_msgs/msg/twist "{linear: {x: 0.2, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}" -1 the above command will command the robot to drive with a forward velocity of 0.2 m/s. we can now create a subscriber to the /odom topic in a third terminal with the command below: ros2 topic echo /odom you should see odometry messages published to the /odom topic in the console many messages will start coming. you can stop the subscriber by pressing ctrl+c in the terminal where you launched it. to stop the robot, we can use the command below in the second terminal : ros2 topic pub /cmd_vel geometry_msgs/msg/twist "{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}" -1 when should you use a topic? topics are used for one-way communication. the publisher just sends messages, and the subscriber just listen to the messages being published. topics are useful when you need to react quickly, and useful also if you want to publish updates at a high frequency, like the values of the /odom topic, used to determine the position of the robot. you can use topics to change the speed of a robot, for example, to accelerate or reduce its speed. we could say that it is mostly used for real-time communication. topics provide a continuous flow of data, and can be used for one-to-many and many-to-many communications, which means you can have many publishers publishing on a given topic, and many subscribers subscribed to a given topic. ros2 services ros2 services allow connections between a service client and a service server. its used basically for  instant questions and answers , like  retrieving the current time , for example, or  getting the current battery state  of the robot. lets create a service server using the following commands in the second terminal : ros2 run services_pkg service now that the service server is created, lets create the service client in the third terminal, that sends a request to the service server: ros2 service call /moving std_srvs/srv/empty if everything went well, the robot should have started moving in circles. to stop the robot, we can make use of ros2 topic again, just like we did in the previous section, by running the command below: ros2 topic pub /cmd_vel geometry_msgs/msg/twist "{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}" -1 if we want to make the robot move to its initial position (reset the simulation), we can call the following service : ros2 service call /reset_simulation std_srvs/srv/empty you can also call a service to get the list of models in the gazebo world: ros2 service call /get_model_list gazebo_msgs/srv/getmodellist "{}" when should you use a ros2 service? ros2 services could be used ideally when the number of data requests is really small, especially if compared with ros2 topics. with ros2 services, you have a request and a response, so, it is useful for communication that happens quickly. ros2 actions somehow similar to ros2 services, for ros2 actions we need a server and a client. in this case, it would be an action server node and the action client node. ros2 actions are more indicated for situations where you give a task to the robot, and you are not going to be there waiting until the task has finished. you could do other things while the robot is doing his work. an example of an action would be: robot, please clean the house . you just give it a task, you dont know when the task is going to finish, but you can have constant feedback on how the task is going. lets start an action server, by running the following command in the second terminal : ros2 launch turtlebot3_as action_server.launch.py now, in the third terminal , lets send the goal to the action service: ros2 action send_goal /turtlebot3_as t3_action_msg/action/move "{secs: 20}" now, the robot will be moving for 20 seconds, but the client used to send the goal has finished instantly. the terminal does not have to be stuck for 20 seconds until the robot finishes its task. when should you use ros2 actions? the ideal scenario when ros2 actions could be used is when the task takes several seconds to complete or minutes to complete. ros actions are used mainly for the processing of longer tasks in the background. use it also for operations that might me terminated or canceled before completion. congratulations. you have just learned when to use topics, services, and actions. we hope this post was really helpful to you. if you want a live version of this post, please check the video in the next section. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. related courses & training if you want to learn more  ros and ros2, we recommend the following courses: ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 topics: check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail