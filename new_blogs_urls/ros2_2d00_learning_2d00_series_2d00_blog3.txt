element14 community search register log in site search log in register technologies more robotics  ros2 learning series -  3 - setup  forum documents quiz events polls members mentions sub-groups tags more cancel new robotics requires membership for participation - click to join share more cancel group actions group rss more cancel engagement author author: crisdeodates date created: 9 apr 2024 10:34 am date created views 181 views likes 4 likes comments 1 comment robot operating system robotics ros2 ros related recommended ros2 learning series -  3 - setup crisdeodates 9 apr 2024 ros2  setup installation unlike ros1, ros2 can be installed on all major platforms such as linux, windows and macos. here i will focus on installing ros2 on an ubuntu 22.04 system. for other platforms, the installation setups are detailed on the official ros2 documentation page . setup the locale settings  sudo apt update && sudo apt install locales  sudo locale-gen en_us en_us.utf-8  sudo update-locale lc_all=en_us.utf-8 lang=en_us.utf-8  export lang=en_us.utf-8 setup the ros2 sources  sudo apt install software-properties-common  sudo add-apt-repository universe  sudo apt update && sudo apt install curl -y  sudo curl -ssl https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg install the ros2 packages  sudo apt update  sudo apt upgrade  sudo apt install ros-humble-desktop setup the ros2 environment the following command should be run on every new shell to have access to the ros2 commands.  source /opt/ros/humble/setup.bash however, this command can be added to the shell startup script for it to automatically run every time a new terminal window is created.  echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc test the ros2 installation to test the ros2 installation, we will run a simple publisher - subscriber example. in a terminal, execute the following:  ros2 run demo_nodes_py listener in another terminal, execute the following:  source /opt/ros/humble/setup.bash  ros2 run demo_nodes_cpp talker we should be able to see the talker node saying that its publishing messages and the listener node saying it heard those messages. if this is working, we can be sure that both the c++ and python ros2 apis are working properly. packages in ros2, a package can be regarded as an organizational unit, allowing us to install our code or share it with others, allowing them to build and use it easily. to create packages in ros 2, we can use ament as its build system and colcon as its build tool. we can also create a package using either cmake or python, which are officially supported, though other build types do exist, but we will focus on amend and colcon. workspaces in ros2, a workspace is a directory containing packages. a build system uses a workspace to go through packages to build them for the project. a workspace can contain multiple packages, separated into individual folders. packages can also belong to different build types in the same workspace (cmake, python, etc.). however, nesting of packages is not allowed. build system a build tool operates on a set of packages. it determines the dependency graph and invokes the specific build system for each package in topological order. the build tool itself should know how to set up the environment for the build system and invoke it. the existing ros build tools are catkin_make, catkin_make_isolated, catkin_tools, colcon, and ament_tools. it controls the compilation and testing of multiple ros2 packages together. ros2 uses ament_tools and now colcon as the build tool. the build system on the other hand operates on a single package. examples are make, cmake, ament_cmake, ament_python, python setuptools, or autotools. a cmake package is e.g. built by invoking these steps: cmake, make, make install. ros2 uses ament_cmake and ament_python as the build systems. generally, in ros, each package contains a manifest file (package.xml). this manifest file contains essential metadata  the package, including its dependencies on other packages. this manifest is required for the meta-build tool to function. in the projects that follow, we will use python as our programming language, ament as our build system and colcon as our build tool. reference sign in to reply dab 4 months ago looks straight forward. cancel vote up 0 vote down sign in to reply more cancel