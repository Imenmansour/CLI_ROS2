open in app sign up sign in write sign up sign in exploring services in ros 2  part 1 joão paulo s bertoncini  follow 3 min read  dec 22, 2023 2 listen share introduction the robot operating system 2 (ros 2) has emerged as a robust and flexible platform for robotic software development. among the many powerful features of ros 2, services play a fundamental role in efficient communication between different modules of a robotic system. in this article, we will delve into the concept of services in ros 2, highlighting their significance and how they contribute to the development of advanced robotic applications. services are another method of communication for nodes in the ros graph. services are based on a call-and-response model versus the publisher-subscriber model of topics. while topics allow nodes to subscribe to data streams and get continual updates, services only provide data when they are specifically called by a client. understanding services in the context of ros 2 services in ros 2 are a form of communication between nodes that allows the request and response of data or the execution of specific tasks. unlike topics, which are used for publish-subscribe communication, services are designed for more structured bidirectional interactions. they are ideal for situations where a node needs to request the execution of a task from another node and receive a response. structure of a ros 2 service services in ros 2 consist of two main parts: the client and the server. the client node sends a request to the server node, which processes the request and sends a response back to the client. this architecture is particularly valuable in situations where a specific task needs to be executed synchronously between different components of the system. advantages of services in ros 2 synchronous communication: services offer a synchronous form of communication, ensuring that the client waits for a response from the server before continuing its execution. this is crucial in tasks where synchronization is fundamental. delivery assurance: services guarantee the delivery of messages between nodes, providing reliability in the execution of critical tasks. this is especially vital in scenarios where data loss is not tolerable. remote call structure: services allow for remote calls, enabling nodes to request the execution of tasks in other nodes, even on different machines or devices. practical example 1: mobile robot control lets consider a practical example to illustrate the application of services in ros 2. suppose a node responsible for path planning wants to request a mobile robot control node to move to a specific position. the path planning node acts as a client, sending a request to the control node, which acts as a server, executing the movement and sending a completion response. # example python code for a ros 2 service # (simplified code for illustration purposes) # client node client = node.create_client(moverobot, 'move_robot' ) request = moverobot.request() request.target_position = desired_position response = client.call(request) # server node def handle_move_robot ( request, response ): # logic to move the robot to the desired position response.success = true return response server = node.create_service(moverobot, 'move_robot' , handle_move_robot) practical example 2: sensor monitoring imagine a scenario where a node responsible for sensor monitoring needs to check the status of a specific sensor on a remote node. the monitoring node acts as a client, requesting information  the sensor from the remote node acting as a server. # example python code for a ros 2 sensor monitoring service # (simplified code for illustration purposes) # client node (sensor monitoring) client = node.create_client(getsensorstatus, 'get_sensor_status' ) request = getsensorstatus.request() request.sensor_id = sensor_id response = client.call(request) # server node def handle_get_sensor_status ( request, response ): # logic to check the status of the sensor response.status = get_sensor_status(request.sensor_id) return response server = node.create_service(getsensorstatus, 'get_sensor_status' , handle_get_sensor_status) conclusion services in ros 2 play a crucial role in efficient communication between different parts of a robotic system. their ability to provide synchronous communication, delivery assurance, and support for remote calls makes them a powerful tool for robotic software developers. by exploring and understanding services deeply, engineers can create more flexible, robust robotic systems capable of tackling a variety of real-world challenges. ros 2 continues to stand out as a leading platform at the forefront of innovation in robotics, with services playing a fundamental role in its success. sign up to discover human stories that deepen your understanding of the world. free distraction-free reading. no ads. organize your knowledge with lists and highlights. tell your story. find your audience. sign up for free membership read member-only stories support writers you read most earn money for your writing listen to audio narrations read offline with the medium app try for 5 /month ros2 robotics robot operating system follow written by joão paulo s bertoncini 3 followers follow more from joão paulo s bertoncini joão paulo s bertoncini introduction to wire package the wire package is an automatic dependency injection tool for go, developed by google. it simplifies configuring and managing jun 29, 2023 joão paulo s bertoncini topics in ros 2 hello everyone, lets quickly talk a little bit  the topics in ros. may 2, 2023 joão paulo s bertoncini what is ros? ros (robot operating system) is an open source operating system used in robotics to facilitate software development for robots. apr 26, 2023 joão paulo s bertoncini how to install micro-ros in raspberrypi pico hello everyone, in this article i will demonstrate how to install the micro-ros in an raspberrypi microcontroller. in the end we will test dec 27, 2022 see all from joão paulo s bertoncini recommended from medium shubh jain installing ros2 humble & gazebo on mac m1/m2/m3 silicon hello fellow robotics enthusiasts! aug 17 gealleh understanding slam: simultaneous localization and mapping introduction apr 26 lists staff picks 729 stories  1285 saves stories to help you level-up at work 19 stories  788 saves self-improvement 101 20 stories  2710 saves productivity 101 20 stories  2323 saves wassim dhokar embedded systems : arm debug interface and structure introduction may 1 canyon lake robotics tuning the ros2 nav2 stack if you have a wheeled robot in ros2, you are almost surely using the nav2 stack. it provides a ton of great features such as mapping may 30 dr. anubhav dogra pyqt based gui for ros applications: part 1 a graphical user interface is not really a thing for the programmers as we (if i consider myself a programmer ) are fascinated by the aug 21 sunny kumar object tracking in yolo using python and open cv yolo implementation of object tracking in python. computer vision object tracking. open cv realtime object tracking using yolo and python3. apr 10 see more recommendations help status  careers press    text to speech teams