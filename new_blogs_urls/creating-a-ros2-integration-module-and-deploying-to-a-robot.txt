request demo try free log in ros & viam october 12, 2023 creating a ros2 integration module and deploying it to a robot written by felix reichenbach solutions engineer while writing code to create new functionality and products is exciting, writing boilerplate or repetitive code is annoying. open software repositories, which make the sharing of libraries easy and convenient, are a powerful way to reduce the amount of annoying code any one developer needs to write. the recent release of the viam modular registry brings similar convenience to the world of smart machines and robots. the modular registry is powerful for both general code deployment and for leveraging code written by another community or business. i thought i would demonstrate this by centering this  on the viam registry, using our ros 2 integration as an example.â â you can find our ros 2 integration in our new viam solutions engineering repository, and if you would likeâ to contribute, feel free to do so and create a pull request. creating and deploying modules with the viam registry is straightforward, and requires the following simple steps: download or develop your own modular resource(s) publish your module to the viam registry deploy the module to your robot developing modular resources our previous  posts hopefully contain enough information to provide an idea  writing resources and modules. there are also a bunch of good examples in the python and go sdk repositories. if you prefer more detailed information, you can also have a look at viam's official documentation or the sdk docs . we built a ros 2 integration and made it available on github. therefore, my first step was to clone the viam sol-eng ros 2 integration repo onto my computer. publishing modules to the viam registry letâs start with turning a local module or modular resource into a versioned package available through the viam registry. the process is simple, and starts with creating a namespace for your organization, as documented here .â at the moment, interactions with the viam registry are primarily command line driven. in orderâ to create new modules or update existing ones, you have to install the viam cli . once this is done, you then navigate to the root folder of your modular resource and create the required metadata for your module using the viam cli: the command will create a meta.json file, and you will want to update a couple of other configurations, especially around setting your module as private or public. private means the modules are only available for your organization and robots, whereas public means anyone can install it on their robot as well. example meta.json file once you have completed the meta.json file, you have to update the registry with the above information. all you have to do is to execute this simple command: should you want to change some of the settings at a later point in time, all you have to do is to change the settings in meta.json and run the update command again. the next step is to create a tarball to be uploaded later: now you are ready for the versioning, and can upload as follows: and voilã , we can now find our ros 2 integration in the viam registry: ros2 integrationâ module found in the viam modular registry deploying code using the ros 2 module as an example onward to the exciting part! my turtlebot 4 was already set up with the viam server and connected to the viam cloud platform. so all i had to do next was to login to the viam cloud and navigate to the configuration section of my robot, hit the create component button, and type the component or service which i would like to add. as you can see in the screenshot below, the viam registry gets automatically searched and provides you with all the different options available. searching the viamâ modular registry for a ros2 camera. the last step is to configure the added ros 2 component, which is the camera in my example here. most components and services only need to have the ros topic defined as shown in the following screenshot. the module automatically reconfigures the component, and when you navigate to the control tab, you should directly have access to it. configuring the added component, the ros2 camera. the component i enjoy interacting with the most is the base. it gives you direct remote control just by adding two configuration parameters, as shown below: controlling the ros2 base within viam's 'control' tab. curious? go and try it out for yourself, and if you get stuck, donât hesitate to ask  it on our discord channel . you are also very welcome to contribute!â have fun! on this page text link share ros & viam october 12, 2023 get started with viam today! start building view documentation â subscribe for updates email thank you! the email bot has received your submission. please enter a valid email address. get started platform overview data registry fleet management ai & machine learning mobility build core pricing security & compliance use cases code deployment data analytics mobile enablement predictive maintenance accelerate ros interoperability computer vision request a demo case studies customers resources  documentation tutorials github modular registry viam rover try viam community events support company  us team careers we're hiring! newsroom  2023, viam, inc. @viam.com  of use |  policy