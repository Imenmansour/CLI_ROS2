open in app sign up sign in write sign up sign in using robostack for ros2 robofoundry  follow 4 min read  aug 11, 2022 -- listen share in 2021 when i attended ros world 2021 virtually, i was intrigued by one of the session given by wolf vollprecht called  robostack  cross-platform ros packages for science, the cloud and windows . however, i was not very familiar with the conda/mamba toolset so it went on the back burner for a while. however, recently i wanted to install humble hawksbill on a laptop that was still running ubuntu 20.04 and the only way to get the humble installed on it was using a docker. in addition, one of the folks i connected on twitter mentioned a new plugin for editing urdf using a jupyter notebook plugin and while trying to figure out how to install that plugin i again came across robostack. so i figured i would give it another shot. this article is a description of steps i followed to get it up and running. first some big advantages of using robostack, this from the original post from robostack folks on ros discourse believe me robostack contributors put in a lot of their own time to make this toolset such an amazing and easy to work with ros and its labor of love for them so kudos to the entire team. if you have any issue or question reach out to them on gitter or log an issue on their github page and they are super fast in responding. i ran into a problem while installing the humble after i created the conda environment and i posted the question to them and got an answer in less than an hour and i was able to successfully install humble after that. here are the main steps i followed to install humble on my 12 year old laptop running ubuntu 20.04. again, these are the steps for linux machine and if you are trying to install it on windows machine you may have to tweak the steps. step 1 pre-requisite  install mamba via miniforge[i did not have it so i had to install] ### first install mamba by running following command curl -l -o "https://github.com/conda-forge/miniforge/releases/latest/download/mambaforge-(uname)-(uname -m).sh" bash mambaforge-(uname)-(uname -m).sh after installation is complete dont forget to source your .bashrc file by running following command as the installation will append the location of mamba to path in your .bashrc file. source ~/.bashrc step 2  install conda ### install conda conda install mamba -c conda-forge step 3  create new environment and activate it ### now create a new environment and activate [notice it uses python 3.9] mamba create -n ros_env python=3.9 mamba activate ros_env ### you can leave the env by running deactivate while you are in the env mamba deactivate important note: initially when you install conda, you get default (base) environment created for you automatically. do not install any ros packages in (base) environment. first create and activate your new ros env and then install ros packages there. step 4  add channels ### this adds the conda-forge channel to the new created environment configuration conda config --env --add channels conda-forge ### add the robostack channels conda config --env --add channels robostack conda config --env --add channels robostack-humble conda config --env --add channels robostack-experimental step 5  install ros2 humble and compilers mamba install ros-humble-desktop-full # optionally, install some compiler packages if you want to e.g. build packages in a colcon_ws: mamba install compilers cmake pkg-config make ninja colcon-common-extensions step 6  test it out at this point you should be able to run any standard ros2 commands. ### launch ros2 cli ros2 ### launch rviz2 gui rviz2 ### launch a demo node talker ros2 run demo_nodes_cpp talker ### from another terminal activate the conda env and launch a demo listener ros2 run demo_nodes_cpp listener installing ros2 foxy side-by-side most of the commands and steps are same as for humble except these differences 1. foxy requires python 3.8 so when you create a new mamba environment specify that like this mamba create -n ros_foxy python= 3.8 2. activate the environment and add channels like this ### this adds the conda-forge channel to the new created environment configuration conda config --env --add channels conda-forge ### and the robostack channels [we don't need to add humble channel] conda config --env --add channels robostack conda config --env --add channels robostack-experimental 3. install ros2 foxy like this ### foxy desktop is not available at present so install the base pkg mamba install ros-foxy-ros-base ### while you are in env e.g. ros_foxy you can verify that foxy is running separately by running following command and it should show a path separate from humble like this - /home/username/mambaforge/envs/ros_foxy/bin/ros2 which ros2 cool thing is robostack runs without any vms so you can access the hardware directly as usual. you can also go ahead and run jupyter notebook on top of this. ill probably cover that topic in future article. thats it!! you have both ros2 humble and foxy running in completely separate mamba environment with different versions of python. enjoy!!! references robostack: using ros alongside the conda and jupyter ecosystems on any linux, macos, windows & arm dear ros users, we are excited to announce the robostack project, which combines ros with conda-forge and the jupyter discourse.ros.org robostack home page getting started robostack is a bundling of ros for linux, mac and windows using the conda package manager, based on top of conda-forge robostack.github.io you can ask questions on gitter here: robostack/lobby looking for: ['ros-humble-desktop-full'] conda-forge/linux-64 no changerobostack/linux-64 no changerobostack/noarch no gitter.im you can check available packages here: robostack welcome to robostack - a bundling of the robot operating system (ros) by open robotics for linux, mac and windows using robostack.github.io ros2 robotics python follow written by robofoundry 331 followers follow help status  careers press    text to speech teams