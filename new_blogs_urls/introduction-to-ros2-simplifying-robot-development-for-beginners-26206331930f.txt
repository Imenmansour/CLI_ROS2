simplifying robot development for beginners hardik tewari  follow 5 min read  aug 13, 2024 -- listen share what is robotics? as engineers, we have always been fascinated with building and studying. we also learn to apply our theoretical knowledge through real world applicaitons. robotics is one of many such fields. it is a multidisciplinary field that integrates engineering, computer science, and technology to design, build, and operate robots. image: 1a these machines can perform tasks autonomously or semi-autonomously, making them valuable in various industries such as manufacturing, healthcare, and exploration. robotics aims to create intelligent systems capable of interacting with the physical world. but before building an actual robot, we need to make sure that all of our calculations and design requirements are met through simulation softwares. why use ros2 in robotics? ros2, the latest version of this open-source framework, provides the infrastructure needed to create robust and scalable robotic applications. designed to make building robots easier, ros2 addresses many of the challenges faced by developers and researchers in the robotics community. image: 2a in this article, we will explore what ros2 is, its advantages over its predecessor, and how it simplifies the process of building robots. whether you are a beginner stepping into the world of robotics or an experienced developer looking to transition to ros2. at the time of writing this article, ros2 is supported for ubuntu 22.04(jammy jellyfish and later versions). ros2 can be used for several robotics applications such as navigations, mobile control, manipulator robots, etc. lets discuss how to start your first ros2 package. after installing ros2, you have to source it in the terminal for the computer to recognise the software. this can be done individually through:- source /opt/ros/humble/setup.bash but i recommend adding this to the bashrc so we dont have to type in this every terminal. open the bashrc by gedit ~/.bashrc scroll to the bottom and add the source command to it. then you can save and exit. check for the proper installation of ros2 by typing this in the terminal:- echo ros2_distro with this command, you can find out the version of ros2 installed dds and pub/sub architechture before we start building our package, lets cover a few basic concepts to better understand how ros2 works. ros2 uses dds (data distribution service) as its middleware, which is a fundamental change from ros. unlike ros, ros2 does not rely on a central ros master node for communication. instead, dds enables decentralized communication, allowing nodes to discover and communicate with each other directly. check out more  this through this link:- dds implementation in ros ros2, like ros1, uses a publish/subscribe (pub/sub) architecture, which is pivotal for its communication system. in this model, publishers generate messages that are consumed by subscribers. heres a breakdown of the key components: image: 3a node : nodes are the fundamental building blocks of a ros2 system. they perform computations and communicate with other nodes. nodes can publish messages to named topics to send data or subscribe to named topics to receive data. topics : topics are named channels used for message exchange between nodes. they act as a communication bus, allowing data to flow from publishers to subscribers. publisher : a publisher is a node that sends messages to a topic. it pushes data into the communication channel for subscribers to consume. subscriber : a subscriber is a node that receives messages from a topic. it listens to the communication channel and processes the incoming data. one of the strengths of the pub/sub model is its flexibility. multiple subscribers can listen to the same topic, allowing different parts of your system to react to the same data. similarly, you can have multiple publishers sending messages to the same topic, though its essential to manage this carefully to avoid complexity and ensure data consistency. there are other architecture types like actions and services which are useful for different scenarios. for more information on this, you can refer this documentation:- ros2 cli tools now lets start with some basics of how to use ros2. building a ros2 package with colcon to build a package in ros2, you need to use colcon, a command-line tool that assists with the build, test, and install processes. colcon is essential for managing your ros2 packages, making it easier to iterate on your code. installing colcon sudo apt install python3-colcon-common-extensions using colcon to build packages first make a directory, lets start with ros2_ws with:- mkdir ros2 navigate to the workspace and create a src folder which will contain your source code:- mkdir src still inside the directory, use the following command to build your package:- colcon build this command will add the build, install, and log directories to your workspace. you can read more  here:- colcon tutorials after building your package, you can start your project in the workspace some important points after building your package, you need to source your workspace in the terminal so ros2 can find your files. the setup.bash file will be present inside your install directory. run: source ~/ros2_ws/install/setup.bash you can add this line to your .bashrc file to source it automatically in every new terminal session. to enable tab completion for colcon, add the following command to your .bashrc file: source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash make sure to build your package with colcon whenever you make changes to your files or add new files to your package. you can use the following command to automatically build your package and create symlinks for easier development: colcon build --symlink-install this command allows colcon to track your current files and automatically rebuild the package when changes are made. conclusion thank you for reading this article. i will post another follow-up article  ros2 basics soon, including tips on file management and other essential tools for beginners. references https://docs.ros.org/en/humble/index.html image references 1a  what is a robotic manipulator? 2a  ros 2 manipulation basics | the construct 3a  pub/sub messaging model ros2 robotics follow written by hardik tewari 1 follower follow help status  careers press    text to speech teams