ros2 tutorials #5: how to create a ros2 package for python written by alberto ezquerro  ros2 tutorials  02/08/2019  in this post, you will learn how to create a simple ros2 package for python. you dont need a ros2 installation for this as we will use the ros development studio (rosds) , an online platform that provides access to ros (1 or 2) computers and other powerful ros tools within a browser! ps: if you have ros2 installed locally on your machine, you can skip step 1. step 1: create a project (rosject) on rosds head to http://rosds.online and create a project with a similar configuration as the one shown below. you can change the details as you like, but please ensure you select ubuntu 18.04 + ros2 crystal under configuration. once done with that, open your rosject. this might take a few moments, please be patient. step 2: source the ros2 workspace once the rosject is open, head to the tools menu and pick the shell tool (if on your local pc just fire up a terminal) and run the following command to source the workspace: user:~ source /opt/ros/crystal/setup.bash ros_distro was set to 'melodic' before. please make sure that the environment does not mix paths from different distributions. user:~ if you get that ros_distro warning, just ignore it. step 3: create a ros2 python package in your ros2 workspace the syntax for creating a ros2 python package is ros2 pkg create <package_name> . in the same terminal as in step 2, change to your ros2 workspace src directory and create a package there: user:~ cd ros2_ws/src user:~/ros2_ws/src ros2 pkg create ros2_demo_py going to create a new package package name: ros2_demo_py destination directory: /home/user/ros2_ws/src package format: 2 version: 0.0.0 description: todo: package description maintainer: ['user <user@todo.todo>'] licenses: ['todo: license declaration'] build type: ament_cmake dependencies: [] creating folder ./ros2_demo_py creating ./ros2_demo_py/package.xml creating source and include folder creating folder ./ros2_demo_py/src creating folder ./ros2_demo_py/include/ros2_demo_py creating ./ros2_demo_py/cmakelists.txt user:~/ros2_ws/src step 4: delete cmakelists.txt , create setup.py and setup.cfg and edit package.xml unlike ros1, ros2 python packages dont use cmakelist.txt , but a new setup.py file. lets create one here. in the shell: user:~/ros2_ws/src cd ros2_demo_py/ user:~/ros2_ws/src/ros2_demo_py rm cmakelists.txt user:~/ros2_ws/src/ros2_demo_py touch setup.py user:~/ros2_ws/src/ros2_demo_py touch setup.cfg user:~/ros2_ws/src/ros2_demo_py fire up the ide, locate the setup.py file and paste in the following code: from setuptools import setup package_name = 'ros2_demo_py' setup( name=package_name, version='0.7.0', packages=[package_name], install_requires=['setuptools'], zip_safe=true, author='you', author_email='you@youremail.com', maintainer='yourfirstname lastname', maintainer_email='your@youremail.com', keywords=['ros'], classifiers=[ 'intended audience :: developers', 'license :: osi approved :: apache software license', 'programming language :: python', 'topic :: software development', ], description='a simple ros2 python package', license='apache license, version 2.0', tests_require=['pytest'], entry_points={ 'console_scripts': [ 'demo = ros2_demo_py.demo:main' ], }, ) locate the setup.cfg file and paste in the following code: [develop] script-dir=base/lib/ros2_demo_py [install] install-scripts=base/lib/ros2_demo_py locate package.xml and replace the contents with this snippet: <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format2.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format="2"> <name>ros2_demo_py</name> <version>0.7.3</version> <description>a simple ros2 python package</description> <maintainer email="sloretz@openrobotics.org">shane loretz</maintainer> <license>apache license 2.0</license> <exec_depend>rclpy</exec_depend> <exec_depend>std_msgs</exec_depend> <!-- these test dependencies are optional their purpose is to make sure that the code passes the linters --> <test_depend>ament_</test_depend> <test_depend>ament_flake8</test_depend> <test_depend>ament_pep257</test_depend> <test_depend>python3-pytest</test_depend> <export> <build_type>ament_python</build_type> </export> </package> step 5: create the python code in the shell, run the following commands: user:~/ros2_ws/src/ros2_demo_py mkdir ros2_demo_py && cd ros2_demo_py user:~/ros2_ws/src/ros2_demo_py/ros2_demo_py touch demo.py user:~/ros2_ws/src/ros2_demo_py/ros2_demo_py touch __init__.py user:~/ros2_ws/src/ros2_demo_py/ros2_demo_py we created the __init__.py file so that the ros2_demo_py folder could be recognized as a python module directory. locate the demo.py file, open it in the ide and paste in the following code: #  2016 open source robotics foundation, inc. # # licensed under the apache license, version 2.0 (the "license"); # you may not use this file except in compliance with the license. # you may obtain a copy of the license at # # http://www.apache.org/licenses/license-2.0 # # unless required by applicable law or agreed to in writing, software # distributed under the license is distributed on an "as is" basis, # without warranties or conditions of any kind, either express or implied. # see the license for the specific language governing permissions and # limitations under the license. import rclpy from rclpy.node import node from std_msgs.msg import string class minimalpublisher(node): def __init__(self): super().__init__('minimal_publisher') self.publisher_ = self.create_publisher(string, 'topic') timer_period = 0.5 # seconds self.timer = self.create_timer(timer_period, self.timer_callback) self.i = 0 def timer_callback(self): msg = string() msg.data = 'hello world: %d' % self.i self.publisher_.publish(msg) self.get_logger().info('publishing: "%s"' % msg.data) self.i += 1 def main(args=none): rclpy.init(args=args) minimal_publisher = minimalpublisher() rclpy.spin(minimal_publisher) # destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_publisher.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() step 6: compile the package and source the workspace we have created all the files needed. now lets compile. user:~/ros2_ws/src/ros2_demo_py/ros2_demo_py cd /home/user/ros2_ws/ user:~/ros2_ws colcon build --symlink-install starting >>> ros2_demo_py finished <<< ros2_demo_py [0.78s] summary: 1 package finished [0.90s] user:~/ros2_ws source install/setup.bash # source the workspace user:~/ros2_ws step 7: test-run the package here comes the moment of truthwill it run? user:~/ros2_ws ros2 run ros2_demo_py demo [info] [minimal_publisher]: publishing: "hello world: 0" [info] [minimal_publisher]: publishing: "hello world: 1" [info] [minimal_publisher]: publishing: "hello world: 2" [info] [minimal_publisher]: publishing: "hello world: 3" [info] [minimal_publisher]: publishing: "hello world: 4" ... great, it ran! were done here!! extra 1: rosject link get the rosject containing all code used in the post in the following link: http://www.rosject.io/l/bd0cfbd/ extra 2: video prefer to watch a video demonstrating the steps above? we have one for you below! related resources ros2 full course for beginners ros development studio (rosds) robot ignite academy feedback did you like this post? do you have questions  what is explained? whatever the case, please leave a comment on the comments section below, so we can interact and learn from each other. if you want to learn  other ros topics, please let us know in the comments area and we will do a video or post  it code edited by bayode aderinola topics: ros package | ros q&a | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 2 comments andrew van dam on 08/01/2020 at 1:24 pm fantastic for creating a package but it feels a bit like a recipe without an explanation. what is the purpose of these files, how do they relate to each other, what should i modify? i know that s asking a lot but it would be really helpful within this series. especially when it comes to extrapolating the code for creating new functions. reply fabrizio schiano on 22/02/2022 at 12:18 pm instead of `self.publisher_ = self.create_publisher(string, topic)` i think you need `self.publisher_ = self.create_publisher(string, topic, 10)` right? otherwise youll get an error: `typeerror: create_publisher() missing 1 required positional argument: qos_profile` reply submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail