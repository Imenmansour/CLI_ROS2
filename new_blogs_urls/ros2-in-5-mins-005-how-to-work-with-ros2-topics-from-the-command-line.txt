[ros2 in 5 mins] 005  how to work with ros2 topics from the command line written by bayode aderinola  ros2 tutorials  25/11/2018 hello ros2 developers! in this post, well see how to work (or play) with ros2 topics from the command line. this is very useful for tinkering with ros2 topics as wells as writing and debugging mission-critical ros2 programs. lets go, shall we? getting ready for the action this post is 99.99% practical, so you need a functional ros2 installation to follow along. we will use one of the awesome docker images of ros2 provided by the open source robotics foundation (osrf), to keep it easy for everyone and make sure we can tinker with ros2 without committing too much time to installing it (yet). choose any of the following options: spin a free ros development environment at rosds . with this, you skip all installations; just a few clicks and you will have access a ros-ready computer within your browser. this is the recommended option and the one used for this post. in this option, a open a terminal means you should pick the shell app from the rosds tools menu. you have docker installed on your local development machine. please note that a ros2 installation is not necessary since were using a docker image. open a terminal on your machine and spin up the ros2 docker image: user:~ docker run -it osrf/ros2:nightly unable to find image 'osrf/ros2:nightly' locally nightly: pulling from osrf/ros2 ... root@759719bcb5a5:/# important: if the image tag specified is not available, please check out the available tags at https://hub.docker.com/r/osrf/ros2/tags. now open three other terminals and run the same command above. well need to work with them in parallel. so we should have four terminals now, terminals 1  4. ros2 topics  how you can work (or play) with them now we are getting down to it; lets see how we can work or play with ros2 topics. see a list of commands available to work with ros2 first, we want to see the operations we can do on ros2 topics. depending on the version of ros2 in the image you are able to spin, you might see a slightly different output. the version used in this post is ros2 crystal, but the one in the video is ros2 bouncy. that said, well be looking at basically the same operations regardless of the ro2 version. to see what commands you can run against ros2 topics, type in the command shown below. in terminal 1: root@759719bcb5a5:/# ros2 topic usage: ros2 topic [-h] [--include-hidden-topics] call `ros2 topic <command> -h` for more detailed usage. ... various topic related sub-commands optional arguments: -h, --help show this help message and exit --include-hidden-topics consider hidden topics as well commands: delay display delay of topic from timestamp in header echo output messages from a topic hz print the average publishing rate to screen info print information  a topic list output a list of available topics pub publish a message to a topic call `ros2 topic <command> -h` for more detailed usage. there you go! now lets try some of these commands. see a list of available topics following the output of the command we ran above, lets get this list of available topics. in terminal 1: root@759719bcb5a5:/# ros2 topic list /parameter_events /rosout ros2 created the above topics by default; we didnt create them. but thatll change in a bit.  take home: run the command ros2 topic list -h to see more options for this command, and try out some. create a topic and publish to it at the same time now well create and publish to a new topic, /barbarians : run the command below. in terminal 1: root@759719bcb5a5:/# ros2 topic pub /barbarians std_msgs/string "data: hello world!" publisher: beginning loop publishing #1: std_msgs.msg.string(data='hello world!') publishing #2: std_msgs.msg.string(data='hello world!') publishing #3: std_msgs.msg.string(data='hello world!') publishing #4: std_msgs.msg.string(data='hello world!') basically, to publish to a topic, you do ros2 topic pub [topic_name] [message_type] [message_in_right_structure] . for our case above: our desired topic name was /barbarians the message type i wanted to publish is a string, so i just used the inbuilt message type std_msgs/string. you can get a list of inbuilt messages with ros2 msg list . i composed the message according to the structure dictated by std_msgs/string . i got the structure of this message type with: root@dd56efdf3a28:/# ros2 msg show std_msgs/string string data and thats it! also, by publishing to a topic that did not exist before, we got ros2 to automatically create it. lets confirm that. in terminal 2: root@ed2f3e495885:/# ros2 topic list /barbarians /parameter_events /rosout root@ed2f3e495885:/# we could also publish to an existing topic, and well see that shortly.  take home: run the command ros2 topic pub -h to see more options for this command, and try out some. view some pertinent info  a topic time to see some info  /barbarians  in terminal 2: root@dd56efdf3a28:/# ros2 topic info /barbarians topic: /barbarians publisher count: 1 subscriber count: 0 root@dd56efdf3a28:/# so we see that we have 1 node publishing to the topic, and zero nodes subscribed to it. since its a barbaric topic, lets have another node publishing to it: in terminal 3: root@b1cf8a1224ce:/# ros2 topic pub /barbarians std_ms/string "data: hello barbs!" publisher: beginning loop publishing #1: std_msgs.msg.string(data='hello barbs!') publishing #2: std_msgs.msg.string(data='hello barbs!') publishing #3: std_msgs.msg.string(data='hello barbs!') now get back to terminal 2 and re-run ros2 topic info /barbarians : root@dd56efdf3a28:/# ros2 topic info /barbarians topic: /barbarians publisher count: 2 subscriber count: 0 root@dd56efdf3a28:/# we now have 2 publishers but, still, there are no subscribers. grossly unfair, lets change that narrative! subscribe to a topic to subscribe means to get the message(s) being published to a topic. time to do that for /barbarians , so get set for some babbling. in terminal 4: root@dd56efdf3a28:/# ros2 topic echo /barbarians data: hello barbs! data: hello world! data: hello barbs! data: hello world! data: hello barbs! data: hello world! so we see the two different messages being published to the topic. now, back to terminal 2, lets spy on the /barbarian topic once more: root@ba621804eaa6:/# ros2 topic info /barbarians topic: /barbarians publisher count: 2 subscriber count: 1 as expected, we now have 1 subscriber. more commands to play with? and that was all! or maybe not. we have seen how to use four different commands related to ros2 topics: list , pub , info , echo . you may have seen that we didnt cover every command listed. what to do with the ones we didnt cover? try them out on your own, of course ;). the video version of this post i hope you learned something useful from this post. if you prefer to watch the video version of this post, we have you covered. please find the video below. feedback did you like this video? whatever the case, please leave us some feedback in the comments section below, so we can interact and learn from each other. if you want to learn  other ros topics, please let us know in the comments area and we will do a video or post  it. thank you! topics: ros q&a | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 1 comment eyeneeli on 03/07/2021 at 4:54 pm hello, how can i solve this problem with this page showing? eye reply submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail