0 ros 2 jazzy jalisco released ros may 30 written by geoffrey biggs today we are happy to announce the tenth release of ros 2, jazzy jalisco! jazzy is a long term support release that will be supported until the end of may, 2029. ros jazzy supports three tier 1 operating systems out of the box: ubuntu 24.04 noble numbat (both arm64 and amd64 architectures) and windows 10. other operating systems are also supported as listed in rep-2000 . if you want to try it out, our installation instructions and tutorials are now up and ready to go on docs.ros.org , and docker images are available on dockerhub. this release is named after the jalisco river turtle , a common species of mud turtle that lives in mexico, primarily in jalisco and colima. the jazzy part? well, that was probably inspired by roscon 2023 in new orleans . for this release we worked with a new illustrator, ryan hungerford , to produce a release graphic inspired by the name. ryan also illustrated the release artwork for gazebo harmonic. as always, jazzy jalisco merchandise , including t-shirts, is available. all proceeds go to funding open-source development and education at the open source robotics foundation. getting jazzy out the door has been a massive team effort, with 211 contributors providing code changes and 29 testers completing over 400 tests during our test and tutorial party. we want to extend our heartfelt thanks to everyone in the ros community who helped to make this release happen! we couldnt do this without the support of the ros open source community. we traditionally announce the name of the next ros release once weve completed the current ros release. after a long brainstorming session and multiple rounds of voting by the core team, we are excited to let you know that our may, 2025 release of ros will be named kilted kaiju . new features and enhancements jazzy jalisco is feature packed and full of improvements! weve summarized a few new features well think youll love below. easier gazebo integration even though the osrf maintains the gazebo simulator , weve always strived to keep ros simulator agnostic. no simulator is perfect, and we want ros users to choose the simulator that works best for their particular application. however, usability, education, and batteries included also matter! many newer members of our community struggle with getting ros and gazebo to work well together. starting with jazzy were trying to improve the usability of gazebo with ros while still giving users the option to use their favorite simulator. to do this we now recommend a particular gazebo release for each ros release. for jazzy jalisco, the recommended gazebo release is gazebo harmonic . for each recommended gazebo release we will distribute gazebo vendor packages that users can easily install so they can get started quickly. you can find a full list of our gazebo vendor packages and instructions on how to use them here . ros command line interface improvements the ros 2 command line sports a handful of new features that should make your life easier! here are a couple of highlights. pick your own log file names ! just add `--log-file-name` to set a custom log file for a `ros2 run` command. set your own quality of service when calculating topic statistics. calls to `ros2 service info` now report the number of connected clients. actions now report their type information  i.e. `ros2 action type /action_name` returns the action type. rosbag improvements ros services play a critical role in any ros system, as many developers use services as the building blocks for more complex behaviors or as the user-facing api for a robot. making a robot perform a behavior is often as simple as calling a quick service request. ros bags are often used by ros developers much like an airplanes black box, with recorded data often being used to analyze and debug failure modes. unfortunately, in all previous ros releases, bags could not log service calls, making it difficult to understand the series of service calls that led to a particular failure mode. jazzy fixes this oversight by adding the ability to log service calls to and replay them from a bag . another useful feature weve added to bags in jazzy is the ability to selectively record topics by type. lets say you wanted to record all of the image topics for every one of the five cameras on your autonomous car. prior to jazzy you would need to enumerate every image topic on your robot to make that happen. now you can simply tell rosbag to log all messages of type `sensor_msgs/msg/image` and rosbag will take care of the rest. but wait, theres more! you can also exclude particular message types too! this is particularly useful if you want to keep your bags lean so you can quickly share them with colleagues. rviz2 rviz2, the built-in ros 2 visualization tool, comes with a suite of new features that improve rvizs overall usability and help filter out unnecessary information. briefly, weve added the following features. regex-based filters for tf  you can now show and hide transforms based on their name. topic frequency in status bar  all topics now automatically report their frequency in hertz. reset time via keyboard  you can now reset your simulation time by pressing r. visualize point_cloud_transport  you can now subscribe to `point_cloud_transport` topics display camera info in rviz  want exposure info? youve got it. ros 1 feature parity for depthcloud, accelstamped, twiststamped, wrenchstamped and effort message types. miscellaneous improvements of note across the project, there were several small improvements that should make life easier for ros developers. many of these improvements came from community members trying to make everyones lives just a little bit easier. a whole host of improvements to ros perception are now available for image transport, including lazy subscribers, qos settings, a parameter to disable plugins at run-time, and much more. qos settings introspection added to python . human readable dates added to logging output . names added to polygon messages so they are easier to identify. we added a twist message interpolator for more precise twist lookups from tf. ros timers can now return actual and expected times for callbacks . preview: zenoh rmw while it is not a part of this release, we also want to say a few words  zenoh. back in september of last year , we said that we would be working on a new ros middleware (rmw) implementation that integrates zenoh with ros 2. our contributors have made steady progress on it, and rmw_zenoh is now mostly feature-complete. however, it may still change in minor ways as we complete testing, debugging, and finalizing the implementation. rest assured that well be continuing to work on and improve it in the coming year, as we target a first release with kilted kaiju. for now, to use this new rmw you will need to compile ros 2 jazzy from source along with the new rmw. since this is a feature in testing, we want to hear  your experiences, particularly for larger ros deployments with heavy or complex networking needs. for more information on how to try it out, please see the readme file . another great release were so excited and relieved to have shipped another ros 2 release, and we are looking forward to working with our contributors, ros community members, open source robotics alliance members, and partner organizations on ros 2 kilted kaiju. if you or your organization would like to become more involved in ros development, please reach out to us , or just take a look at the repositories on github , and start filing issues and fixing bugs! if you want to provide more long-term support to the people and infrastructure that make the ros project possible, please consider joining the open source robotics alliance . ros ros 2 geoffrey biggs geoffrey biggs is the cto at the open source robotics foundation, where he leads the technical efforts of the osrf, including both the open-source projects themselves (at an abstract level) and the work the osrf performs to support those projects. previously, he was a software engineer at open source robotics corporation, where he worked mainly on ros and open-rmf. geoff has more than 20 years of experience working with and on open-source software, beginning with the player project. he is constantly looking for ways to convince the world that formal methods are great. https://openrobotics.org previous previous open robotics and google summer of code 2024 next next announcing the open source robotics alliance