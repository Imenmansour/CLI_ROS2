how to use the gazebo differential drive plugin in ros 2 written by bayode aderinola  gazebo tutorials | ros2 q&a | ros2 tutorials  28/02/2023 in this post, you will learn how to use the gazebo differential drive plugin in ros 2. this post answers the following question posted on ros answers. step 1: copy a sample project with a ros 2 gazebo simulation using the differential drive plugin hey, do i have to install ros2 first? absolutely not! we will be using the construct to get access to virtual machines pre-installed with ros. click here to copy the ros2 turtlebot3 sandbox project. once copied, click the red run button to launch the project in a virtual machine. please be patient while the environment loads. ps: you will need to log in or create an account to copy the packages. you might also want to try this on a local pc if you have ros2 and some executables installed. however, please note that we cannot support local pcs and you will have to fix any errors you run into on your own. the post assumes that you are working on the construct; please adapt them to your local pc and ros2 installation. step 2: find and explore the gazebo model file containing the differential drive plugin now, we will find a gazebo model file with the differential drive plugin. for this post, well use the turtlebot3_ws/src/turtlebot3_simulations/turtlebot3_gazebo/models/turtlebot3_burger/model.sdf file. sometimes its also defined as a .xacro file. head over to the code editor to explore this file as well as other files. open the code editor gazebo model file lets examine the differential drive section of this plugin file and compare it with the one on the ros answers post. turtlebot3_ws/src/turtlebot3_simulations/turtlebot3_gazebo/models/turtlebot3_burger/model.sdf <plugin name="turtlebot3_diff_drive" filename="libgazebo_ros_diff_drive.so"> <ros> <!-- <namespace>/tb3</namespace> --> </ros> <update_rate>30</update_rate> <!-- wheels --> <left_joint>wheel_left_joint</left_joint> <right_joint>wheel_right_joint</right_joint> <!-- kinematics --> <wheel_separation>0.160</wheel_separation> <wheel_diameter>0.066</wheel_diameter> <!-- limits --> <max_wheel_torque>20</max_wheel_torque> <max_wheel_acceleration>1.0</max_wheel_acceleration> <command_topic>cmd_vel</command_topic> <!-- output --> <publish_odom>true</publish_odom> <publish_odom_tf>true</publish_odom_tf> <publish_wheel_tf>false</publish_wheel_tf> <odometry_topic>odom</odometry_topic> <odometry_frame>odom</odometry_frame> <robot_base_frame>base_footprint</robot_base_frame> </plugin> on lines 385 and 392 , we see entries for the /cmd_vel ( <command_topic>cmd_vel</command_topic> ) and /odom ( <odometry_topic>odom</odometry_topic> ) topics respectively. however, these entries are missing in the file on ros answers. gazebo plugin file : mising command and odometry entries <?xml version="1.0"?> <robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="robot"> <gazebo> <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so"> <!-- wheel info--> <left_joint>left_wheel_joint</left_joint> <right_joint>right_wheel_joint</right_joint> <wheel_separation>0.35</wheel_separation> <wheel_diameter>0.1</wheel_diameter> <!-- limits--> <max_wheel_torque>200</max_wheel_torque> <max_wheel_acceleration>10.0</max_wheel_acceleration> <!-- output--> <odometry_frame>odom</odometry_frame> <robot_base_frame>base_link</robot_base_frame> <publish_odom>true</publish_odom> <publish_odom_tf>true</publish_odom_tf> <publish_wheel_tf>true</publish_wheel_tf> </plugin> </gazebo> </robot> are these lines really necessary for moving the robot and getting its odometry? lets find out! step 3: investi gate the impacts of the of the command and odometry topic tags lets comment out those tags in the file, and see if we can find the /cmd_vel and /odom topics, and if they work. turtlebot3_ws/src/turtlebot3_simulations/turtlebot3_gazebo/models/turtlebot3_burger/model.sdf (modified) <plugin name="turtlebot3_diff_drive" filename="libgazebo_ros_diff_drive.so"> <ros> <!-- <namespace>/tb3</namespace> --> </ros> <update_rate>30</update_rate> <!-- wheels --> <left_joint>wheel_left_joint</left_joint> <right_joint>wheel_right_joint</right_joint> <!-- kinematics --> <wheel_separation>0.160</wheel_separation> <wheel_diameter>0.066</wheel_diameter> <!-- limits --> <max_wheel_torque>20</max_wheel_torque> <max_wheel_acceleration>1.0</max_wheel_acceleration> <!-- <command_topic>cmd_vel</command_topic> --> <!-- output --> <publish_odom>true</publish_odom> <publish_odom_tf>true</publish_odom_tf> <publish_wheel_tf>false</publish_wheel_tf> <!-- <odometry_topic>odom</odometry_topic> --> <odometry_frame>odom</odometry_frame> <robot_base_frame>base_footprint</robot_base_frame> </plugin> now lets run the packagein terminal 1  cd source turtlebot3_ws/install/setup.bash export turtlebot3_model=burger ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py check the topics in terminal 2  ros2 topic list # output: /clock /cmd_vel /imu /joint_states /odom /parameter_events /performance_metrics /robot_description /rosout /scan /tf /tf_static well, the topics are there, but are they working? lets publish to the /cmd_vel topic and see if the robot moves. we also echo the /odom in another terminal. run the following in terminal 2 : # try to move the robot with teleop ros2 run teleop_twist_keyboard teleop_twist_keyboard then in terminal 3 : ros2 topic echo /odom the robot didnt move and nothing was echoing from /odom ! now we need to confirm that its not working because of those tags. lets modify the launch command in terminal 1 . press ctrl + c to stop the simulation and run the following commands instead: # note that we changed the turtlebot3 model export turtlebot3_model=waffle ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py now try to move the robot again and check the /odom echingpoof, both working! why? we modified the model file for burger; the one for waffle was intact! final confirmation: uncomment the lines in turtlebot3_ws/src/turtlebot3_simulations/turtlebot3_gazebo/models/turtlebot3_burger/model.sdf , stop the simulation in terminal 1 and run the following commands. # note that we changed the turtlebot3 model back to burger export turtlebot3_model=burger ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py done! now everything should be working! so we have confirmed that the command and odometry tags are necessary. step 4: check your learning do you understand how to use the gazebo differential drive plugin in ros 2? if you dont know it yet, please go over the post again, more carefully this time. (extra) step 5: watch the video to understand how to use the gazebo differential drive plugin in ros 2 here you go: feedback did you like this post? do you have any questions  how to use the gazebo differential drive plugin in ros 2 ? please leave a comment in the comments section below, so we can interact and learn from each other. if you want to learn  other ros2 topics, please let us know in the comments area and we will do a video or post  it. get ros2 industrial ready- hands-on training by the construct cover.png topics: diff drive | differential drive | gazebo | gazebo plugin | gazebo plugins | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail