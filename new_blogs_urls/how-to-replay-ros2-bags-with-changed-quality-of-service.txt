how to replay ros2 bags with changed quality of service written by bayode aderinola  ros2 q&a | ros2 tutorials  11/08/2022 in this post, you will learn how to replay ros2 bags with changed quality of service (qos) setting. youll discover how to set the qos before recording the bag, and how to change the qos when playing back the bag file. step 1: get a copy of the ros package containing the code used in the post click here to copy the project. it would be copied to your cloud account at the construct. that done, open the project using the run button. this might take a few moments, please be patient. ps: if you dont have an account on the the construct, you would need to create one. once you create an account or log in, you will be able to follow the steps to read and write parameters in ros1 and ros2. you might also want to try this on a local pc if you have ros installed. in that case you need to read on and duplicate the source code of the package in your own local workspace. however, please note that we cannot support local pcs and you will have to fix any errors you run into on your own. step 2: start a simulation and the quality of service publisher open a web shell open a web shell (1) and run the following commands to start a simulation: export gazebo_resource_path=/home/user/ros2_ws/src/turtlebot/turtlebot3_simulations/turtlebot3_gazebo:{gazebo_resource_path} export gazebo_model_path=/home/user/ros2_ws/src/turtlebot/turtlebot3_simulations/turtlebot3_gazebo/models:{gazebo_model_path} export turtlebot3_model=waffle ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py you should see a simulation like this. if the robot does not show up, shutdown using ctrl+c and run the above command again. turtlebot3 simulation now make the robot move by publishing to the /cmd_vel topic, in another web shell (2). you should see the robot move. ros2 topic pub --once /cmd_vel geometry_msgs/msg/twist "{linear: {x: 0.1, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.0}}" now start the qos publisher in the same web shell (2) where you published to /cmd_vel . note that we set the reliability to reliable . the qos publisher publishes to the /robot_pose topic. ros2 run qos_pose_publisher qos_pose_publisher -reliability reliable now lets look at the reliability of the /robot_pose topic in a new web shell (3): ros2 topic info /robot_pose --verbose you should see something like this as part of the output: qos profile: reliability: reliable durability: volatile lifespan: 9223372036854775807 nanoseconds deadline: 9223372036854775807 nanoseconds liveliness: automatic liveliness lease duration: 9223372036854775807 nanoseconds step 3: record and play back a ros2 bag file of a topic now lets record a ros2 bag file of a topic in web shell (3). we are using the /robot_pose topic. ros2 bag record -o ros2bag_qos_as_published /robot_pose let it run for 5 seconds and then kill it, in web shell (3). you should have a new file created: ros2bag_qos_as_published now lets play the ros2 bag. but before that kill the qos_pose_publisher node in web shell (2) by pressing ctrl+c . in the same web shell (2), run the following command: ros2 bag play ros2bag_qos_as_published now lets examine the qos of the /robot_pose topic (now being published to from the ros2 bag), in web shell (3): ros2 topic info /robot_pose --verbose you should see something like we saw before: qos profile: reliability: reliable durability: volatile lifespan: 9223372036854775807 nanoseconds deadline: 9223372036854775807 nanoseconds liveliness: automatic liveliness lease duration: 9223372036854775807 nanoseconds step 4: change the quality of service profile for ros2 bag playback create a profile file for ros2 bag playback. in web shell (3): touch override.yaml open override.yaml in the code editor and paste in the following content: /robot_pose: history: keep_last depth: 10 reliability: best_effort durability: volatile deadline: # unspecified/infinity sec: 0 nsec: 0 lifespan: # unspecified/infinity sec: 0 nsec: 0 liveliness: system_default liveliness_lease_duration: # unspecified/infinity sec: 0 nsec: 0 avoid_ros_namespace_conventions: false now go to web shell (2), stop the ros2 bag playback (if its still running), and run the following command instead: ros2 bag play --qos-profile-overrides-path override.yaml ros2bag_qos_as_published now, lets see the quality of service of the /robot_pose topic. in web shell (3): ros2 topic info /robot_pose --verbose you should now see something similar to the following in the output: qos profile: reliability: best_effort durability: volatile lifespan: 9223372036854775807 nanoseconds deadline: 9223372036854775807 nanoseconds liveliness: automatic liveliness lease duration: 9223372036854775807 nanoseconds and thats it! thats how to replay ros2 bags with changed quality of service setting. step 5: check your learning do you understand how to set the qos for the topic before recording a bag? do you understand how to replay ros2 bags with changed quality of service setting? if you didnt get any of the points above, please go over the post again, more carefully this time. (extra) step 6: watch the video to understand how to create ros2 xml launch files here you go: feedback did you like this post? do you have any questions  how to read and write parameters in ros1 and ros2? whatever the case, please leave a comment on the comments section below, so we can interact and learn from each other. if you want to learn  other ros topics, please let us know in the comments area and we will do a video or post  it. topics: best effort | qos | quality of service | reliability | ros2 | ros2 bag check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail