open in app sign up sign in write sign up sign in a beginners guide to ros2 skg labs  follow 3 min read  jul 28, 2023 -- listen share ros 2 is a distributed and modular framework for developing robot software. it provides tools, libraries, and conventions for building complex robotic systems. ros 2 supports multiple programming languages, making it accessible to a wide range of developers. key concepts: before we start coding, lets cover some key concepts in ros 2: nodes: nodes are individual units of computation in ros 2. they communicate with each other using topics or services. topics: topics are channels through which nodes exchange messages. nodes can publish messages to a topic or subscribe to receive messages from a topic. messages: messages are data structures used to exchange information on topics. they are defined in ros 2 interfaces (.msg files). services: services are another way nodes communicate. a node can request a service, and another node provides the service by responding with data. parameters: parameters are used to store and share configuration data between nodes. actions: actions allow long-running, asynchronous behaviors. they are used when a request needs to be tracked until it is completed. setting up a ros 2 workspace: create a new directory for your ros 2 project (e.g., ros2_tutorial_ws ). inside the workspace directory, create a src folder to store your ros 2 packages. creating a ros 2 package: open a terminal and navigate to the src directory of your ros 2 workspace. run the following command to create a new package named my_first_package : ros2 pkg create --build-type ament_cmake my_first_package writing a simple publisher node: inside the my_first_package directory, navigate to the src folder. create a new file called my_publisher.cpp #include <rclcpp/rclcpp.hpp> #include <std_msgs/msg/string.hpp> int main(int argc, char** argv) { rclcpp::init(argc, argv); auto node = rclcpp::node::make_shared("my_publisher"); auto publisher = node->create_publisher<std_msgs::msg::string>("my_topic", 10); rclcpp::rate loop_rate(1); // publish at 1 hz while (rclcpp::ok()) { auto msg = std::make_shared<std_msgs::msg::string>(); msg->data = "hello, ros 2!"; publisher->publish(msg); rclcpp::spin_some(node); loop_rate.sleep(); } rclcpp::shutdown(); return 0; } writing a simple subscriber node: inside the my_first_package directory, navigate to the src folder. create a new file called my_subscriber.cpp . #include <rclcpp/rclcpp.hpp> #include <std_msgs/msg/string.hpp> void callback(const std_msgs::msg::string::sharedptr msg) { rclcpp_info(rclcpp::get_logger("my_subscriber"), "received: %s", msg->data.c_str()); } int main(int argc, char** argv) { rclcpp::init(argc, argv); auto node = rclcpp::node::make_shared("my_subscriber"); auto subscriber = node->create_subscription<std_msgs::msg::string>( "my_topic", 10, callback); rclcpp::spin(node); rclcpp::shutdown(); return 0; } building and running the nodes: go back to the root of your ros 2 workspace. build the ros 2 packages using colcon : colcon build open two new terminals to run the publisher and subscriber nodes. terminal 1 (run publisher):bashcopy cod source install/setup.bash ros2 run my_first_package my_publisher terminal 2 (run subscriber): source install/setup.bash ros2 run my_first_package my_subscriber you should see the subscriber receiving messages from the publisher and displaying them in the terminal. summary and further resources: congratulations! youve created a simple ros 2 project with a publisher and subscriber nodes. this tutorial provides a basic understanding of ros 2 concepts and how to create simple nodes for communication. to learn more  ros 2, you can explore the official ros 2 documentation, tutorials, and community resources available on the ros 2 website. remember that ros 2 is a powerful framework, and there are many more features to discover and explore as you advance in your robotics development journey! ros2 robotics robotics operating system follow written by skg labs 11 followers we develop all things robotics, based in sf bay area. follow help status  careers press    text to speech teams