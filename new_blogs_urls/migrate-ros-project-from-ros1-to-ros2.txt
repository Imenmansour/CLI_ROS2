skip to content in this quick guide ill give you some tips on how you can migrate a current ros1 project into a ros2 project. so, you are currently using + maintaining (+ developing) your ros1 code base. how can you make a transition to ros2 without breaking everything for your users, and while being able to continue adding new functionalities? thats what ill focus on in this post. note that the solution i propose is only one solution and this post is not an exhaustive list of all available options. ill give you an overall overview of what you need to do, without going into technical details. here is a shorter video version of this guide: after watching the video, subscribe to the robotics back-end youtube channel so you dont miss the next tutorials! you want to learn ros2 efficiently? check out ros2 for beginners and learn ros2 step by step, in 1 week. table of contents toggle challenge to migrate a code base from ros1 to ros2 which versions to use? the minimum ros2 distribution you should choose now is ros2 foxy. and you can run ros2 foxy on windows 10, macos, or ubuntu. if you choose ubuntu youll use version 20.04. and the only python version you can use is python3+. then, with which ros1 distribution your app is currently written? if youre using ros kinetic (ubuntu 16.04) or ros melodic (ubuntu 18.04), then youre using python2 because python3 was not (completely) supported for those distributions. so, as you can see, you have multiple challenges, since for the transition, youll probably have to switch the os version, as well as the python version. switch to ros noetic first? (optional) the latest (and last) ros1 distribution is ros noetic, targeting ubuntu 20.04 and python3. this may be a good (optional) first step if you want to make the transition to ros2 foxy from ros1 kinetic or ros1 melodic. you can first port your ros1 code to ros1 noetic and make sure everything works with python3. then, you can switch to ros2. so, for example: ros1 melodic + ubuntu 18.04 + python2 ros1 noetic + ubuntu 20.04 + python3 ros2 foxy + ubuntu 20.04 + python3 this will take more time, but it also allows you to be able to run your ros1 app until 2025, instead of 2023 for melodic and 2021 (!) for kinetic. but, doing this is completely optional. instead, from any ros1 distribution you use, you can directly switch to ros2 thanks to a useful package named ros1_bridge. ros1_bridge: the tool youll use to migrate from ros1 to ros2 the ros1_bridge package allows you to communicate between ros1 and ros2. in this quick guide i wont technically explain how to use ros1_bridge, ill just give you a global overview of the steps youll need to take. ros1_bridge will receive messages/services you send from your ros1/ros2 nodes, and de-serialize/re-serialize them so they can be delivered to both ros1 and ros2 nodes in the network. so, what does it mean? you can start a ros1 publisher on one side, get the messages from a ros2 subscriber on the other side (and vice versa). you can send a request from a ros1 client to a ros2 service server (and vice versa). great, so it means that you wont be stuck: you will be able to develop your ros1 and ros2 applications independently, while making them communicate between each other. so, you can: have a smooth transition for the users of your application. continue to release new features while you make the transition. the autoware foundation is currently using a similar method to make autoware switch from ros1 to ros2. they have talked  it on roscon . the video is a good complement to this written guide. so, now, what are the steps youll take to migrate? migrate your code base from ros1 to ros2 step by step with ros1_bridge step 0: learn ros2 this might sound obvious, but before you make the transition, its better to understand what is ros2, how to write programs in ros2, what are the differences, new features, etc. and since you can still rely on ros1 for a while + have a smooth transition later on (with ros1_bridge), dont rush too quickly on migrating right now! you dont want to write crappy or non scalable code for your whole new ros2 application. check out: how to learn ros2. what are the differences between ros1 and ros2. you can also get this complete ros2 step-by-step course to get started quickly and on the right track (free for 14 days). and after youre confident with ros2, start the migration. step 1: enable ros2 communication with your ros1 code base here youll start with your ros1 code base. enable ros1_bridge so you can work with your ros1 app from a ros2 environment. no code written yet, just set up the binding so you can subscribe/publish/call services/etc from the ros2 side. at this point: nothing changes for your ros1 users. ros2 users can start using your app and integrate it with their own ros2 code. step 2  n: migrate nodes/packages one by one this is where youll re-write your ros1 functionalities into ros2 functionalities. lets say you have a camera package containing a driver node and image processing node. you can: rewrite the driver node in ros2. once its working, use this ros2 driver instead of the ros1 one. thanks to the ros1_bridge, the new ros2 driver will be able to communicate with the ros1 image processing node, and all other ros1 nodes in the app. rewrite the image processing node in ros2. use this new ros2 node instead of the ros1 version. you can now remove (or deprecate first) the camera package from your ros1 app. all new additions will be made to the ros2 camera package. and the camera will still be able to communicate with all the other ros1 functionalities of your application. repeat those steps for every other package you have in your ros1 app. rewriting your packages is also a good opportunity to check how you can improve your existing code. in most cases, ros must be used as a wrapper around your libraries and functionalities. if you did it well in ros1 it will be much easier to move the code to ros2. if you didnt, well now is a good time to start again on the right foot. step 2  n (bonus): develop new functionalities while migrating you may want to continue developing new functionalities for your robot/application. doing the ros1  ros2 transition does not mean that you have to put everything on pause. so, lets say you are developing a new laser scan package, directly in ros2. you add your package to your ros2 stack, so your ros2 users can directly start to use it. when releasing your package here, you might choose to: make it available from the ros1 side: this might represent some extra work especially if you need to modify other packages interfaces to communicate with this new package. make it available only for ros2 users. it doesnt break anything for your ros1 users, they just wont get access to this new feature  and this may incentive them to start using your app with ros2. this option is probably the best one in most cases. last step: remove the ros1 binding now, all your ros1 packages are ported to ros2. your ros2 app can be launched completely and independently from ros1. congrats! at this point, you may still keep the ros1 <-> ros2 binding until ros1 end of life, so that your ros1 users still have time to use your app with ros1, and switch to ros2. of course, they may not have access to new functionalities. you can also directly cut the bridge so that from now on, your app will only be supported with ros2. and you can start making breaking changes without having to also maintain the compatibility with ros1. conclusion on migrating a project from ros1 to ros2 migrating a code base is never an easy task. but, anyway, with ros1 and ros2 youll have to do it, so its not like you have the choice here. its not a bad thing though: the time you spend migrating will mostly be gained back because ros2 will bring you much more functionalities in the future. rewriting your code is also a good opportunity to improve its foundation, something that you probably wouldnt have done without having to migrate. by using the proposed solution with ros1_bridge, you can have a less stressful and more smooth transition, both for you and for the users of your applications. using this technique means that: your users who want to continue using your app with ros1 can do that until you stop supporting ros1 (or until 2025 with ros noetic end of life). of course they will also need to switch to the ros2 version, but you give them more time to update, you dont just ask them to switch overnight. your (new) users who directly want to use ros2 from the start can also do that. they will get access to your existing ros1 app through ros2 communication features, and they will also get access to any new feature you release. want to learn how to program with ros2? don't miss this opportunity: [new] ros 2 book or, learn with a video course want to learn ros2? [new] ros 2 book or, learn with a video course we use s on our website to give you the most relevant experience by remembering your preferences and repeat visits. by clicking accept all, you consent to the use of all the s. however, you may visit " settings" to provide a controlled consent.  settings accept all manage consent close  overview this website uses s to improve your experience while you navigate through the website. out of these, the s that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the ... necessary necessary always enabled necessary s are absolutely essential for the website to function properly. these s ensure basic functionalities and security features of the website, anonymously.  duration description lawinfo-checkbox-analytics 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "analytics". lawinfo-checkbox-functional 11 months the  is set by gdpr  consent to record the user consent for the s in the category "functional". lawinfo-checkbox-necessary 11 months this  is set by gdpr  consent plugin. the s is used to store the user consent for the s in the category "necessary". lawinfo-checkbox-others 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "other. lawinfo-checkbox-performance 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "performance". viewed__policy 11 months the  is set by the gdpr  consent plugin and is used to store whether or not user has consented to the use of s. it does not store any personal data. functional functional functional s help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features. performance performance performance s are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors. analytics analytics analytical s are used to understand how visitors interact with the website. these s help provide information on metrics the number of visitors, bounce rate, traffic source, etc.    s are used to provide visitors with relevant ads and  campaigns. these s track visitors across websites and collect information to provide customized ads. others others other uncategorized s are those that are being analyzed and have not been classified into a category as yet. save & accept learn ros2 in a week check out the course here