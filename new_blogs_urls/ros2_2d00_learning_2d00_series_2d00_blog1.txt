element14 community search register log in site search log in register technologies more robotics  ros2 learning series -  1 - introduction  forum documents quiz events polls members mentions sub-groups tags more cancel new robotics requires membership for participation - click to join share more cancel group actions group rss more cancel engagement author author: crisdeodates date created: 29 mar 2024 11:09 am date created views 582 views likes 6 likes comments 5 comments robot operating system robotics ros2 ros related recommended ros2 learning series -  1 - introduction crisdeodates 29 mar 2024 this is a short guide to introduce you to the world of ros2 programming for robotics applications. this is the part of the ros2 learning series that will focus on learning general ros2 concepts and developing ros2 programs. what is ros? ros stands for robot operating system. well, is it an operating system like ubuntu? no. it is an open-source framework or ecosystem or a software development kit that has a set of software libraries and tools to help build scalable robot software and applications. this vast array of software libraries includes interface drivers, algorithms, user interfaces, and many tools to build your robot projects. it simplifies the development process by providing a unified interface for communication between different processes or nodes. ros development is led by open robotics, and it is supported by a huge open-source community, including engineers, developers and hobbyists. it supports all common programming languages such as python and c++. ros is based on a publish-subscribe communication model, where nodes (executables or processes that perform computation) exchange messages (data structures) through topics (data channels). ros also offers services (request-response interactions), actions (long-running tasks with feedback), and parameters (shared configuration values). robot operating system ros1 ros (now commonly called ros1) was the first version of robot operating system created in 2007 by willow garage. ros1 uses the ros master-slave architecture (publish - subscribe model) where the master manages all the nodes. a node can be considered as an executable. the nodes must  the master to communicate with other nodes in the system, making it a central architecture. thus, the master is a single point of failure in ros1. the ros1 version is more widely used today due to its stability and the availability of a wide range of supported packages and plugins. however, the robotics industry has started witnessing huge migrations to ros2. ros2 ros2 is a complete re-design of the framework, mostly developed from scratch. it is developed to tackle the shortcomings of ros1, also incorporating the industry needs and standards. ros2 uses data distribution service (dds). it provides higher efficiency and reliability, low latency, and scalability, as well as configurable quality of service (qos) parameters. unlike the central nature of ros1, ros2 relies on a distributed architecture, essentially providing robustness and immunity to single point failures. ros1 and ros2 are not fully compatible with each other. even though ros2 is a new architecture, it provides a bridge package that can be installed alongside ros1 to ease porting and migration to ros2. ros1 and ros2 versions are generally known as distributions (like ubuntu distributions) and are released periodically with lts versions being the longest supported versions. the last ros1 distribution is called noetic ninjemys which has an end of life on may 2025. the latest ros2 distribution is iron irwini with an end of life on november 2024 and the latest lts version of ros2 is humble hawksbill with an end of life on may 2027. why choose ros2 over ros1 ros2 which offers more flexibility, functionality, and robustness than ros2. if you are just starting your ros development, it is easier to start with ros2 as it will avoid the need of huge software changes later if you plan to migrate to the latest version. if you are already working with ros1, starting with ros2 will be easier as many concepts remain the same. if you already have a code base based in ros1, switching to ros2 may represent a lot of work and will be time consuming. the complexity increases with the amount of code base and the influence of ros on your project. however, the ros bridge package can provide some flexibility during the migration period. this essentials module will be focused on ros2. application areas industrial robotics systems automotive systems aerospace systems embedded systems biomedical systems computer vision academic research reference translate with x english arabic hebrew polish bulgarian hindi portuguese catalan hmong daw romanian chinese simplified hungarian russian chinese traditional indonesian slovak czech italian slovenian danish japanese spanish dutch klingon swedish english korean thai estonian latvian turkish finnish lithuanian ukrainian french malay urdu german maltese vietnamese greek norwegian welsh haitian creole persian translate with copy the url below back embed the snippet below in your site enable collaborative features and customize widget: bing webmaster portal back sign in to reply crisdeodates 5 months ago in reply to crisdeodates corrected cancel vote up 0 vote down sign in to reply more cancel crisdeodates 5 months ago in reply to dab thanks dab , i will be adding more s to the series as i work on it :) cancel vote up 0 vote down sign in to reply more cancel crisdeodates 5 months ago in reply to jan cumps hi jan cumps , thank you for noticing. i am having error while editing the . i have raised a ticket in the e14 feedback. i will fix it as soon as the ticket is resolved :) cancel vote up 0 vote down sign in to reply more cancel dab 5 months ago interesting topic, i look forward to reading the series. cancel vote up 0 vote down sign in to reply more cancel jan cumps 5 months ago something is wrong with the image at the top of this post, crisdeodates cancel vote up 0 vote down sign in to reply more cancel