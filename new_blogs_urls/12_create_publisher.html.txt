kevsrobots learning platform learn ros with me 65% percent complete overview introduction what is ros setting up the raspberry pi 4 environment raspberry pi setup installing updates setting docker for ros docker install get cubie-1 files clone docker images build the ros2 container build the ros2 container setting up vscode vscode setup first ros2 program first ros2 program talker ros2 program ros2 python packages create a ros2 python package create a ros2 python publisher create a ros2 python subscriber docker and x11 getting rviz2 and rqt to work in docker rviz2 rviz2 rviz2 displays transformations with tf2 laserscan data create a ros2 python publisher lets create a new python publisher program by kevin mcaleer, 3 minutes create a new python file called pub.py create a new python file - from the docker terminal type: touch my_py_pkg/pub.py chmod -r 777 my_py_pkg this will create the new empty file, and fix the permissions so we can write to it from vs code. edit pub.py cut and paste the following code into the new file: import rclpy from rclpy.node import node from std_msgs.msg import string class talker ( node ): def __init__ ( self ): super (). __init__ ( " node_test " ) self . counter_ = 0 # create_publisher needs 3 parameters: msg type, message, and buffer size self . publisher = self . create_publisher ( string , " hello " , 10 ) self . _timer = self . create_timer ( 0.5 , self . publish_hello ) self . get_logger (). info ( " publishing message " ) def publish_hello ( self ): msg = string () msg . data = " hello world " self . publisher . publish ( msg ) def main ( args = none ): rclpy . init ( args = args ) node = talker () rclpy . spin ( node ) rclpy . shutdown () if __name__ == " __main__ " : main () add the entry_point to setup.py we now need to update setup.py to include the entry_point for our code. an entry point is the name of the python scripts that are available to run from with the package, and are shown in the list when you type ros2 run my_py_pkg . update setup.py - from the vs code open setup.py from with my_py_pkg folder add the entry points - add the following lines to the entry point list: entry_points = { ' console_scripts ' : [ " pub = my_py_pkg.pub:main " , " talker = my_py_pkg.talker:main " ], }, build the package we can now build out package using colcon build . do this from the root of the workspace (in this case /ros2/my_py_pkg ): change to the root of the workspace - from the docker terminal type: cd /ros2/my_py_pkg build with colcon - from the docker terminal type: colcon build testing the publisher works lets test out our code so far√¢ source install/setup.bash - from the docker terminal type: source install /setup.bash run the package - from the docker terminal type: ros2 run my_py_pkg pub the package should now run and you iwll see the logger message [info] [1673801367.468008815] [node_test]: publishing message . you can also see the messages themselves by querying the ros2 topic, via the commandline: echo the topic - from the docker terminal type: ros2 topic echo hello this will show the output from the ros2 topic hello , which is the topic we are publishing too. < previous next >
