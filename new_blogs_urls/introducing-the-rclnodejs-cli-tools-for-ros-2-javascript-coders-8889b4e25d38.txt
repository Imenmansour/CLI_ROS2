open in app sign up sign in write sign up sign in introducing the rclnodejs-cli tools for ros 2 javascript coders ros2jsguy  follow 5 min read  feb 11, 2022 -- listen share for developers interested in implementing ros 2 solutions using javascript or typescript, the rclnodejs package ( r os c lient l ibrary nodejs ) provides a complete nodejs javascript binding and typescript declarations to the ros 2 api. a companion nodejs package rclnodejs-cli , was released last year to provide commandline tools to help when using rclnodejs. lets take a look at the rclnodejs-cli tools. prerequisites before we begin youll need to following software installed to run the rclnodejs-cli tools: nodejs version between 10.2217 ros 2 galactic or foxy (lts) releases optional: ros 2 colcon build tool required for the create-package tool if you lack a ros 2 installation know that it is pretty simple to setup in a linux environment. a few months ago i setup linux ubuntu 20.04 and ros 2 galactic distros in wsl2 on my windows 11 machine for a really convenient development environment. see this youtube demo to see the ros tools running in wsl. lastly the screenshots in this article are from this environment using the new windows terminal. running rclnodejs-cli to see tools available from rclnodejs-cli run the following command from a terminal using npx . alternatively you can install rclnodejs-cli as a global package and run it directly without using npx. npx rclnodejs-cli -h generate-ros-messages tool the first tool we will look at is the generate-ros-messages tool. use this tool when you add new interface packages to your ros environment for which your nodejs project uses. this tool searches your ros 2 environment for interface definitions files, e.g., *.msg and *.srv. for each interface file the tool generates a similarly named javascript file that rclnodejs uses to serialize and deserialize ros 2 messages it sends and receives in a ros graph. you can find all of the generated serialization files in your nodejs projects node_modules/rclnodejs/generated folder. usage run the generate-ros-messages command in the root directory of your nodejs package, i.e., the directory containing the package.json file. the nodejs package must have rclnodejs already installed as a dependent package. cd <your-nodejs-package> npx rclnodejs-cli generate-ros-messages create-package tool the create-package tool creates hybrid ros2-nodejs packages that can coexist and participate with other ros2 packages in a ros2 workspace. additionally these packages can be run and orchestrated using the ros2 launch facility. a ros2-nodejs package consist of a traditional ros2 package, specifically an ament-cmake ros2 package, overlaid with a nodejs package. key features creates a ros2 ament_cmake package and overlays it with a custom nodejs package. --typescript commandline option to configure the package for use with typescript. installs the ros2 javascript client library, rclnodejs as a runtime dependency. creates an example javascript/typescript ros2 publisher node and ros2 launch-description. customized cmakelist.txt install() rules to install key runtime files to the package share/ folder usage to view the create-package tool arguments and options enter the following command from a terminal: npx rclnodejs-cli create-package -h now lets create a simple ros2-nodejs package configured to support typescript coding. if you do would rather use javascript omit the --typescript flag. npx rclnodejs-cli create-package mypkg --typescript note: package names should conform to the ros2 patterns and conventions , e.g., use _ underscores as separators in a package name instead of '-' dashes. the new package directory content should be similar to this listing: mypkg/ cmakelists.txt __init__.py launch/ mypkg.launch.py node_modules/ package.json package.xml src/ index.ts tsconfig.json compile the example typescript src/index.ts file, an example ros node that publishes a string message. npm run build 2. use the colcon build utility to install the key javascript resources into the ./install/share/ folder. colcon build your package folder will now include the standard ros2 package directories: build/ , install/ and log/ . the install/ directory includes configuration scripts and if you look deep into the install/mypkg/share/mypkg folder you will see the install() rules in the cmakelists.txt have installed the key javascript resources from the src/ and launch/ directories. tip  alway run the colcon build command when you are actively developing and using launch files from your project. this will ensure the launch includes your latest code. 3. add your new ros2-nodejs package to your ros environment. from your mypkg root folder run: linux source install/setup.bash windows install\setup.bat 4. verify that the ros2-nodejs package is part of your ros2 environment using the ros2 cli command. ros2 pkg list this command will output a long list of the packages in your ros2 environment. scroll through the list and verify it contains the mypkg package. 5. launch mypkg.launch.py we can now use the ros2 launch command to run the mypkg.launch.py launch-description. this launch file defines how to startup the example app in our ros2-nodejs package. the example app creates a ros2 node and publisher that sends a std_msgs/msg/string message every second to the topic named foo . see src/index.ts for the typescript implementation details. launch example.launch.py as shown below: ros2 launch mypkg example.launch.py to view the messages being published to the foo topic, open a separate shell configured with your ros2 environment and enter: ros2 topic echo foo a message should appear every second. conclusion i hope this introduction to rclnodejs-cli is helpful and saves you time and hassle with your ros 2 development. rclnodejs-cli is an open-source project and can be found here in github. please consider liking this tutorial and following me here and on twitter @ros2jsguy follow written by ros2jsguy 36 followers ros 2 for javascript & typescript developers tutorials from a guy named wayne follow help status  careers press    text to speech teams