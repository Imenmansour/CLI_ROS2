how to export a 3d robot model to ros2 | onshape cad to urdf written by ruben alves  ros2 q&a | ros2 tutorials  26/01/2024 what we are going to learn learn how to export a robot model from onshape to urdf so that we can integrate it with ros2 list of resources used in this post use this rosject: https://app.theconstructsim.com/l/5ee7cc96/ the construct: https://app.theconstructsim.com/ ros2 courses  urdf for robot modeling in ros2: https://app.theconstructsim.com/courses/83/ ros2 basics in 5 days (python): https://app.theconstructsim.com/course/132 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/course/133 onshape: https://www.onshape.com/en/ do you want to master robotics? robotics developer master class : https://www.theconstruct.ai/robotics-developer/ overview ros2 (robot operating system version 2) is widely used in robotics, and it uses robot models in a format called urdf (unified robotics description format). onshape is a 3d cad (3-dimensional computer-aided design) tool that allows anyone to easily create 3d models using only a web browser. in this post, we are going to learn how to export models from onshape to urdf, so that the model can be used in ros2 programs. ros inside! ros inside before anything else, if you want to use the logo above on your own robot or computer, feel free to download it, print it, and attach it to your robot. it is really free. find it in the link below: ros inside logo creating an onshape account alright, since we are going to export a model from onshape, the first thing that you need is an onshape account. feel free to create an account at: https://www.onshape.com/en/ on onshape you can create your own design, or use any existing design already provided by onshape. opening the rosject in order to follow this tutorial, we need to have ros2 installed in our system, and ideally a ros2_ws (ros2 workspace). to make your life easier, we have already prepared a rosject for that: https://app.theconstructsim.com/l/5ee7cc96/ . just by copying the rosject (clicking the link above), you will have a setup already prepared for you. after the rosject has been successfully copied to your own area, you should see a run button. just click that button to launch the rosject (below you have a rosject example). how to export a 3d robot model to ros2 | onshape cad to urdf  run rosject (example of the run button) after pressing the run button, you should have the rosject loaded. now, lets head to the next section to get some real practice. installing the onshape-to-robot package in order to install a package (and interact with ros2), we need a terminal. lets open a terminal by clicking the open a new terminal button. open a new terminal in order to install onshape-to-robot , please run the following command in the terminal: sudo pip install onshape-to-robot we installed it at the system level. if you want, you can also install it in a python virtual environment. if you want to install it in a virtual environment if for any reason you are using a computer that you dont have root access, you can create a virtual environment and install onshape-to-robot there. the virtual env can be created with the following command: source onshape_venv/bin/activate you should see now in your linux promt the (onshape_venv) pip install onshape-to-robot the following output should be produced: cd python -m venv onshape_venv then, enable the virtual env: source onshape_venv/bin/activate now you can install onshape-to-robot in this virtual environment: pip install onshape-to-robot install dependencies to make the export from onshape to urdf work, we also need to add openscad and meshlab . we can instal theml with the following commands: sudo add-apt-repository ppa:openscad/releases sudo apt-get update sudo apt-get install openscad -y sudo apt-get install meshlab -y add the onshapekeys to the `keys. sh` file after installing the dependencies, the next step is to get the api keys from onshape. the reason why we need this is because the onshape-to-robot needs to authenticate to onshape to have access to the model that we are going to export. in order to get those keys, you have to go to https://dev-portal.onshape.com/keys and click on the create new api key button. after clicking that button, for the purpose of this video, you can just select all the permissions, and then click create api key . then you will be presented with the keys, something similar to what we have below: how to export a 3d robot model to ros2  onshape cad to urdf make sure you copy that information in a safe place because the secret key wont be shown again once you click the close button. now, lets create a keys.sh file with these secrets: mkdir -pv ~/ros2_ws cd ~/ros2_ws touch keys.sh then you can open that file and paste the following content to it (these are the keys that we just created): export onshape_api=https://cad.onshape.com export onshape_access_key=5d7ta69e4civc82softxjrwm export onshape_secret_key=2ua7a5dhwnfrshaa9iliziiwd2wxud0lhxoms55kliqheyl5 you could have created that file also using the code editor. it is worth mentioning that if you want to use the code editor, also known as ide (integrated development environment), you just have to open it as indicated in the image below: open the ide  code editor now, lets source that file so that the onshape variables are available in our terminal: cd ~/ros2_ws source keys.sh now we should be able to see those environment variables: echo onshape_api echo onshape_access_key echo onshape_secret_key creating a ros2 package where our urdf will be exported to if you are using the rosject that we shared at the beginning of this post, the ros2 package is already created. we are going to write here the steps for creating the package, just in case you want to do the project from scratch yourself. this is how the package was created. we first enter the src folder of the ros2_ws (ros2 workspace):. cd ~/ros2_ws/src then we created a packaged named quadruped_description that depends on urdf and xacro packages: ros2 pkg create --build-type ament_cmake quadruped_description --dependencies urdf xacro then we entered into the quadruped_description folder, and created some other useful folders there. the folders we are going to create are quadruped , rviz and launch : cd quadruped_description lets first create the quadruped folder: mkdir quadruped now lets create a config.json file inside that folder. that file will be used by the onshape-to-robot tool: touch quadruped/config.json and create the launch and rviz folders: mkdir launch rviz now lets open that quadruped/config.json file using the code editor and paste the following content to it: { "documentid": "33b91de06ddc91b068fcf725", "outputformat": "urdf", "packagename": "quadruped_description/quadruped", "robotname": "quadruped_robot", "assemblyname": "quadruped_v1" } this is the minimal information we need to make this export work. the first field, documentid is the id of the file that you have created. this is the id that was used when creating this video. for your own projects, you are going to have a different id. this id appears in the url of your project, as we can see below: onshape document id  ros2 alright, let me put here again the content of the config.json file to be better fo understand it: { "documentid": "33b91de06ddc91b068fcf725", "outputformat": "urdf", "packagename": "quadruped_description/quadruped", "robotname": "quadruped_robot", "assemblyname": "quadruped_v1" } the packagename points to the folder that we created, where the config.json file is located, and it is the place where our files will be exported. the robotname defines the name of the robot that will be exported. the assemblyname is the name of our model on onshape. in the previous image, in the bottom part of the image you can see on the 6th tab our model name: quadruped_v1 prepare our cmakelists.txt to export the folders we just created the next thing we need is to modify our ~/ros2_ws/src/quadruped_description / cmakelists.txt file so that the folders that we just created can be installed when we build our package. the final content of that quadruped_description / cmakelists.txt file is: cmake_minimum_required(version 3.8) project(quadruped_description) if(cmake_compiler_is_gnucxx or cmake_cxx_compiler_id matches "clang") add_compile_options(-wall -wextra -wpedantic) endif() # find dependencies find_package(ament_cmake required) find_package(urdf required) find_package(xacro required) if(build_testing) find_package(ament_lint_auto required) ament_lint_auto_find_test_dependencies() endif() install( directory rviz launch quadruped destination share/{project_name}/ ) ament_package() finally, run onshape-to-robot command ok, now the time has come to finally run the command that converts our model from onshape to urdf. for that, lets first enter to the right folder: cd ~/ros2_ws/src/quadruped_description then, lets run the following command ( bear in mind that in this rosject we already ran that command. we are putting the commands here basically for documentation reasons ): onshape-to-robot quadruped in the command above, we are essentially running onshare-to-command and telling it to go to the quadruped folder and read the config.json file there. if everything goes well, now, instead of only the config.json file, we should have many files in that quadruped folder. in that quadruped folder you should also find a robot.urdf file. the only modification that you need to do on that file is to add the following content in the first line, so that the code editor can properly highlight the syntax: <?xml version="1.0"?> creating .launch and .rviz files to be able to see our model in rviz. again, these commands were already executed when we first created the rosject that we shared with you at the beginning of this post. these are the commands we used to create the launch files: cd ~/ros2_ws/src/quadruped_description touch launch/quadruped.launch.py touch launch/start_rviz.launch.py touch rviz/quadruped.rviz to see the content of those files, just open them using the code editor. seeing our robot with ros2 to see our robot model in ros2, we first need to build our workspace: cd ~/ros2_ws/ source install/setup.bash build the workspace: colcon build --packages-select quadruped_description source setup.bash so that ros2 knows how to find our package: source install/setup.bash now, lets launch quadruped.launch.py : cd ~/ros2_ws/ source install/setup.bash ros2 launch quadruped_description quadruped.launch.py now in a second terminal, lets run rviz: cd ~/ros2_ws/ source install/setup.bash ros2 launch quadruped_description start_rviz.launch.py after launching rviz, after waiting for a few seconds for rviz to show, you will see that the model is not well presented. we cant see the joints properly. lets publish fake joint states to see the model properly. for that, lets run the following commands in a third terminal : cd ~/ros2_ws/ source install/setup.bash ros2 run joint_state_publisher_gui joint_state_publisher_gui if you go to the graphical tools again and click joint state publisher, you should be able to see the robot model properly: joint state publisher  export a 3d robot model to ros2  onshape cad to urdf congratulations. you have now learned how to export a 3d model from onshape to urdf. if you want to learn more  urdf, have a look at the course below: urdf for robot modeling in ros2: https://app.theconstructsim.com/courses/83/ we hope this post was really helpful to you. if you want a live version of this post with more details , please check the video in the next section. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. related courses & training if you want to learn more  ros and ros2, we recommend the following courses: ros2 basics in 5 days humble (python): https://app.theconstructsim.com/course/132 ros2 basics in 5 days humble (c++) : https://app.theconstructsim.com/course/133 open-rmf / fleet management training : https://www.theconstruct.ai/robot-fleet-management-ros2-open-rmf-training/ get ros2 industrial ready- hands-on training by the construct cover.png topics: check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments pin it on pinterest share this twitter linkedin reddit facebook gmail