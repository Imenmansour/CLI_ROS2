ros2 tutorials #4: how to create a ros2 package for c++ [new] written by alberto ezquerro  ros2 tutorials  19/07/2019  in this post, you will learn how to create a simple ros2 package for c++. you dont need a ros2 installation for this, as we will use the ros development studio (rosds) , an online platform that provides access to ros (1 or 2) computers and other powerful ros tools within a browser! ps: if you have ros2 installed locally on your machine, you can skip step 1. step 1: create a project (rosject) on rosds head to http://rosds.online and create a project with a similar configuration as the one shown below. you can change the details as you like, but please ensure you select ubuntu 18.04 + ros2 crystal under configuration. once done with that, open your rosject. this might take a few moments, please be patient. step 2: source the ros2 workspace once the rosject is open, head to the tools menu and pick the shell tool (if on your local pc just fire up a terminal) and run the following command to source the workspace: user:~ source /opt/ros/crystal/setup.bash ros_distro was set to 'melodic' before. please make sure that the environment does not mix paths from different distributions. user:~ if you get that ros_distro warning, just ignore it. step 3: create a ros2 package in your ros2 workspace the syntax for creating a ros2 package is ros2 pkg create <package_name> --build-type <build_type> --dependencies <dependencies_separated_by_single_space> . in the same terminal as in step 2, change to your ros2 workspace src directory and create a package there: user:~ cd ros2_ws/src user:~/ros2_ws/src ros2 pkg create ros2_cpp_pkg --build-type ament_cmake --dependencies rclcpp going to create a new package package name: ros2_cpp_pkg destination directory: /home/user/ros2_ws/src package format: 2 version: 0.0.0 description: todo: package description maintainer: ['user <user@todo.todo>'] licenses: ['todo: license declaration'] build type: ament_cmake dependencies: ['rclcpp'] creating folder ./ros2_cpp_pkg creating ./ros2_cpp_pkg/package.xml creating source and include folder creating folder ./ros2_cpp_pkg/src creating folder ./ros2_cpp_pkg/include/ros2_cpp_pkg creating ./ros2_cpp_pkg/cmakelists.txt user:~/ros2_ws/src step 4: create c++ code inside the package create a file named ros2_cpp_code.cpp inside the new package: user:~/ros2_ws/src cd ros2_cpp_pkg/src user:~/ros2_ws/src/ros2_cpp_pkg/src touch ros2_cpp_code.cpp user:~/ros2_ws/src/ros2_cpp_pkg/src pick the ide from the tools menu, locate the c++ file and paste in the following code: #include "rclcpp/rclcpp.hpp" int main(int argc, char *argv[]) { rclcpp::init(argc, argv); auto node = rclcpp::node::make_shared("obiwan"); rclcpp_info(node->get_logger(), "help me obi-wan kenobi, you're my only hope"); rclcpp::shutdown(); return 0; } in the ide, open up the cmakelists.txt and paste the following line at the bottom of the file. we are doing this to ensure the c++ file will be properly detected and compiled. add_executable(cpp_code src/ros2_cpp_code.cpp) ament_target_dependencies(cpp_code rclcpp) install(targets cpp_code destination lib/{project_name} ) step 5: compile and test-run the package now your package is ready to compileso compile it and source the workspace ! user:~/ros2_ws/src/ros2_cpp_pkg/src cd /home/user/ros2_ws user:~/ros2_ws colcon build --symlink-install starting >>> ros2_cpp_pkg finished <<< ros2_cpp_pkg [21.9s] summary: 1 package finished [22.0s] user:~/ros2_ws source install/setup.bash # source the workspace ros_distro was set to 'crystal' before. please make sure that the environment does not mix paths from different distributions. ros_distro was set to 'melodic' before. please make sure that the environment does not mix paths from different distributions. user:~/ros2_ws great. now test-run it. you should have the string mentioned in the c++ code printed to the terminal output: user:~/ros2_ws ros2 run ros2_cpp_pkg cpp_code [info] [obiwan]: help me obi-wan kenobi, you're my only hope user:~/ros2_ws done! extra 1: rosject link get the rosject containing all code used in the post in the following link: http://www.rosject.io/l/bce4ffd/! extra 2: video prefer to watch a video demonstrating the steps above? we have one for you below! related resources ros2 full course for beginners ros development studio (rosds) robot ignite academy feedback did you like this post? do you have questions  what is explained? whatever the case, please leave a comment on the comments section below, so we can interact and learn from each other. if you want to learn  other ros topics, please let us know in the comments area and we will do a video or post  it  topics: ros q&a | ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 3 comments progressive c++ on 27/10/2019 at 11:54 pm amazing tutorial, thanks reply anonymous on 23/02/2020 at 5:21 am c++ code is invalid. main function need to return value reply anton on 23/02/2020 at 5:22 am c++ code `return ;` is invalid. main function need to return value, e.g. `return 0;` reply submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail