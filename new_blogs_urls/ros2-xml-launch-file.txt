skip to content in this tutorial i will show you how to write, install and run a ros2 xml launch file. whenever you start to have multiple nodes (with parameters, arguments, ) in your application, creating a launch file becomes an almost mandatory step to be able to scale and go beyond 2-3 nodes without creating a huge mess. and in ros2, you have the choice: you can create a launch file in python, xml, and even yaml. the default was first python , but xml is coming back strongly (xml was the default in ros1). ill compare xml and python for launch files quickly in this tutorial. >> watch this video as an additional resource to this article: after watching the video, subscribe to the robotics back-end youtube channel so you dont miss the next tutorials! you want to learn ros2 efficiently? check out ros2 for beginners and learn ros2 step by step, in 1 week. table of contents toggle setup  create a package for your launch files you could theoretically create a launch file in any package you want (ex: an existing c++ or python package), but thats not recommended. youd have nodes, param files, and launch files all in one place. and it will quickly become a mess, with unecessary dependencies between packages that are not related. so, what well do here is to create a package dedicated to launch files  and where you can also add some param/config files, but no nodes. lets create a package and an empty xml launch file. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter cd ~/ros2_ws/src ros2 pkg create my_robot_bringup cd my_robot_bringup/ rm -rf include/ rm -rf src/ mkdir launch touch launch/demo.launch.xml cd ~/ros2_ws/src ros2 pkg create my_robot_bringup cd my_robot_bringup/ rm -rf include/ rm -rf src/ mkdir launch touch launch/demo.launch.xml cd ~/ros2_ws/src ros2 pkg create my_robot_bringup cd my_robot_bringup/ rm -rf include/ rm -rf src/ mkdir launch touch launch/demo.launch.xml go to your ros2 workspace (in the src/ folder), and create a new package with no build type. to follow a quite common convention, well name the package my_robot_bringup. if your robot name is abc, then youll name the package abc_bringup. with no built type, the package will have the structure of a c++ package. well remove the include/ and src/ folder, and add a launch/ folder instead. finally, in the launch/ folder, we create a launch file. for xml, make sure to have the .launch.xml extension. write a minimal ros2 xml launch file the xml launch file for this example we will do a very simple application. we will just launch 2 nodes from the official demo packages. and as you will see, it will be super, super simple. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter < launch > < node pkg = "demo_nodes_cpp" exec = "talker" /> < node pkg = "demo_nodes_py" exec = "listener" /> </ launch > <launch> <node pkg="demo_nodes_cpp" exec="talker"/> <node pkg="demo_nodes_py" exec="listener"/> </launch> <launch> <node pkg="demo_nodes_cpp" exec="talker"/> <node pkg="demo_nodes_py" exec="listener"/> </launch> first, you need to create a launch tag in which youll write the entire launch instructions. then, to start a node, just add a node tag with at least 2 arguments: pkg: the package of the node you want to start. exec: the name of the executable that was created during compilation. and thats it! with just 4 lines of code and a very straightforward syntax you have a basic launch file. xml vs python launch files here is the same launch file written in python. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter from launch import launchdescription from launch_ros.actions import node def generate_launch_description () : ld = launchdescription () talker_node = node ( package= "demo_nodes_cpp" , executable= "talker" , ) listener_node = node ( package= "demo_nodes_py" , executable= "listener" ) ld. add_action ( talker_node ) ld. add_action ( listener_node ) return ld from launch import launchdescription from launch_ros.actions import node def generate_launch_description(): ld = launchdescription() talker_node = node( package="demo_nodes_cpp", executable="talker", ) listener_node = node( package="demo_nodes_py", executable="listener" ) ld.add_action(talker_node) ld.add_action(listener_node) return ld from launch import launchdescription from launch_ros.actions import node def generate_launch_description(): ld = launchdescription() talker_node = node( package="demo_nodes_cpp", executable="talker", ) listener_node = node( package="demo_nodes_py", executable="listener" ) ld.add_action(talker_node) ld.add_action(listener_node) return ld way more complex, for the exact same thing. and wait until you want to start multiple nodes with arguments, parameters, other launch files, etc. now, there are some cases when using python for launch files might be necessary, as xml launch files are a bit more limited  but from personal experience, 95% of the time youll be fine with xml. also, as a more personal opinion, i first thought that python launch files would be a great idea, as you could add some real programming logic into it. but then (theory vs practice), i realized that i didnt see any programming logic anywhere, and it was just another (more complex and difficult) way to write a description, which is basically why xml exists in the first place. i could go on and on with this, but 1. im not going to write a book, and 2. we are starting to get off topic. as you can see im heavily biased towards using xml for ros2 launch files, but feel free to use whatever you prefer! install the ros2 xml launch file add dependencies to other packages as we are launching some nodes from other packages  here demo_nodes_cpp and demo_nodes_py, we need to specify those dependencies in the package where we have our launch file. open the package.xml and add those 2 lines. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> < package format = "3" > < name > my_robot_bringup </ name > < version > 0.0.0 </ version > < description > todo: package description </ description > < maintainer email = "ed@todo.todo" > ed </ maintainer > < license > todo: license declaration </ license > < buildtool _depend > ament_cmake</buildtool_depend> < exec _depend > demo_nodes_cpp</exec_depend> < exec _depend > demo_nodes_py</exec_depend> < test _depend > ament_lint_auto</test_depend> < test _depend > ament_lint_common</test_depend> < export > < build _type > ament_cmake</build_type> </ export > </ package > <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format="3"> <name>my_robot_bringup</name> <version>0.0.0</version> <description>todo: package description</description> <maintainer email="ed@todo.todo">ed</maintainer> <license>todo: license declaration</license> <buildtool_depend>ament_cmake</buildtool_depend> <exec_depend>demo_nodes_cpp</exec_depend> <exec_depend>demo_nodes_py</exec_depend> <test_depend>ament_lint_auto</test_depend> <test_depend>ament_lint_common</test_depend> <export> <build_type>ament_cmake</build_type> </export> </package> <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format="3"> <name>my_robot_bringup</name> <version>0.0.0</version> <description>todo: package description</description> <maintainer email="ed@todo.todo">ed</maintainer> <license>todo: license declaration</license> <buildtool_depend>ament_cmake</buildtool_depend> <exec_depend>demo_nodes_cpp</exec_depend> <exec_depend>demo_nodes_py</exec_depend> <test_depend>ament_lint_auto</test_depend> <test_depend>ament_lint_common</test_depend> <export> <build_type>ament_cmake</build_type> </export> </package> then, for every new package that you use in a launch file, make sure to add a new line with exec_depend. installation instructions to tell colcon (the build tool for ros2) to install the launch files, we need to add a few lines in the cmakelists.txt file. here is the file (a bit cleaned up), with the extra lines to install the launch files correctly. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter cmake_minimum_required(version 3. 8 ) project(my_robot_bringup) if (cmake_compiler_is_gnucxx or cmake_cxx_compiler_id matches "clang" ) add_compile_options(-wall -wextra -wpedantic) endif() # find dependencies find_package(ament_cmake required) install(directory launch destination share/{project_name}/ ) ament_package() cmake_minimum_required(version 3.8) project(my_robot_bringup) if(cmake_compiler_is_gnucxx or cmake_cxx_compiler_id matches "clang") add_compile_options(-wall -wextra -wpedantic) endif() # find dependencies find_package(ament_cmake required) install(directory launch destination share/{project_name}/ ) ament_package() cmake_minimum_required(version 3.8) project(my_robot_bringup) if(cmake_compiler_is_gnucxx or cmake_cxx_compiler_id matches "clang") add_compile_options(-wall -wextra -wpedantic) endif() # find dependencies find_package(ament_cmake required) install(directory launch destination share/{project_name}/ ) ament_package() you just need to do this once, then no need to add anything for other launch files that you add in this package. build your ros2 xml launch file lets now build the package so that the launch files can be installed correctly. go into your ros2 workspace (not in the src/ folder!) and build with colcon. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ~/ros2_ws colcon build --packages-select my_robot_bringup starting >>> my_robot_bringup finished <<< my_robot_bringup [1.00s] summary: 1 package finished [1.26s] ~/ros2_ws colcon build --packages-select my_robot_bringup starting >>> my_robot_bringup finished <<< my_robot_bringup [1.00s] summary: 1 package finished [1.26s] ~/ros2_ws colcon build --packages-select my_robot_bringup starting >>> my_robot_bringup finished <<< my_robot_bringup [1.00s] summary: 1 package finished [1.26s] start the launch file now that the launch file is installed, lets launch it! first things first, make sure you have sourced your ros2 workspace, otherwise the ros2 launch ros2 launch command wont find the launch file. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter source ~/ros2_ws/install/setup.bash #just modify with the path to your actual workspace source ~/ros2_ws/install/setup.bash #just modify with the path to your actual workspace source ~/ros2_ws/install/setup.bash #just modify with the path to your actual workspace then lets start the launch file. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 launch my_robot_bringup demo.launch.xml [info] [launch]: all log files can be found below /home/ed/.ros/log/ 2023 - 05 - 04 - 13 - 22 - 52 - 227020 -ed-vm- 3935 [info] [launch]: default logging verbosity is set to info [info] [talker- 1 ]: process started with pid [ 3936 ] [info] [listener- 2 ]: process started with pid [ 3938 ] [talker- 1 ] [info] [1683199373. 896389433 ] [talker]: publishing: 'hello world: 1' [listener- 2 ] [info] [1683199373. 908972110 ] [listener]: i heard: [hello world: 1 ] ^c[warning] [launch]: user interrupted with ctrl-c (sigint)  ros2 launch my_robot_bringup demo.launch.xml [info] [launch]: all log files can be found below /home/ed/.ros/log/2023-05-04-13-22-52-227020-ed-vm-3935 [info] [launch]: default logging verbosity is set to info [info] [talker-1]: process started with pid [3936] [info] [listener-2]: process started with pid [3938] [talker-1] [info] [1683199373.896389433] [talker]: publishing: 'hello world: 1' [listener-2] [info] [1683199373.908972110] [listener]: i heard: [hello world: 1] ^c[warning] [launch]: user interrupted with ctrl-c (sigint)  ros2 launch my_robot_bringup demo.launch.xml [info] [launch]: all log files can be found below /home/ed/.ros/log/2023-05-04-13-22-52-227020-ed-vm-3935 [info] [launch]: default logging verbosity is set to info [info] [talker-1]: process started with pid [3936] [info] [listener-2]: process started with pid [3938] [talker-1] [info] [1683199373.896389433] [talker]: publishing: 'hello world: 1' [listener-2] [info] [1683199373.908972110] [listener]: i heard: [hello world: 1] ^c[warning] [launch]: user interrupted with ctrl-c (sigint) great, with just one command you have started 2 nodes! as you can see, each executable will be started as a process. you can see the pid for each process. also they will be given a name with a number, for example talker-1 and listener-2. note: the node name (!= executable name) is the one defined in the node itself, so here talker and listener. all the logs will be printed here, and if you want to stop everything thats been started with the launch file, you can press ctrl + c. customize your nodes in your ros2 xml launch file we have started 2 basic nodes, but what if you want to customize the nodes a bit? in this section you will see that its quite easy with an xml launch file. note: if you modify the launch file, make sure you then build again and source the environment before you start the launch file. node renaming if you want to rename a node, you can simply add a name argument in the node tag. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter < launch > < node pkg = "demo_nodes_cpp" exec = "talker" name = "my_talker" /> < node pkg = "demo_nodes_py" exec = "listener" name = "my_listener" /> </ launch > <launch> <node pkg="demo_nodes_cpp" exec="talker" name="my_talker"/> <node pkg="demo_nodes_py" exec="listener" name="my_listener"/> </launch> <launch> <node pkg="demo_nodes_cpp" exec="talker" name="my_talker"/> <node pkg="demo_nodes_py" exec="listener" name="my_listener"/> </launch> topic/service remapping to rename a topic or a service, you need to first open and close the node tag. in the tag, add a remap tag. then its super easy, you have to fill a from argument, which is the topic/service you want to remap, and a to argument, which is going to be the new name. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter < launch > < node pkg = "demo_nodes_cpp" exec = "talker" name = "my_talker" > < remap from = "/chatter" to = "/my_chatter" /> </ node > < node pkg = "demo_nodes_py" exec = "listener" name = "my_listener" > < remap from = "/chatter" to = "/my_chatter" /> </ node > </ launch > <launch> <node pkg="demo_nodes_cpp" exec="talker" name="my_talker"> <remap from="/chatter" to="/my_chatter" /> </node> <node pkg="demo_nodes_py" exec="listener" name="my_listener"> <remap from="/chatter" to="/my_chatter" /> </node> </launch> <launch> <node pkg="demo_nodes_cpp" exec="talker" name="my_talker"> <remap from="/chatter" to="/my_chatter" /> </node> <node pkg="demo_nodes_py" exec="listener" name="my_listener"> <remap from="/chatter" to="/my_chatter" /> </node> </launch> in this example, as i remapped the /chatter topic to /my_chatter, i made sure to remap the topic in both nodes, so they can still communicate between each other. parameters lets also see how to provide some parameters to a node through an xml launch file. as your nodes grow, youll want to make them more dynamic and thus, add some parameters. to set a parameters value from the launch file, simply add a param tag inside the node tag. then, youll have to provide the name of the param, and the value. the type will be automatically set at run time. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter < launch > < node pkg = "turtlesim" exec = "turtlesim_node" > < param name = "background_r" value = "200" /> < param name = "background_g" value = "200" /> < param name = "background_b" value = "200" /> </ node > </ launch > <launch> <node pkg="turtlesim" exec="turtlesim_node"> <param name="background_r" value="200" /> <param name="background_g" value="200" /> <param name="background_b" value="200" /> </node> </launch> <launch> <node pkg="turtlesim" exec="turtlesim_node"> <param name="background_r" value="200" /> <param name="background_g" value="200" /> <param name="background_b" value="200" /> </node> </launch> in this example ive used the turtlesim node from the turtlesim package. if you dont have the turtlesim package installed: sudo apt install ros- < distro > -turtlesim sudo apt install ros-<distro>-turtlesim . note: as we use yet a different package inside the launch file, youll have to add it to your package.xml: < exec _depend > turtlesim</exec_depend> <exec_depend>turtlesim</exec_depend> . conclusion launch files are a very important concept in ros2. they will allow you to make your application much more scalable. one thing to consider when creating a launch file is, which language to use (python, xml, yaml). as i already wrote previously, python is usually way more complicated and longer to write than xml. so, if it can be done with xml, i would choose xml any time. you could also consider yaml if you prefer this instead of xml. the complexity is the same, here its just a matter of preference. but one good news: you can include other launch files in your launch file, even if its not written in the same language! this way, you can use mainly xml (or yaml), and only use python if you really need to. then, in your xml launch file, you can include the python launch file. more resources: write a launch file with yaml (video) include a launch file in another launch file (video) want to learn how to program with ros2? don't miss this opportunity: [new] ros 2 book or, learn with a video course want to learn ros2? [new] ros 2 book or, learn with a video course we use s on our website to give you the most relevant experience by remembering your preferences and repeat visits. by clicking accept all, you consent to the use of all the s. however, you may visit " settings" to provide a controlled consent.  settings accept all manage consent close  overview this website uses s to improve your experience while you navigate through the website. out of these, the s that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the ... necessary necessary always enabled necessary s are absolutely essential for the website to function properly. these s ensure basic functionalities and security features of the website, anonymously.  duration description lawinfo-checkbox-analytics 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "analytics". lawinfo-checkbox-functional 11 months the  is set by gdpr  consent to record the user consent for the s in the category "functional". lawinfo-checkbox-necessary 11 months this  is set by gdpr  consent plugin. the s is used to store the user consent for the s in the category "necessary". lawinfo-checkbox-others 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "other. lawinfo-checkbox-performance 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "performance". viewed__policy 11 months the  is set by the gdpr  consent plugin and is used to store whether or not user has consented to the use of s. it does not store any personal data. functional functional functional s help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features. performance performance performance s are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors. analytics analytics analytical s are used to understand how visitors interact with the website. these s help provide information on metrics the number of visitors, bounce rate, traffic source, etc.    s are used to provide visitors with relevant ads and  campaigns. these s track visitors across websites and collect information to provide customized ads. others others other uncategorized s are those that are being analyzed and have not been classified into a category as yet. save & accept learn ros2 in a week check out the course here