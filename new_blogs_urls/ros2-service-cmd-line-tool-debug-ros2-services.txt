skip to content in this tutorial youll use the ros2 service ros2 service command line tool to debug the services that you start from within your nodes  or nodes that already exist in your graph. as a reminder, a service has 2 sides: the server (unique), and the client (multiple clients possible). with topics, you can use ros2 topic to debug publishers as well as subscribers. however, with services, youll be able to only debug service servers, and place yourself as a client. >> watch this video as an additional resource to this article: after watching the video, subscribe to the robotics back-end youtube channel so you dont miss the next tutorials! you want to learn ros2 efficiently? check out ros2 for beginners and learn ros2 step by step, in 1 week. table of contents toggle the node well use lets write a very simple node with a service server. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter #!/usr/bin/env python3 import rclpy from rclpy.node import node from example_interfaces.srv import setbool class activaterobotnode ( node ) : def __init__ ( self ) : super () . __init__ ( "activate_robot_server" ) self.activated_ = false self.service_ = self. create_service ( setbool, "activate_robot" , self.callback_activate_robot ) def callback_activate_robot ( self, request, response ) : self.activated_ = request.data response.success = true if self.activated_: response.message = "robot has been activated" else : response.message = "robot has been deactivated" return response def main ( args= none ) : rclpy. init ( args=args ) node = activaterobotnode () rclpy. spin ( node ) rclpy. shutdown () if __name__ == "__main__" : main () #!/usr/bin/env python3 import rclpy from rclpy.node import node from example_interfaces.srv import setbool class activaterobotnode(node): def __init__(self): super().__init__("activate_robot_server") self.activated_ = false self.service_ = self.create_service( setbool, "activate_robot", self.callback_activate_robot) def callback_activate_robot(self, request, response): self.activated_ = request.data response.success = true if self.activated_: response.message = "robot has been activated" else: response.message = "robot has been deactivated" return response def main(args=none): rclpy.init(args=args) node = activaterobotnode() rclpy.spin(node) rclpy.shutdown() if __name__ == "__main__": main() #!/usr/bin/env python3 import rclpy from rclpy.node import node from example_interfaces.srv import setbool class activaterobotnode(node): def __init__(self): super().__init__("activate_robot_server") self.activated_ = false self.service_ = self.create_service( setbool, "activate_robot", self.callback_activate_robot) def callback_activate_robot(self, request, response): self.activated_ = request.data response.success = true if self.activated_: response.message = "robot has been activated" else: response.message = "robot has been deactivated" return response def main(args=none): rclpy.init(args=args) node = activaterobotnode() rclpy.spin(node) rclpy.shutdown() if __name__ == "__main__": main() now, install and run this node: add a line to your setup.py in the console_scripts array (as this is a python node in a python package): "activate_robot_node = ros2_tutorials_py.activate_robot:main" "activate_robot_node = ros2_tutorials_py.activate_robot:main" . install the executable with colcon build colcon build , inside your ros2 workspace. source your ros2 workspace. start the node with ros2 run ros2_tutorials_py activate_robot_node ros2 run ros2_tutorials_py activate_robot_node . ros2 service list  find all the services available on your graph you can get all the services that are currently advertised in your ros2 graph/network. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 service list /activate_robot /activate_robot_server/describe_parameters /activate_robot_server/get_parameter_types /activate_robot_server/get_parameters /activate_robot_server/list_parameters /activate_robot_server/set_parameters /activate_robot_server/set_parameters_atomically  ros2 service list /activate_robot /activate_robot_server/describe_parameters /activate_robot_server/get_parameter_types /activate_robot_server/get_parameters /activate_robot_server/list_parameters /activate_robot_server/set_parameters /activate_robot_server/set_parameters_atomically  ros2 service list /activate_robot /activate_robot_server/describe_parameters /activate_robot_server/get_parameter_types /activate_robot_server/get_parameters /activate_robot_server/list_parameters /activate_robot_server/set_parameters /activate_robot_server/set_parameters_atomically here we find the name of the service we created: /activate_robot. and you can see 6 more services! those 6 services are automatically created for each node. they will allow you to manage (get/set) parameters which are specific to this node, here the activate_robot_server node. ros2 service type  see what you need to send/receive to use the service once you know the name of the service, youll also need to find what kind of data you have to send/receive to use the service. use ros2 service type ros2 service type to get that information. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 service type /activate_robot example_interfaces/srv/setbool  ros2 service type /activate_robot example_interfaces/srv/setbool  ros2 service type /activate_robot example_interfaces/srv/setbool and when you have the interface name, you can find the details with ros2 interface show ros2 interface show . plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 interface show example_interfaces/srv/setbool # this is an example of a service to set a boolean value. # this can be used for testing but a semantically meaningful # one should be created to be built upon. bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages  ros2 interface show example_interfaces/srv/setbool # this is an example of a service to set a boolean value. # this can be used for testing but a semantically meaningful # one should be created to be built upon. bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages  ros2 interface show example_interfaces/srv/setbool # this is an example of a service to set a boolean value. # this can be used for testing but a semantically meaningful # one should be created to be built upon. bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages so, now you have all the info you need to interact with this service server. ros2 service call  test a service server from the terminal this command line tool is very useful so you can test your application without having to write nodes for both sides of the communication. once youve created the service server within a node, you can start sending requests to this service with ros2 service call ros2 service call . you will need to know the name of the service, the name of the interface, and the details of that interface. well, we just got all those info from the previous steps! to call a service, type: ros2 + service + call + service name + service type + request. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 service call /activate_robot example_interfaces/srv/setbool "{data: true}" requester: making request: example_interfaces.srv.setbool_request(data=true) response: example_interfaces.srv.setbool_response(success=true, message= 'robot has been activated' ) ...  ros2 service call /activate_robot example_interfaces/srv/setbool "{data: false}" waiting for service to become available... requester: making request: example_interfaces.srv.setbool_request(data=false) response: example_interfaces.srv.setbool_response(success=true, message= 'robot has been deactivated' )  ros2 service call /activate_robot example_interfaces/srv/setbool "{data: true}" requester: making request: example_interfaces.srv.setbool_request(data=true) response: example_interfaces.srv.setbool_response(success=true, message='robot has been activated') ...  ros2 service call /activate_robot example_interfaces/srv/setbool "{data: false}" waiting for service to become available... requester: making request: example_interfaces.srv.setbool_request(data=false) response: example_interfaces.srv.setbool_response(success=true, message='robot has been deactivated')  ros2 service call /activate_robot example_interfaces/srv/setbool "{data: true}" requester: making request: example_interfaces.srv.setbool_request(data=true) response: example_interfaces.srv.setbool_response(success=true, message='robot has been activated') ...  ros2 service call /activate_robot example_interfaces/srv/setbool "{data: false}" waiting for service to become available... requester: making request: example_interfaces.srv.setbool_request(data=false) response: example_interfaces.srv.setbool_response(success=true, message='robot has been deactivated') for the request, use quotes and curly brackets {}, and put all the fields of the request inside, with yaml syntax. this command line tool will: wait for the service to become available  try to use ros2 service call ros2 service call when the node containing the server is not up. the command will hang until you start the server node again. create a service client, a request, and send the request to the server. wait for the server to process the request and respond. once the server has sent the response, print the response, and exit. as you can see ros2 service call ros2 service call is really practical, so you dont have to create a new node doing all those steps, just to test the server. you can use this command to test different behaviors of the server, by sending different data inside the request. once you start having a bigger application with many nodes and services running on your robot, you can also use this command to trigger some actions, or simulate a behavior in your robot for live testing. find service info directly from a nodes name one additional thing to know: you can also find all the info for a service server, using the ros2 node info command. once you know the name of your node: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 node info /activate_robot_server /activate_robot_server subscribers: publishers: /parameter_events: rcl_interfaces/msg/parameterevent /rosout: rcl_interfaces/msg/log service servers: /activate_robot: example_interfaces/srv/setbool /activate_robot_server/describe_parameters: rcl_interfaces/srv/describeparameters /activate_robot_server/get_parameter_types: rcl_interfaces/srv/getparametertypes /activate_robot_server/get_parameters: rcl_interfaces/srv/getparameters /activate_robot_server/list_parameters: rcl_interfaces/srv/listparameters /activate_robot_server/set_parameters: rcl_interfaces/srv/setparameters /activate_robot_server/set_parameters_atomically: rcl_interfaces/srv/setparametersatomically service clients: action servers: action clients:  ros2 node info /activate_robot_server /activate_robot_server subscribers: publishers: /parameter_events: rcl_interfaces/msg/parameterevent /rosout: rcl_interfaces/msg/log service servers: /activate_robot: example_interfaces/srv/setbool /activate_robot_server/describe_parameters: rcl_interfaces/srv/describeparameters /activate_robot_server/get_parameter_types: rcl_interfaces/srv/getparametertypes /activate_robot_server/get_parameters: rcl_interfaces/srv/getparameters /activate_robot_server/list_parameters: rcl_interfaces/srv/listparameters /activate_robot_server/set_parameters: rcl_interfaces/srv/setparameters /activate_robot_server/set_parameters_atomically: rcl_interfaces/srv/setparametersatomically service clients: action servers: action clients:  ros2 node info /activate_robot_server /activate_robot_server subscribers: publishers: /parameter_events: rcl_interfaces/msg/parameterevent /rosout: rcl_interfaces/msg/log service servers: /activate_robot: example_interfaces/srv/setbool /activate_robot_server/describe_parameters: rcl_interfaces/srv/describeparameters /activate_robot_server/get_parameter_types: rcl_interfaces/srv/getparametertypes /activate_robot_server/get_parameters: rcl_interfaces/srv/getparameters /activate_robot_server/list_parameters: rcl_interfaces/srv/listparameters /activate_robot_server/set_parameters: rcl_interfaces/srv/setparameters /activate_robot_server/set_parameters_atomically: rcl_interfaces/srv/setparametersatomically service clients: action servers: action clients: here in the service servers category, we find all the 7 servers running in the node: the one we created and the 6 automatically started to manage parameters. also, you directly get all the info you need: the service name and service type. then, with the service type you can simply run ros2 interface show ros2 interface show to get the details. ros2 service: find and debug your services the ros2 service command line tool is a great addition to the tool list ros2 provides. it will help you quickly check if your new service servers are working as expected (if you have an error from the server code, you may be able to spot uncaught exceptions and fix/catch them right away). also, from an already running ros2 application, you can quickly find out what services you can call, and which interface you need to use. so you can launch the app, and test some behaviors in no time. want to learn how to program with ros2? don't miss this opportunity: [new] ros 2 book or, learn with a video course want to learn ros2? [new] ros 2 book or, learn with a video course we use s on our website to give you the most relevant experience by remembering your preferences and repeat visits. by clicking accept all, you consent to the use of all the s. however, you may visit " settings" to provide a controlled consent.  settings accept all manage consent close  overview this website uses s to improve your experience while you navigate through the website. out of these, the s that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the ... necessary necessary always enabled necessary s are absolutely essential for the website to function properly. these s ensure basic functionalities and security features of the website, anonymously.  duration description lawinfo-checkbox-analytics 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "analytics". lawinfo-checkbox-functional 11 months the  is set by gdpr  consent to record the user consent for the s in the category "functional". lawinfo-checkbox-necessary 11 months this  is set by gdpr  consent plugin. the s is used to store the user consent for the s in the category "necessary". lawinfo-checkbox-others 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "other. lawinfo-checkbox-performance 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "performance". viewed__policy 11 months the  is set by the gdpr  consent plugin and is used to store whether or not user has consented to the use of s. it does not store any personal data. functional functional functional s help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features. performance performance performance s are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors. analytics analytics analytical s are used to understand how visitors interact with the website. these s help provide information on metrics the number of visitors, bounce rate, traffic source, etc.    s are used to provide visitors with relevant ads and  campaigns. these s track visitors across websites and collect information to provide customized ads. others others other uncategorized s are those that are being analyzed and have not been classified into a category as yet. save & accept learn ros2 in a week check out the course here