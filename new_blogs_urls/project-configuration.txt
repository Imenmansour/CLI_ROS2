learn get started release notes tutorials user guide tools ui api reference developer guide contribute atom renderer version: 23.10.3 development 23.10 23.05 22.10 22.05 search site / o3de documentation / user guide / interactivity and simulation / robotics / project configuration / edit on github in this article ros 2 project configuration requirements ubuntu 22.04. other ubuntu versions and linux distributions can also work as long as they support ros 2 humble or ros 2 iron. important: the ros 2 gem is not available for windows. o3de built from source on linux . the latest released version of ros 2. this instruction assumes that the desktop version is installed. otherwise, some packages might be missing. the o3de ros 2 has been tested with ros 2 humble and ros 2 iron with ubuntu 22.04. setting up ros 2 ecosystem source your ros 2 workspace to build or run projects using ros 2 gem, you must source your ros 2 workspace in your console. the best way to ensure that ros 2 is sourced at all times is by adding the following line to the ~/.profile file: source /opt/ros/<distro>/setup.bash replace <distro> with the ros 2 distribution name (such as humble ). then, you must log out and log in from ubuntu for the change to take effect. custom packages the gem fully supports workspace overlaying . source your workspace on top of the ros 2 installation to include custom packages. the gem comes with a number of ros 2 packages already included and linked, but you might want to include additional packages in your project. to do so, use the target_depends_on_ros2 function in your projects gem/cmakelists.txt : target_depends_on_ros2_packages(<your_target> <ros_package1> <ros_package2>) working with multiple ros versions if you have multiple ros 2 versions installed, make sure you source the one you would like to use. you can check which version is sourced in your console by checking the value of ros_distro environment variable ( echo ros_distro ). you currently need to rebuild your project if it was previously built with another ros version. additional ros 2 packages required gazebo_msgs: ros-{ros_distro}-gazebo-msgs gazebo_msgs are used for robot spawning (no dependency on gazebo). ackermann messages: ros-{ros_distro}-ackermann-msgs control toolbox ros-{ros_distro}-control-toolbox xacro ros-{ros_distro}-xacro if a desktop installation of ros 2 distro was selected, everything else should be there. use this helpful command to install: sudo apt install ros-{ros_distro}-ackermann-msgs ros-{ros_distro}-control-toolbox ros-{ros_distro}-nav-msgs ros-{ros_distro}-gazebo-msgs ros-{ros_distro}-xacro clone the gem repository the ros 2 gem lives in the o3de/o3de-extras repository. clone the github repository to your machine: git clone https://github.com/o3de/o3de-extras registering the gem to use the ros 2 gem in any o3de project, you need to register it with o3de. for convenience, set a couple of environment variables: o3de_home to where your o3de is located and o3de_extras_home to the path of your cloned o3de-extras repository, for example: export o3de_home = { home } /o3de export o3de_extras_home = { home } /o3de-extras run the following command to register the ros 2 gem: { o3de_home } /scripts/o3de.sh register --gem-path { o3de_extras_home } /gems/ros2 registering robotic project templates robotics project templates can help you quickly start your simulation project. we recommend that you register the robotics project template gems and their asset gems, which you downloaded with the o3de-extras repository. to register robotic templates and assets: enable git large file storage (lfs), if you havent already. asset gems use lfs to store large files. cd { o3de_extras_home } git lfs install && git lfs pull register the following robotic templates and assets. { o3de_home } /scripts/o3de.sh register --gem-path { o3de_extras_home } /gems/proteusrobot { o3de_home } /scripts/o3de.sh register --gem-path { o3de_extras_home } /gems/rosrobotsample { o3de_home } /scripts/o3de.sh register --gem-path { o3de_extras_home } /gems/warehouseassets { o3de_home } /scripts/o3de.sh register --gem-path { o3de_extras_home } /gems/warehousesample { o3de_home } /scripts/o3de.sh register --template-path { o3de_extras_home } /templates/ros2fleetrobottemplate { o3de_home } /scripts/o3de.sh register --template-path { o3de_extras_home } /templates/ros2roboticmanipulationtemplate { o3de_home } /scripts/o3de.sh register --template-path { o3de_extras_home } /templates/ros2projecttemplate for more information, refer to adding and removing gems and registering gems . creating a new robotic simulation project robotic project templates project templates are useful tools to shape your initial project. when created with a template, a new project can start with a specific configuration. include certain enabled gems and starting levels. robotic project templates are designed to help you to quickly start simulating robots in o3de with ros 2. ros 2 project templates there are three templates for robotics: ros 2 project template : a versatile, lightweight template that is good for a starting project and includes a robot with differential drive. warehouse project template : a photorealistic warehouse with a proteus robot, easy to customize and scale up (multi-robot). manipulation project template : includes two levels with robotic manipulator arms: one focused on palletization, the other one on r&d. :bulb: the template repositories also include examples that you can try out by following their readme files. create a new project with a template to create a project with a template, you may use gui or command line. the quickest way is to run the following commands (adjust project_name , project_path and the template as you wish): export project_name = mysimulationproject export project_path = { home } /projects/ { project_name } { o3de_home } /scripts/o3de.sh create-project --project-path project_path --template-path { o3de_extras_home } /templates/ros2projecttemplate for more information, refer to project creation building the ros 2 gem is built when you build an o3de project with the ros 2 gem enabled. make sure to source your ros 2 workspace before building. for convenience, here is an example of parametrized cmake calls: cd project_path cmake -b build/linux -g "ninja multi-config" -dly_disable_test_modules = on -dcmake_export_compile_commands = on -dly_strip_debug_symbols = on -daz_use_physx5:bool = on cmake --build build/linux --config profile --target { project_name } editor { project_name } .assets these commands build o3de with physx 5 (as opposed to default physx 4), which is better suited for robotic simulation. for a deeper understanding on how o3de projects are built, please refer to configure and build . launching your project in o3de editor once your project is built, run the following command to start the editor: { project_path } /build/linux/bin/profile/editor