open in app sign up sign in write sign up sign in getting started with ros2: create and set up a workspace part 5 of our getting started with ros2 series sagar kumar  follow published in spinor  5 min read  jul 7, 2024 -- listen share welcome, fellow readers, to our getting started with ros2 series! in this series, we aim to provide you with a comprehensive introduction to ros 2 and will guide you through the fundamentals, its key concepts, and practical applications. if you have never used the robot operating system(ros) before, even ros 1, or if you want a practical and quick refreshment of the basics then this series is for you. feel free to explore the links provided for a more in-depth understanding of the concepts discussed. prerequisites before we start, you must have a basic understanding of ros2 concepts. please refer to the following articles in our series: getting started with ros2: an introduction  provides a foundational overview of ros2. getting started with ros2: why ros2?  explains the advantages and motivations for using ros2. getting started with ros2: install and setup ros2 humble on ubuntu 22.04(lts)  guides you through installing and setting up ros2 on ubuntu. getting started with ros2: overview of ros2 workspaces, packages and nodes having a solid grasp of these basics will help you follow along and understand the steps involved in creating and managing workspaces in ros2. a brief overview of what a workspace is in ros2 a workspace in ros2 is a directory where you develop and manage your ros2 projects. it serves as a central place to store and organize your ros2 packages, which include your nodes, libraries, configuration files, and other resources. the workspace is essential for building, testing, and deploying ros2 applications, as it helps manage dependencies and facilitates a streamlined development workflow. in short, we cannot save our code wherever we want; we need a bit of organization. therefore, we have to use workspaces, which is what we share with others when we need to share our work. structure of a ros2 workspace the standard structure of a ros2 workspace typically includes several key directories: src : this directory contains the source code of your ros2 packages . each package is a self-contained unit of software that includes nodes, libraries, and configuration files. we will cover packages later in this series. install : after building the workspace, this directory contains the installed files necessary to run your packages , including executables and other resources. build : this directory holds intermediate build files generated during the compilation process . log : this directory contains log files that provide information  the build and runtime processes, useful for debugging and monitoring . setting up colcon colcon is a command-line tool used to build and manage multiple packages in a ros2 workspace. it simplifies the process of compiling, testing, and organizing ros2 projects, ensuring efficient and streamlined development workflows. with colcon , you can easily create and build a ros 2 workspace. if you have already installed ros-humble-desktop and ros-dev-tools , colcon should be included in those packages. you do not need to install colcon separately. you can verify its installation by running: colcon --version regarding autocompletion , colcon can provide command-line autocompletion, but it requires an additional setup. heres how you can enable it: install the colcon autocompletion script: sudo apt install python3-colcon-common-extensions enable autocompletion in your shell configuration: for bash , add the following lines to your ~/.bashrc file: source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash for zsh , add the following lines to your ~/.zshrc file: autoload -uz compinit compinit autoload -uz bashcompinit bashcompinit source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash reload your shell configuration: for bash : source ~/.bashrc for zsh : source ~/.zshrc creating a new workspace to start developing with ros2, you need to create a workspace directory to organize your packages. mkdir -p ~/ros2_ws/src cd ~/ros2_ws the first command creates a new directory named ros2_ws with a subdirectory src where your source code will reside. replace ros2_ws with the desired name for your workspace. note: remember, while you can name your workspace directory anything you like, the src directory must retain its name for ros2 to function correctly. setting up the workspace navigate to the workspace directory: move into the ros2_ws directory i.e. into the root directory of your ros2 workspace. cd ~/ros2_ws build the packages: this command initiates the build process using colcon , compiling all packages within your workspace. it ensures that your ros2 project is ready for testing and deployment by generating executable binaries and necessary build artifacts. colcon build note: since no packages have been created yet, running colcon build in an empty workspace containing only the src folder will not initiate any build process because there are no packages defined for compilation. if you run colcon build in an empty ros2 workspace that only has the src folder, here's what will happen: initialization: colcon will recognize that there are no packages or build files ( cmakelists.txt , etc.) present in the src directory. no packages to build: since there are no packages defined in the workspace, colcon will not find anything to build. output: you will likely see a message indicating that there are no packages to build or something like this  summary: 0 packages finished [0.59s] . source the workspace sourcing the workspace sets up your environment to recognize ros2 packages and tools installed within it. this step ensures that commands like ros2 and your custom packages are accessible. command to source: this command sources the setup.bash script located in the install directory of your workspace , configuring your current terminal session to use the packages and tools installed in your ros2 workspace. source ~/ros2_ws/install/setup.bash add to .bashrc for convenience: to automate this process for every new terminal session, add the sourcing command to your .bashrc file: echo "source ~/ros2_ws/install/setup.bash" >> ~/.bashrc source ~/.bashrc whats next? in the upcoming articles, we will explore nodes and packages in depth, learning how to create custom packages and nodes. if youve made it this far, it means youre not just interested  youre committed, and were delighted to have you here! your interest and engagement inspire us to create more content and share knowledge with fellow learners, the community of robotics, and tech enthusiasts who share our passion. so, thank you for being a part of this journey with us. stay tuned for more insightful articles, tutorials, and practical examples as we continue our exploration of ros 2 together. ros2 robot operating system robotics programming technology follow written by sagar kumar 53 followers  editor for spinor sagar is a computer vision and robotics expert with a focus on perception & localization | twitter: twitter.com/sagarcadet | linkedin: linkedin.com/in/sagark30 follow help status  careers press    text to speech teams