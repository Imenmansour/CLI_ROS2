tutorial 1: writing a simple publisher and subscriber in python rupesh kumar yadav mediboyina  follow 3 min read  apr 14, 2024 -- listen share introduction: in the realm of robotics and automation, communication between different components is crucial. ros2 (robot operating system 2) provides a robust framework for building such systems, enabling seamless interaction between various nodes. this tutorial serves as a beginners guide to creating and running a basic ros2 publisher and subscriber in python, facilitating the exchange of messages over topics. background: in this tutorial, well delve into the creation of two essential components: a publisher, responsible for generating and transmitting messages, and a subscriber, tasked with receiving and processing these messages. through these examples, well gain a fundamental understanding of how nodes communicate within the ros2 ecosystem. prerequisites: before embarking on this tutorial, ensure you have ros2 installed on your system. refer to the official ros2 documentation for installation instructions. additionally, a basic familiarity with python programming is recommended but not mandatory. tasks: 1. create a package: begin by setting up a ros2 package to encapsulate our publisher and subscriber nodes. follow these steps: # create a new directory for your package within your ros2 workspace. mkdir -p ~/ros2_ws/src cd ~/ros2_ws/src # initialize a new ros2 package using the ros2 pkg create command, specifying python as the build type. ros2 pkg create --build-type ament_python py_pubsub # copy the provided python scripts (publisher.py and subscriber.py) into the package directory. # update the setup.py and package.xml files to include dependencies and entry points for execution. 2. write the publisher node: the publisher node is responsible for generating and transmitting messages over a specific topic. the provided python script `publisher_member_function.py` demonstrates the creation of a simple publisher node. import rclpy from rclpy.node import node from std_msgs.msg import string class minimalpublisher(node): def __init__(self): super().__init__('minimal_publisher') self.publisher_ = self.create_publisher(string, 'topic', 10) timer_period = 0.5 # seconds self.timer = self.create_timer(timer_period, self.timer_callback) self.i = 0 def timer_callback(self): msg = string() msg.data = 'hello world: %d' % self.i self.publisher_.publish(msg) self.get_logger().info('publishing: "%s"' % msg.data) self.i += 1 def main(args=none): rclpy.init(args=args) minimal_publisher = minimalpublisher() rclpy.spin(minimal_publisher) minimal_publisher.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() 3. write the subscriber node: the subscriber node receives and processes messages published by the publisher. the script `subscriber_member_function.py` illustrates the creation of a basic subscriber node. import rclpy from rclpy.node import node from std_msgs.msg import string class minimalsubscriber(node): def __init__(self): super().__init__('minimal_subscriber') self.subscription = self.create_subscription( string, 'topic', self.listener_callback, 10) self.subscription def listener_callback(self, msg): self.get_logger().info('i heard: "%s"' % msg.data) def main(args=none): rclpy.init(args=args) minimal_subscriber = minimalsubscriber() rclpy.spin(minimal_subscriber) minimal_subscriber.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() 4. build and run: once the publisher and subscriber nodes are written, proceed with building and executing the ros2 package. follow these steps: ``` # build the ros2 workspace using colcon build. cd ~/ros2_ws colcon build --packages-select py_pubsub # source the setup script to ensure proper environment setup. source install/setup.bash # run the publisher node using ros2 run. ros2 run py_pubsub talker # launch the subscriber node in a separate terminal. ros2 run py_pubsub listener summary: in this tutorial, we explored the fundamentals of creating and running a simple ros2 publisher and subscriber in python. by following the outlined steps, readers gained insights into the process of message exchange between nodes within the ros2 framework. this foundational knowledge sets the stage for further exploration and development in ros2-based robotics and automation projects. next steps: building upon the concepts covered in this tutorial, readers can delve deeper into ros2 development by exploring advanced topics such as service communication, action servers, and parameter management. additionally, hands-on experimentation with custom nodes and integration into real-world robotic applications will further enhance proficiency in ros2 development. related content: for additional resources and tutorials on ros2 development, refer to the official ros2 documentation and community forums. collaborative projects and online communities offer valuable opportunities for learning and knowledge sharing within the ros2 ecosystem. by mastering the basics of ros2 publisher-subscriber communication, aspiring roboticists and enthusiasts embark on a transformative journey toward harnessing the full potential of ros2 for building intelligent and interconnected robotic systems. license: this project is licensed under the mit license. for more details, refer to the license file in the repository. author: for inquiries or feedback, please  the author at rupesh32003@gmail.com . github repository: access the source code and additional resources on the github repository: [ros2_publisher_subscriber]( https://github.com/rupesh4604/ros2_publisher_subscriber.git ) ros2 robotics publisher subscriber python robot operating system follow written by rupesh kumar yadav mediboyina 0 followers i'm a cse undergrad at nit andhra pradesh, interested in deep learning, computer vision, ai, web development and research. follow help status  careers press    text to speech teams