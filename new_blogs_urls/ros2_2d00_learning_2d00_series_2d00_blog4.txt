element14 community search register log in site search log in register technologies more robotics  ros2 learning series -  4 - basic programming - part 1  forum documents quiz events polls members mentions sub-groups tags more cancel new robotics requires membership for participation - click to join share more cancel group actions group rss more cancel engagement author author: crisdeodates date created: 9 apr 2024 1:24 pm date created views 192 views likes 3 likes comments 1 comment robot operating system robotics ros2 ros related recommended ros2 learning series -  4 - basic programming - part 1 crisdeodates 9 apr 2024 ros2 - publisher subscriber project let's put everything we have gone through so far into creating some interesting projects. a basic knowledge of linux terminal and python programming language is required for completing the projects. in all the code snippets provided, i have given comments wherever necessary. consider this as a general guide and feel free to modify the code as per your requirements. we are going to write a simple publisher - subscriber program for finding the sum of n positive numbers. the program takes a positive integer as input and publishes it via a topic in a publisher node. another subscriber node subscribes to the topic having the input data, calculates the sum of integers until the input number and displays it in the terminal. create and set up a ros2 workspace folder named ros2_ws and a src folder inside it.  mkdir -p ~/ros2_ws/src  cd ~/ros2_ws from the root of your workspace (ros2_ws), we can now build your packages using the command  colcon build we can see that colcon has created some new directories. lets keep in mind that the install directory is where our workspaces setup files will be present. to enable ros2 commands, source the ros2 setup file.  source /opt/ros/humble/setup.bash create a package called sum_nums for our project and use the ament python build system. if the project has multiple packages in the future, putting all the relevant project packages in a workspace is very important because you can build multiple packages at once using the colcon build in the workspace root. else, all the packages needs to be built individually.  cd src  ros2 pkg create --build-type ament_python --license apache-2.0 sum_nums this will automatically generate the necessary files. if we see the directory structure of our src folder, it will look something like this. sum_nums/  license  package.xml  resource   sum_nums  setup.cfg  setup.py  sum_nums   __init__.py  test  test_.py  test_flake8.py  test_pep257.py the relevant files are the following: package.xml -> containing meta information  the package. resource/sum_nums -> marker file for the package. setup.cfg -> required when a package has executables, so ros2 run can find them. setup.py -> contains instructions for how to install the package. sum_nums - directory with the same name as the package, used by ros 2 tools to find the package, and contains __init__.py file. we will create two python ros2 node files named sum_nums_publisher.py and sum_nums_subscriber.py. the sum_nums_publisher.py node will accept a number from the user and publish it to a topic named input_number. the sum_nums_subscriber.py node subscribes to the topic input_number, calculates the sum of n numbers up to the input number and displays the final sum. create a python ros2 publisher node file named sum_nums_publisher.py inside sum_nums/sum_nums folder, adjacent to where the file __init.py__ is present.  cd sum_nums/sum_nums  touch sum_nums_publisher.py sum_nums_subscriber.py open sum_nums_publisher.py and populate it with the publisher code: import rclpy from rclpy.node import node from std_msgs.msg import int8 class sumnumspub (node): """ node to publish positive integer numbers. """ def __init__ (self): """ initializes the sumnumspub class. """ super().__init__( 'sum_nums_publisher_node' ) # create a publisher for data type int8 self.publisher_ = self.create_publisher(int8, 'input_number' , 10 ) def sum_nums_publish (self, data): """ publishes the given data. parameters: data: data to be published. """ self.publisher_.publish(data) def main (args=none): """ main function to initialize the node and publish a positive integer number. """ rclpy.init(args=args) sum_nums_publisher_node = sumnumspub() num_data = int8() # accept a keyboard input num_input = int(input( "enter a positive integer number: " )) if num_input < 0 : print( "input number is not positive" ) else : print( 'entered:' , num_input) num_data.data = num_input # publish the integer to the topic sum_nums_publisher_node.sum_nums_publish(num_data) # destroy the node explicitly sum_nums_publisher_node.destroy_node() rclpy.shutdown() if __name__ == '__main__' : main() open sum_nums_subscriber.py and populate it with the subscriber code: import rclpy from rclpy.node import node from std_msgs.msg import int8 class sumnumssub (node): """ node to subscribe to a topic and compute the sum of first n integer numbers. """ def __init__ (self): """ initializes the sumnumssub class. """ super().__init__( 'sum_nums_publisher_node' ) # create a subscription to the 'input_number' topic self.subscription = self.create_subscription( int8, 'input_number' , self.subscriber_callback, 10 ) self.subscription # prevent unused variable warning self.num = 0 self.sum = 0 def subscriber_callback (self, msg): """ callback function to compute the sum of first n integer numbers. parameters: msg: the received message containing the number n. """ self.num = int(msg.data) self.sum = self.recursive_sum(self.num) print( "sum of first" , self.num, "integer numbers is:" , self.sum) def recursive_sum (self, n): """ recursive function to compute the sum of first n integer numbers. parameters: n: the number of integer numbers to sum. returns: the sum of the first n integer numbers. """ if n <= 1 : return n else : return n + self.recursive_sum(n - 1 ) def main (args=none): """ main function to initialize the node and spin it to handle messages. """ rclpy.init(args=args) sum_nums_subscriber_node = sumnumssub() rclpy.spin(sum_nums_subscriber_node) # destroy the node explicitly sum_nums_subscriber_node.destroy_node() rclpy.shutdown() if __name__ == '__main__' : main() we need to configure additional files in the package to enable the node executables to be setup and built correctly. we need to add our dependencies to package.xml file and the node entry points to setup.py file inside the package root folder. modify the package.xml, populate the <description>, <maintainer> and <license> tags and after those lines, add the following dependencies that we imported in our sum_nums_publisher.py file and save the file. <exec_depend>rclpy</exec_depend> <exec_depend>std_msgs</exec_depend> modify the setup.py file, matching the maintainer, maintainer_email, description and license fields to your package.xml. then add the following line within the console_scripts bracket of the entry_points field and save it: 'sum_nums_pub = sum_nums.sum_nums_publisher:main' , 'sum_nums_sub = sum_nums.sum_nums_subscriber:main' , here 'sum_nums_pub and sum_nums_sub are the names of our executables. also check the setup.cfg file to see if its populated automatically. the settings in setup.cfg file will put the executables in install/sum_nums/lib/sum_nums/ folder, allowing ros2 run command to access them. return to the root of our workspace, build our project and source the installation folder to add it to the path for finding the new executables.  cd ~/ros2_ws  colcon build  source install/setup.bash once the build is done, lets try to run our node executables. in a same terminal, run the sum nums subscriber node.  ros2 run sum_nums sum_nums_sub in a new terminal, run the sum nums publisher node.  cd ~/ros2_ws  source install/setup.bash  ros2 run sum_nums sum_nums_pub enter a positive integer and press enter. the sum will be displayed by the sum_nums_sub node in the first terminal. note : you can publish to the topic input_number manually using ros2 topic echo command, however this tutorial is meant to get a grasp on the basics by covering all the areas that we went through in the previous s. sign in to reply dab 4 months ago looks clean to implement. cancel vote up 0 vote down sign in to reply more cancel