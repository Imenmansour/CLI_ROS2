[ros2 how-to] install third-party python packages using ros2 #5 written by ruben alves  ros2 q&a | ros2 tutorials  16/09/2022 what we are going to learn how to use rosdep how to use apt and apt-get how to create a virtual environment and install packages inside list of resources used in this post use this rosject: https://app.theconstructsim.com/l/4fefbbab/ the construct: https://app.theconstructsim.com/ ros2 guide: https://docs.ros.org/en/humble/how-to-guides/using-python-packages.html https://github.com/ros/rosdistro/blob/master/rosdep/base.yaml https://github.com/ros/rosdistro/blob/master/rosdep/python.yaml ros2 courses  ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 ros2 navigation training : https://www.theconstruct.ai/ros2-navigation-training/ overview software usually builds on other software. when you are creating a ros2 package, for example, you have to specify the packages that the created package depends on. in this post, we are going to talk  different methods that you can use to properly handle package dependencies in ros2. ros inside! ros inside before anything else, in case you want to use the logo above on your own robot or laptop, feel free to download it for free and attach it to your robot. it is really free. find it in the link below: ros inside logo opening the rosject in order to learn how to install third-party python packages using ros2, we need to have ros2 installed in our system, and it is also useful to have some simulations. to make your life easier, we already prepared a rosject for that: https://app.theconstructsim.com/l/4fefbbab/ . you can download the rosject on your own computer if you want to work locally, but just by copying the rosject (clicking the link), you will have a setup already prepared for you. after the rosject has been successfully copied to your own area, you should see a run button. just click that button to launch the rosject (below you have a rosject example). installing third-party python packages in ros2  run rosject (example of the run button) after pressing the run button, you should have the rosject loaded. lets now head to the next section to really get some real practice. installing packages via rosdep the rosdep command helps you install external dependencies in an os-independent manner. in order to use rosdep , we need a terminal. lets open one: open a new terminal ok, in this rosject , we have already some packages. they were created with the following commands (you dont need to run those commands since the package already exists): cd ~/ros2_ws/src ros2 pkg create --build-type ament_python my_new_ros2_numpy_pkg --dependencies rclpy std_msgs geometry_msgs python3-numpy in the command above, we created the my_new_ros2_numpy_pkg package that depends on rclpy, std_msgs geometry_msgs, and python3-numpy . you can see the command by running the commands below: cd ~/ros2_ws/src ls you can now see the content of the package.xml file of that package using the command below: cat ~/ros2_ws/src/my_new_ros2_numpy_pkg/package.xml after checking that file, lets pay attention to the following line: <depend>python3-numpy</depend> do you remember that we specific python3-numpy as a dependency of our package when we created it? you can also add a new dependency to an existing package by manually editing the package.xml file. all right, now that our package is created, lets install its dependencies using rosdep. for that, lets run the following commands in the first terminal : cd ~/ros2_ws/src source ~/ros2_ws/install/setup.bash sudo apt-get update rosdep install --from-paths ~/ros2_ws/src --ignore-src -r -y the last command above installs all the packages that are not yet installed in our system and are required by the packages in your workspace. if the message says no package was installed, that is because all dependencies are already installed in the system, but you should have seen at least the package python3-websockets installed. that python3-websockets package is a dependency of our second package called my_new_ros2_websockets_pkg in our workspace, which was created using the following commands cd ~/ros2_ws/src ros2 pkg create --build-type ament_python my_new_ros2_websockets_pkg --dependencies rclpy python3-websockets packages that can be installed with rosdep the list of packages that can be installed using rosdep can be found in the following links: https://github.com/ros/rosdistro/blob/master/rosdep/base.yaml https://github.com/ros/rosdistro/blob/master/rosdep/python.yaml installing packages using a package manager (apt, apt-get) we just learned how to install packages using rosdep . another way of installing dependencies is by using a package manager directly. if you are using linux ubuntu , for example, you can use apt or apt-get, which are command-line tools that can be used to install and manage packages. you can use the following command to list the packages installed with apt ; apt list --installed the output would be something similar to the following: ... xxd/jammy,now 2:8.2.3995-1ubuntu2 amd64 [installed,automatic] xz-utils/jammy,now 5.2.5-2ubuntu1 amd64 [installed,automatic] yaru-theme-gnome-shell/now 21.10.2 all [installed,upgradable to: 22.04.4] yaru-theme-gtk/jammy,jammy,now 22.04.4 all [installed,automatic] yaru-theme-icon/jammy,jammy,now 22.04.4 all [installed,automatic] yaru-theme-sound/jammy,jammy,now 22.04.4 all [installed,automatic] yelp-xsl/jammy,jammy,now 42.0-1 all [installed,automatic] yelp/jammy,now 42.1-1 amd64 [installed,automatic] zenity-common/jammy-updates,jammy-updates,now 3.42.1-0ubuntu1 all [installed,automatic] zenity/jammy-updates,now 3.42.1-0ubuntu1 amd64 [installed,automatic] zip/jammy,now 3.0-12build2 amd64 [installed,automatic] zlib1g-dev/jammy,now 1:1.2.11.dfsg-2ubuntu9 amd64 [installed,automatic] zlib1g/jammy,now 1:1.2.11.dfsg-2ubuntu9 amd64 [installed,automatic] zstd/jammy,now 1.4.8+dfsg-3build1 amd64 [installed,automatic] if you want to see if a given package named xml is installed, you would run the command below: apt list --installed| grep libxml which would should packages that contain the word xml: libxml-parser-perl/jammy,now 2.46-3build1 amd64 [installed,automatic] libxml-twig-perl/jammy,jammy,now 1:3.52-1 all [installed,automatic] libxml-xpathengine-perl/jammy,jammy,now 0.14-1 all [installed,automatic] libxml2/jammy-updates,jammy-security,now 2.9.13+dfsg-1ubuntu0.1 amd64 [installed,automatic] libxmlb2/jammy,now 0.3.6-2build1 amd64 [installed,automatic] another way of finding installed packages is by calling dpkg directly. sudo dpkg -l | grep xml if you know the name of the package you wish to install, you can install it by using this syntax: sudo apt-get install <package1> <package2> <package3> replace the <package> with your desired package name. example: sudo apt-get install -y python3-pandas sometimes, it may happen that apt or apt-get install will fail and you will get this error message: package 'python3-pandas' has no installation candidate when this happens, usually, running sudo apt update before the apt install command can solve the issue: sudo apt-get update sudo apt-get install python3-pandas installing packages using pip and virtualenv instead of installing python dependencies system-wide, you can install them in a virtual environment, so that you can have different versions of a given package being used by different projects, yet they do not conflict. for that, we need to use virtualenv . to check if virtualenv is installed, we can use the following command: virtualenv --version if you have an error like the following, it means virtualenv is not installed: bash: virtualenv: command not found in order to install virtualenv , we would use the following commands: sudo apt update sudo apt install python3-virtualenv once virtualenv is installed, we can create our virtual environment this way: cd ~ mkdir -p ~/ros2_ws_venv/src cd ~/ros2_ws_venv virtualenv -p python3 ./venv if everything went well, you should now have a python virtual environment in the ~/ros2_ws_venv folder. you can now activate your environment with the following command: source ./venv/bin/activate after you activate the environment, your command prompt will change to show that you are in a python virtual environment, so, instead of having user:~/ros2_ws_venv in your terminal, you would see something like this: (venv) user:~/ros2_ws_venv ignoring the venv folder (virtual environment) when compiling our ros2 workspace in order to tell ros2 not to consider our venv folder when compiling our workspace, we just create a file named colcon_ignore in the folder that we want to ignore. example: touch ~/ros2_ws_venv/venv/colcon_ignore all right. in the previous section we activated our environment with: cd ~/ros2_ws_venv source ./venv/bin/activate now, we can install python packages in this environment just like we did before. example: python3 -m pip install torch now you can build your workspace and run your python node that depends on packages installed in your virtual environment. lets compile our workspace: cd ~/ros2_ws_venv colcon build now your packages can use the python packages installed in your virtual environment, just like if they were installed system-wide. as long as your virtual environment is activated, you can install packages into that specific environment and you will be able to import and use those packages in your application. bear in mind that you always need to have the virtual environment activated when you want o use it. to exit/deactivate the virtual environment, you can run the following command: deactivate congratulations on reaching the end of this post. i hope it was useful for you. if you want a live version of this post, please check the video in the next section. youtube video so this is the post for today. remember that we have the live version of this post on youtube. if you liked the content, please consider subscribing to our youtube channel. we are publishing new content ~every day. keep pushing your ros learning. related courses & training if you want to learn more  ros and ros2, we recommend the following courses: ros2 basics in 5 days (python): https://app.theconstructsim.com/#/course/73 ros2 basics in 5 days (c++) : https://app.theconstructsim.com/#/course/61 topics: check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 0 comments submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment δ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail