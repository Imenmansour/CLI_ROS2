open in app sign up sign in write sign up sign in getting started with ros2: overview of ros2 workspaces, packages and nodes part 4 of our getting started with ros2 series sagar kumar  follow published in spinor  5 min read  jul 2, 2024 -- listen share welcome, fellow readers, to our getting started with ros2 series! in this series, we aim to provide you with a comprehensive introduction to ros 2 and will guide you through the fundamentals, its key concepts, and practical applications. if you have never used the robot operating system(ros) before, even ros 1, or if you want a practical and quick refreshment of the basics then this series is for you. feel free to explore the links provided for a more in-depth understanding of the concepts discussed. here are the articles in the series: getting started with ros2: an introduction getting started with ros2: why ros2? getting started with ros2: install and setup ros2 humble on ubuntu 22.04(lts) in our first article, we laid the groundwork by introducing you to the basic concepts of ros 2. in our second article, we dig deeper into the rationale behind using ros 2. our third article provided a step-by-step guide to installing and setting up ros2 humble on ubuntu 22.04 (lts), ensuring you have a working environment ready for development. now, in our fourth article, we will guide you through an overview of ros2 workspaces, packages, and nodes, explaining their roles and how they fit into the ros2 ecosystem. this foundational understanding will prepare you for the deeper dives we will take in future articles dedicated to each of these essential components. so lets get started! hierarchy of ros2: workspaces, packages, and nodes heres a structured hierarchy that represents the relationship between ros2, workspaces, packages, nodes, and their intercommunication: ros2  workspaces   packages    nodes     publishers     subscribers     services     clients     actions    launch files    configuration files    resources   src (source directory)   packages  communication   topics   services   actions  tools   colcon   ros2cli   rviz2   rqt_graph  ecosystem  middleware (dds)  libraries  community explanation of the hierarchy ros2 : the overarching framework that enables modular and scalable development of robotic applications. workspaces : the top-level directories where ros2 packages are developed and built. workspaces can contain multiple packages and facilitate organizing large projects. a workspace typically contains a `src` directory where the source code for packages resides. packages : the fundamental building blocks in ros2. e ach package can include multiple nodes and other resources . packages are designed to be reusable and modular, containing everything needed to run nodes, such as source code, launch files, and configuration files. nodes : executable processes(like a python or c++ script) that perform computations in ros2. nodes communicate with each other using topics, services, and actions. - publishers : nodes that send data to topics. - subscribers : nodes that receive data from topics. - services : nodes that provide a request-reply communication mechanism. - clients : nodes that request services. - actions : nodes that provide goal-oriented communication, allowing for feedback and results over time. intercommunication : the ways in which nodes interact within the ros2 environment. - topics : channels for nodes to publish and subscribe to data streams. - services : synchronous communication mechanism where a node sends a request and waits for a reply. - actions : asynchronous communication mechanism where nodes can send goals, receive feedback, and get results. tools : various tools that assist in developing, building, and debugging ros2 applications. - colcon : build tool used to build ros2 packages. - ros2cli : command-line interface for interacting with ros2. - rviz2 : visualization tool to visualize the state of the robot and the environment. - rqt_graph : a graphical tool that visualizes the ros2 computation graph, helping to understand how nodes and topics are interconnected. ecosystem : the broader environment that supports ros2 development. - middleware (dds) : the communication middleware that ros2 relies on, typically dds (data distribution service). - libraries : core libraries and third-party libraries that provide additional functionality. - community : the collaborative and open-source community that contributes to the development and improvement of ros2. illustration of ros2 workspace illustration of ros2 package illustration of ros2 packages the hierarchy represents how different components in ros2 are organized and interact with each other. at the top is ros2 , which provides the framework for robotic application development. workspaces act as the main organizational units , containing packages where the actual code and resources are stored. each package can have multiple nodes that perform specific tasks and communicate through topics, services, and actions. tools like colcon and ros2cli aid in managing and building these packages , while the ecosystem, including middleware and libraries, supports the overall functionality and development process. by understanding this structure, users can see how individual components fit together, enabling them to develop and maintain complex robotic systems efficiently. whats next? in the upcoming articles, we will dig deeper into each of these essential components: a comprehensive look at nodes, their types, and how they interact within a ros2 system. detailed guidance on setting up and managing workspaces for efficient development. an in-depth exploration of packages, including best practices for structuring and maintaining them. well also cover other crucial components of ros2, such as topics, services, actions, tools like rviz2 and ros2cli, and much more, to provide a well-rounded understanding of the ros2 ecosystem. if youve made it this far, it means youre not just interested  youre committed, and were delighted to have you here! your interest and engagement inspire us to create more content and share knowledge with fellow learners, the community of robotics, and tech enthusiasts who share our passion. so, thank you for being a part of this journey with us. stay tuned for more insightful articles, tutorials, and practical examples as we continue our exploration of ros 2 together. references ros2 basics #3  understanding ros2 packages and workspace ros2 robotics robotics automation robot operating system turorial follow written by sagar kumar 53 followers  editor for spinor sagar is a computer vision and robotics expert with a focus on perception & localization | twitter: twitter.com/sagarcadet | linkedin: linkedin.com/in/sagark30 follow help status  careers press    text to speech teams