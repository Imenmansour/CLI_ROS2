skip to content in this tutorial youll learn how to use ros2 bags, with the ros2 bag command line tool, in order to save and replay data from your ros2 topics. >> watch this video as an additional resource to this article: after watching the video, subscribe to the robotics back-end youtube channel so you dont miss the next tutorials! table of contents toggle why and when to use ros2 bags? imagine youre working on your real  physical  robot, and you are developing an obstacle algorithm for the robot. every time you want to test the algorithm you have to run the robot, and every time (as were in the real physical world, not a simulated one), some external conditions may be different. so it can be quite hard to compare the quality of 2 different results using 2 different data sets. with ros2 bags, you can run your robot, record a sample (bag) of whats happening, and then use this sample again and again. also, you can play back a ros2 bag so you can skip starting some parts of your robot application. thus, you can gain a lot of development time. if youre experimenting on a not-so-stable hardware prototype for example, you can record a bag when things work the way you want, so you can use this sample to develop the software, while the hardware team focuses on improving the stability of the physical prototype. you want to learn ros2 efficiently? check out ros2 for beginners and learn ros2 step by step, in 1 week. one other case is when you use ros2 as a tool for scientific research. if you need, lets say, a sample of whats happening when you send 10 drones outside in a rainy day, well, its possible with ros2 bags. so, there are many cases when ros2 bags can be useful for you. note that ros2 bags only work for topics (data streams), not services. ros2 bag record  record topic(s) and save data into a bag lets start recording some topics with ros2 bag ros2 bag . what you can do first is create a new folder named bags to put all your ros2 bags into, so it wont be a mess later. start some publishers before you can record topics, well you need to publish data with publishers. here we wont write a new node, well use the talker node from the demo_nodes_py package, which should be already installed (if not: sudo apt install ros-<distro_name>-demo-nodes-py sudo apt install ros-<distro_name>-demo-nodes-py ). start the node with ros2 run demo_nodes_py talker ros2 run demo_nodes_py talker in one terminal (see ros2 run tutorial for more info), and you can keep this node running for the duration of this tutorial. with ros2 topic list ros2 topic list (see ros2 topic tutorial for more info), youll see that we have 3 topics in our ros2 graph. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 topic list /chatter /parameter_events /rosout  ros2 topic list /chatter /parameter_events /rosout  ros2 topic list /chatter /parameter_events /rosout that is the list of all topics we can record with ros2 bags. record 1 topic lets record the /chatter topic. to record a topic into a bag, use: ros2 bag record + name of the topic. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 bag record /chatter [info] [1593610018. 395023411 ] [rosbag2_storage]: opened database 'rosbag2_2020_07_01-15_26_58/rosbag2_2020_07_01-15_26_58_0.db3' for read_write. [info] [1593610018. 400892775 ] [rosbag2_transport]: listening for topics... [info] [1593610018. 503442323 ] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610018. 503503738 ] [rosbag2_transport]: all requested topics are subscribed. stopping discovery...  ros2 bag record /chatter [info] [1593610018.395023411] [rosbag2_storage]: opened database 'rosbag2_2020_07_01-15_26_58/rosbag2_2020_07_01-15_26_58_0.db3' for read_write. [info] [1593610018.400892775] [rosbag2_transport]: listening for topics... [info] [1593610018.503442323] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610018.503503738] [rosbag2_transport]: all requested topics are subscribed. stopping discovery...  ros2 bag record /chatter [info] [1593610018.395023411] [rosbag2_storage]: opened database 'rosbag2_2020_07_01-15_26_58/rosbag2_2020_07_01-15_26_58_0.db3' for read_write. [info] [1593610018.400892775] [rosbag2_transport]: listening for topics... [info] [1593610018.503442323] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610018.503503738] [rosbag2_transport]: all requested topics are subscribed. stopping discovery... as you can see, the /chatter topic was found and the bag is subscribing to it. all messages published on this topic will be recorded. when you press ctrl+c the bag will stop all subscribers and no more message will be added to the bag. ros2 bag record ros2 bag record will create a sqlite3 database (database inside a file) and put it inside a folder, which name is the name of the bag. change the name of the ros2 bag when recording by default the name of the bag will be rosbag2_ + current date and time. this is quite handy when you want to record multiple samples and easily sort them by the time when they were recorded. however if you want to give another (meaningful) name to your bag, add an argument: -o + name of the bag. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 bag record /chatter -o my_bag1 [info] [1593610057. 356615405 ] [rosbag2_storage]: opened database 'my_bag1/my_bag1_0.db3' for read_write. [info] [1593610057. 361745739 ] [rosbag2_transport]: listening for topics... [info] [1593610059. 082524279 ] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610059. 082558997 ] [rosbag2_transport]: all requested topics are subscribed. stopping discovery...  ros2 bag record /chatter -o my_bag1 [info] [1593610057.356615405] [rosbag2_storage]: opened database 'my_bag1/my_bag1_0.db3' for read_write. [info] [1593610057.361745739] [rosbag2_transport]: listening for topics... [info] [1593610059.082524279] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610059.082558997] [rosbag2_transport]: all requested topics are subscribed. stopping discovery...  ros2 bag record /chatter -o my_bag1 [info] [1593610057.356615405] [rosbag2_storage]: opened database 'my_bag1/my_bag1_0.db3' for read_write. [info] [1593610057.361745739] [rosbag2_transport]: listening for topics... [info] [1593610059.082524279] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610059.082558997] [rosbag2_transport]: all requested topics are subscribed. stopping discovery... note: you cant create 2 bags with the same name. if you try to do that you will get this kind of error: [error] [ros2bag]: output folder 'bag_name' already exists [error] [ros2bag]: output folder 'bag_name' already exists . you wont have this issue when using the default name (timestamp) but if you provide a custom name, make sure to modify it for every new bag. record multiple topics you can of course record any number of topics inside a ros2 bag. simply add all the topics you want as additional arguments. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 bag record /chatter /rosout -o my_bag2 [info] [1593610100. 897299450 ] [rosbag2_storage]: opened database 'my_bag2/my_bag2_0.db3' for read_write. [info] [1593610100. 903099986 ] [rosbag2_transport]: listening for topics... [info] [1593610100. 903640580 ] [rosbag2_transport]: subscribed to topic '/rosout' [info] [1593610101. 005902954 ] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610101. 005937045 ] [rosbag2_transport]: all requested topics are subscribed. stopping discovery...  ros2 bag record /chatter /rosout -o my_bag2 [info] [1593610100.897299450] [rosbag2_storage]: opened database 'my_bag2/my_bag2_0.db3' for read_write. [info] [1593610100.903099986] [rosbag2_transport]: listening for topics... [info] [1593610100.903640580] [rosbag2_transport]: subscribed to topic '/rosout' [info] [1593610101.005902954] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610101.005937045] [rosbag2_transport]: all requested topics are subscribed. stopping discovery...  ros2 bag record /chatter /rosout -o my_bag2 [info] [1593610100.897299450] [rosbag2_storage]: opened database 'my_bag2/my_bag2_0.db3' for read_write. [info] [1593610100.903099986] [rosbag2_transport]: listening for topics... [info] [1593610100.903640580] [rosbag2_transport]: subscribed to topic '/rosout' [info] [1593610101.005902954] [rosbag2_transport]: subscribed to topic '/chatter' [info] [1593610101.005937045] [rosbag2_transport]: all requested topics are subscribed. stopping discovery... here we chose to record /chatter as well as /rosout. all messages from both topics will be saved in the same database. record all the topics if you simply want to record all the topics in your graph, use the -a option. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 bag record -a -o my_bag3 [info] [1593610852. 326754453 ] [rosbag2_storage]: opened database 'my_bag3/my_bag3_0.db3' for read_write. [info] [1593610852. 334258726 ] [rosbag2_transport]: listening for topics... [info] [1593610852. 335043030 ] [rosbag2_transport]: subscribed to topic '/rosout' [info] [1593610852. 335619377 ] [rosbag2_transport]: subscribed to topic '/parameter_events' [info] [1593610852. 438503884 ] [rosbag2_transport]: subscribed to topic '/chatter'  ros2 bag record -a -o my_bag3 [info] [1593610852.326754453] [rosbag2_storage]: opened database 'my_bag3/my_bag3_0.db3' for read_write. [info] [1593610852.334258726] [rosbag2_transport]: listening for topics... [info] [1593610852.335043030] [rosbag2_transport]: subscribed to topic '/rosout' [info] [1593610852.335619377] [rosbag2_transport]: subscribed to topic '/parameter_events' [info] [1593610852.438503884] [rosbag2_transport]: subscribed to topic '/chatter'  ros2 bag record -a -o my_bag3 [info] [1593610852.326754453] [rosbag2_storage]: opened database 'my_bag3/my_bag3_0.db3' for read_write. [info] [1593610852.334258726] [rosbag2_transport]: listening for topics... [info] [1593610852.335043030] [rosbag2_transport]: subscribed to topic '/rosout' [info] [1593610852.335619377] [rosbag2_transport]: subscribed to topic '/parameter_events' [info] [1593610852.438503884] [rosbag2_transport]: subscribed to topic '/chatter' those 3 topics are the 3 topics we saw when executing ros2 topic list ros2 topic list . if you have 25 topics on your graph, the bag will record all 25 topics. thus make sure you know what youre doing when using the -a option. ros2 bag info  get a quick scan of the bag youve created ok, now you have created a few ros2 bags, and each one is stored inside a different folder. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ~/bags ls my_bag1 my_bag2 my_bag3 rosbag2_2020_07_01-15_26_58 ~/bags ls my_bag1 my_bag2 my_bag3 rosbag2_2020_07_01-15_26_58 ~/bags ls my_bag1 my_bag2 my_bag3 rosbag2_2020_07_01-15_26_58 you dont need to worry  whats inside the folders (metadata.yaml and sqlite3 files), the ros2 bag info ros2 bag info command gives you all the info you need. go to the folder where the bags are saved, and use ros2 bag info + name of the folder (=name of the bag). plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 bag info my_bag1/ files: my_bag1_0.db3 bag size: 16. 8 kib storage id: sqlite3 duration: 16.0s start: jul 1 2020 15 : 27 :39. 532 (1593610059. 532 ) end: jul 1 2020 15 : 27 :55. 533 (1593610075. 533 ) messages: 17 topic information: topic: /chatter | type: std_msgs/msg/string | count: 17 | serialization format: cdr  ros2 bag info my_bag1/ files: my_bag1_0.db3 bag size: 16.8 kib storage id: sqlite3 duration: 16.0s start: jul 1 2020 15:27:39.532 (1593610059.532) end: jul 1 2020 15:27:55.533 (1593610075.533) messages: 17 topic information: topic: /chatter | type: std_msgs/msg/string | count: 17 | serialization format: cdr  ros2 bag info my_bag1/ files: my_bag1_0.db3 bag size: 16.8 kib storage id: sqlite3 duration: 16.0s start: jul 1 2020 15:27:39.532 (1593610059.532) end: jul 1 2020 15:27:55.533 (1593610075.533) messages: 17 topic information: topic: /chatter | type: std_msgs/msg/string | count: 17 | serialization format: cdr this gives you a few useful info: name of the file(s) where the messages are stored + size and type of the database (here sqlite3). duration: simply how long you let the ros2 bag record ros2 bag record command run before pressing ctrl+c. start and end time: when you created the bag. messages: number of total messages in this bag. topic information: for each recorded topic, youll get the topic name, topic type (interface), and number of messages for this topic that were recorded and saved inside the bag. heres what youll see if you recorded multiple topics: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 bag info my_bag3 files: my_bag3_0.db3 bag size: 25. 7 kib storage id: sqlite3 duration: 10.47s start: jul 1 2020 15 : 40 :52. 483 (1593610852. 483 ) end: jul 1 2020 15 : 41 :02. 531 (1593610862. 531 ) messages: 32 topic information: topic: /chatter | type: std_msgs/msg/string | count: 11 | serialization format: cdr topic: /parameter_events | type: rcl_interfaces/msg/parameterevent | count: 0 | serialization format: cdr topic: /rosout | type: rcl_interfaces/msg/log | count: 21 | serialization format: cdr  ros2 bag info my_bag3 files: my_bag3_0.db3 bag size: 25.7 kib storage id: sqlite3 duration: 10.47s start: jul 1 2020 15:40:52.483 (1593610852.483) end: jul 1 2020 15:41:02.531 (1593610862.531) messages: 32 topic information: topic: /chatter | type: std_msgs/msg/string | count: 11 | serialization format: cdr topic: /parameter_events | type: rcl_interfaces/msg/parameterevent | count: 0 | serialization format: cdr topic: /rosout | type: rcl_interfaces/msg/log | count: 21 | serialization format: cdr  ros2 bag info my_bag3 files: my_bag3_0.db3 bag size: 25.7 kib storage id: sqlite3 duration: 10.47s start: jul 1 2020 15:40:52.483 (1593610852.483) end: jul 1 2020 15:41:02.531 (1593610862.531) messages: 32 topic information: topic: /chatter | type: std_msgs/msg/string | count: 11 | serialization format: cdr topic: /parameter_events | type: rcl_interfaces/msg/parameterevent | count: 0 | serialization format: cdr topic: /rosout | type: rcl_interfaces/msg/log | count: 21 | serialization format: cdr this gives you a good idea of whats inside. here, we recorded for a little bit more than 10 seconds, and we have 11 messages from /chatter + 21 messages from /rosout (logs) + 0 message from /parameter_events (because there were no parameter event). ros2 bag play  replay data exactly like it was first published to replay a bag, use: ros2 bag play + name of the folder (bag). plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 bag play my_bag3/ [info] [1593612209. 740592952 ] [rosbag2_storage]: opened database 'my_bag3//my_bag3_0.db3' for read_only.  ros2 bag play my_bag3/ [info] [1593612209.740592952] [rosbag2_storage]: opened database 'my_bag3//my_bag3_0.db3' for read_only.  ros2 bag play my_bag3/ [info] [1593612209.740592952] [rosbag2_storage]: opened database 'my_bag3//my_bag3_0.db3' for read_only. while the ros2 bag record ros2 bag record command created subscribers for each topic, the ros2 bag play ros2 bag play command will create a publisher for each recorded topic. all the messages will be played exactly like they were recorded, with the same data and same time between messages. what you can do is to stop the talker node youve launched at the beginning, and make sure you have no other node running. then, replay the bag, open a new terminal, and see the data with ros2 topic echo ros2 topic echo . plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 topic echo /chatter data: 'hello world: 1297' --- data: 'hello world: 1298' --- data: 'hello world: 1299' --- data: 'hello world: 1300' ---  ros2 topic echo /chatter data: 'hello world: 1297' --- data: 'hello world: 1298' --- data: 'hello world: 1299' --- data: 'hello world: 1300' ---  ros2 topic echo /chatter data: 'hello world: 1297' --- data: 'hello world: 1298' --- data: 'hello world: 1299' --- data: 'hello world: 1300' --- the 3 topics are all here, and messages will be published on the topic just like when they were recorded, as you can see with /chatter. and then, when all messages from the bag have been published, the bag will stop all its publishers and exit. so, if you recorded for 10.47 seconds, then the bag will publish messages for 10.47 seconds, no more. after that you can replay the bag again if you want to. conclusion on ros2 bags ros2 bags is a powerful feature of ros2. thanks to the ros2 bag ros2 bag command line tool you can easily use it with 3 simple commands: record, info and play. bags will allow you to save time on development, and possibly get better samples for testing your algorithms. final tip: make sure you record topics for long enough so that when you play the bag, you have the time to run your other nodes and your experiment. want to learn how to program with ros2? don't miss this opportunity: [new] ros 2 book or, learn with a video course want to learn ros2? [new] ros 2 book or, learn with a video course we use s on our website to give you the most relevant experience by remembering your preferences and repeat visits. by clicking accept all, you consent to the use of all the s. however, you may visit " settings" to provide a controlled consent.  settings accept all manage consent close  overview this website uses s to improve your experience while you navigate through the website. out of these, the s that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the ... necessary necessary always enabled necessary s are absolutely essential for the website to function properly. these s ensure basic functionalities and security features of the website, anonymously.  duration description lawinfo-checkbox-analytics 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "analytics". lawinfo-checkbox-functional 11 months the  is set by gdpr  consent to record the user consent for the s in the category "functional". lawinfo-checkbox-necessary 11 months this  is set by gdpr  consent plugin. the s is used to store the user consent for the s in the category "necessary". lawinfo-checkbox-others 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "other. lawinfo-checkbox-performance 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "performance". viewed__policy 11 months the  is set by the gdpr  consent plugin and is used to store whether or not user has consented to the use of s. it does not store any personal data. functional functional functional s help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features. performance performance performance s are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors. analytics analytics analytical s are used to understand how visitors interact with the website. these s help provide information on metrics the number of visitors, bounce rate, traffic source, etc.    s are used to provide visitors with relevant ads and  campaigns. these s track visitors across websites and collect information to provide customized ads. others others other uncategorized s are those that are being analyzed and have not been classified into a category as yet. save & accept learn ros2 in a week check out the course here