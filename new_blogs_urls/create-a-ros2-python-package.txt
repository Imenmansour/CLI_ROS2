skip to content in this tutorial youll learn how to create and setup a ros2 python package. ill show you every step, and explain the relation between files, where to write your nodes, how to add launch files, etc. >> heres a video tutorial that recaps the first part of this article. watch it as an additional resource: after watching the video, subscribe to the robotics back-end youtube channel so you dont miss the next tutorials! table of contents toggle setup your ros2 python package before you can create a ros2 python package, make sure you have : you want to learn ros2 efficiently? check out ros2 for beginners and learn ros2 step by step, in 1 week. correctly installed ros2, setup your environment (add source /opt/ros/ros_version/setup.bash source /opt/ros/ros_version/setup.bash in your .bashrc  dont forget to replace ros_version), and created a ros2 workspace (  mkdir -p ~/ros2_ws/src && cd ros2_ws/ && colcon build  mkdir -p ~/ros2_ws/src && cd ros2_ws/ && colcon build ). now, to create a python package: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  cd ~/ros2_ws/src/  ros2 pkg create my_python_pkg --build-type ament_python going to create a new package package name: my_python_pkg destination directory: /home/user/ros2_ws/src package format: 3 version: 0.0. 0 description: todo: package description maintainer: [ 'name <your@email.com>' ] licenses: [ 'todo: license declaration' ] build type: ament_python dependencies: [] creating folder ./my_python_pkg creating ./my_python_pkg/package.xml creating source folder creating folder ./my_python_pkg/my_python_pkg creating ./my_python_pkg/setup.py creating ./my_python_pkg/setup.cfg creating folder ./my_python_pkg/resource creating ./my_python_pkg/resource/my_python_pkg creating ./my_python_pkg/my_python_pkg/__init__.py creating folder ./my_python_pkg/test creating ./my_python_pkg/test/test_.py creating ./my_python_pkg/test/test_flake8.py creating ./my_python_pkg/test/test_pep257.py  cd ~/ros2_ws/src/  ros2 pkg create my_python_pkg --build-type ament_python going to create a new package package name: my_python_pkg destination directory: /home/user/ros2_ws/src package format: 3 version: 0.0.0 description: todo: package description maintainer: ['name <your@email.com>'] licenses: ['todo: license declaration'] build type: ament_python dependencies: [] creating folder ./my_python_pkg creating ./my_python_pkg/package.xml creating source folder creating folder ./my_python_pkg/my_python_pkg creating ./my_python_pkg/setup.py creating ./my_python_pkg/setup.cfg creating folder ./my_python_pkg/resource creating ./my_python_pkg/resource/my_python_pkg creating ./my_python_pkg/my_python_pkg/__init__.py creating folder ./my_python_pkg/test creating ./my_python_pkg/test/test_.py creating ./my_python_pkg/test/test_flake8.py creating ./my_python_pkg/test/test_pep257.py  cd ~/ros2_ws/src/  ros2 pkg create my_python_pkg --build-type ament_python going to create a new package package name: my_python_pkg destination directory: /home/user/ros2_ws/src package format: 3 version: 0.0.0 description: todo: package description maintainer: ['name <your@email.com>'] licenses: ['todo: license declaration'] build type: ament_python dependencies: [] creating folder ./my_python_pkg creating ./my_python_pkg/package.xml creating source folder creating folder ./my_python_pkg/my_python_pkg creating ./my_python_pkg/setup.py creating ./my_python_pkg/setup.cfg creating folder ./my_python_pkg/resource creating ./my_python_pkg/resource/my_python_pkg creating ./my_python_pkg/my_python_pkg/__init__.py creating folder ./my_python_pkg/test creating ./my_python_pkg/test/test_.py creating ./my_python_pkg/test/test_flake8.py creating ./my_python_pkg/test/test_pep257.py use ros2 pkg create ros2 pkg create followed by the name of your package. then add the option --build-type ament_python --build-type ament_python to precise that youre building a package specifically for python. a bunch of files will be created inside the new package. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter my_python_pkg/  my_python_pkg   __init__.py  package.xml  resource   my_python_pkg  setup.cfg  setup.py  test  test_.py  test_flake8.py  test_pep257.py my_python_pkg/  my_python_pkg   __init__.py  package.xml  resource   my_python_pkg  setup.cfg  setup.py  test  test_.py  test_flake8.py  test_pep257.py my_python_pkg/  my_python_pkg   __init__.py  package.xml  resource   my_python_pkg  setup.cfg  setup.py  test  test_.py  test_flake8.py  test_pep257.py explanation of files inside a ros2 python package heres a quick explanation for each file, and what you have to do to set them up. package.xml this file provides some information and required dependencies for the package. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> < package format = "3" > < name > my_python_pkg </ name > < version > 0.0.0 </ version > < description > todo: package description </ description > < maintainer email = "your@email.com" > name </ maintainer > < license > todo: license declaration </ license > < buildtool _depend > ament_python</buildtool_depend> < test _depend > ament_</test_depend> < test _depend > ament_flake8</test_depend> < test _depend > ament_pep257</test_depend> < test _depend > python3-pytest</test_depend> < export > < build _type > ament_python</build_type> </ export > </ package > <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format="3"> <name>my_python_pkg</name> <version>0.0.0</version> <description>todo: package description</description> <maintainer email="your@email.com">name</maintainer> <license>todo: license declaration</license> <buildtool_depend>ament_python</buildtool_depend> <test_depend>ament_</test_depend> <test_depend>ament_flake8</test_depend> <test_depend>ament_pep257</test_depend> <test_depend>python3-pytest</test_depend> <export> <build_type>ament_python</build_type> </export> </package> <?xml version="1.0"?> <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/xmlschema"?> <package format="3"> <name>my_python_pkg</name> <version>0.0.0</version> <description>todo: package description</description> <maintainer email="your@email.com">name</maintainer> <license>todo: license declaration</license> <buildtool_depend>ament_python</buildtool_depend> <test_depend>ament_</test_depend> <test_depend>ament_flake8</test_depend> <test_depend>ament_pep257</test_depend> <test_depend>python3-pytest</test_depend> <export> <build_type>ament_python</build_type> </export> </package> you need to manually edit lines 5-8. everything will work if you dont do it, but if you decide to share or publish your package, then those info are mandatory. version. description: a brief description of what your package does. maintainer: name and email of current maintainer. you can add multiple maintainer tags. also, you can add some author tags (with name and email) if you want to make the distinction between authors and maintainers. license: if you ever want to publish your package youll need a license (for example bsd, mit, gplv3). setup.py if you know what a cmakelists.txt file is, well the setup.py is basically the same but for python. when you compile your package it will tell what to install, where to install it, how to link dependencies, etc. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter from setuptools import setup package_name = 'my_python_pkg' setup ( name=package_name, version= '0.0.0' , packages= [ package_name ] , data_files= [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]) , ( 'share/' + package_name, [ 'package.xml' ]) , ] , install_requires= [ 'setuptools' ] , zip_safe= true , maintainer= 'name' , maintainer_email= 'your@email.com' , description= 'todo: package description' , license= 'todo: license declaration' , tests_require= [ 'pytest' ] , entry_points= { 'console_scripts' : [ ] , } , ) from setuptools import setup package_name = 'my_python_pkg' setup( name=package_name, version='0.0.0', packages=[package_name], data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), ], install_requires=['setuptools'], zip_safe=true, maintainer='name', maintainer_email='your@email.com', description='todo: package description', license='todo: license declaration', tests_require=['pytest'], entry_points={ 'console_scripts': [ ], }, ) from setuptools import setup package_name = 'my_python_pkg' setup( name=package_name, version='0.0.0', packages=[package_name], data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), ], install_requires=['setuptools'], zip_safe=true, maintainer='name', maintainer_email='your@email.com', description='todo: package description', license='todo: license declaration', tests_require=['pytest'], entry_points={ 'console_scripts': [ ], }, ) well come back to this file later in this tutorial. for now you can see that the 4 lines we had to setup in the package.xml are also here. modify those lines if you intent to share or publish the package. setup.cfg this file will tell where the scripts will be installed. right now you have nothing to change. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter [develop] script-dir= base /lib/my_python_pkg [install] install-scripts= base /lib/my_python_pkg [develop] script-dir=base/lib/my_python_pkg [install] install-scripts=base/lib/my_python_pkg [develop] script-dir=base/lib/my_python_pkg [install] install-scripts=base/lib/my_python_pkg <package_name>/ folder this folder will be different every time, because it will always have the same name as your package. in this case the name of the package is my_python_pkg, so the name of the folder is also my_python_pkg. you will create all your ros2 python nodes in this folder. note that it already contains an empty __init__.py file. resource/<package_name> file this is needed for ros2 to find your package. for our example the file name is resource/my_python_pkg. nothing to change here for now. test/ folder this folder, as its name suggests, is for testing. when you create a package it already contains 3 python files. compile your package to compile your package, go into your workspace directory and execute colcon build colcon build . well tell ros2 to only build our python package with the option --packages-select --packages-select . plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  cd ~/ros2_ws  colcon build --packages-select my_python_pkg starting >>> my_python_pkg finished <<< my_python_pkg [0.52s] summary: 1 package finished [0.65s]  cd ~/ros2_ws  colcon build --packages-select my_python_pkg starting >>> my_python_pkg finished <<< my_python_pkg [0.52s] summary: 1 package finished [0.65s]  cd ~/ros2_ws  colcon build --packages-select my_python_pkg starting >>> my_python_pkg finished <<< my_python_pkg [0.52s] summary: 1 package finished [0.65s] note: when working with python, you may think that you dont need to compile anything. thats true, you can directly execute the python files that you create without colcon build colcon build . but compiling a package is much more than that: it will install the scripts in a place where they can find other modules from other packages, where they can be found by other scripts. it will also allow you to start a node with ros2 run ros2 run , add it in a launch file, pass parameters to it, etc. now that you know how to create and compile a package, lets make a few examples to see what you can do with this package. build a python node inside a ros2 python package lets see how to build, install, and use a python node, with our freshly created ros2 python package. create a file named my_python_node.py in the my_python_pkg/ folder. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  cd ~/ros2_ws/src/my_python_pkg/my_python_pkg/  touch my_python_node.py  cd ~/ros2_ws/src/my_python_pkg/my_python_pkg/  touch my_python_node.py  cd ~/ros2_ws/src/my_python_pkg/my_python_pkg/  touch my_python_node.py heres a simple python code you can use for testing purposes. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter import rclpy from rclpy.node import node class mypythonnode ( node ) : def __init__ ( self ) : super () . __init__ ( "my_node_name" ) self. get_logger () . info ( "this node just says 'hello'" ) def main ( args= none ) : rclpy. init ( args=args ) node = mypythonnode () rclpy. spin ( node ) node. destroy_node () rclpy. shutdown () if __name__ == "__main__" : main () import rclpy from rclpy.node import node class mypythonnode(node): def __init__(self): super().__init__("my_node_name") self.get_logger().info("this node just says 'hello'") def main(args=none): rclpy.init(args=args) node = mypythonnode() rclpy.spin(node) node.destroy_node() rclpy.shutdown() if __name__ == "__main__": main() import rclpy from rclpy.node import node class mypythonnode(node): def __init__(self): super().__init__("my_node_name") self.get_logger().info("this node just says 'hello'") def main(args=none): rclpy.init(args=args) node = mypythonnode() rclpy.spin(node) node.destroy_node() rclpy.shutdown() if __name__ == "__main__": main() the node will just print a message on startup, and then it will spin indefinitely until you kill the node. if you want to know more  the code, check out how to write a ros2 python node . now that we have a python file, we need to add an entry point in the setup.py file. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ... entry_points= { 'console_scripts' : [ 'test = my_python_pkg.my_python_node:main' ] , ... ... entry_points={ 'console_scripts': [ 'test = my_python_pkg.my_python_node:main' ], ... ... entry_points={ 'console_scripts': [ 'test = my_python_pkg.my_python_node:main' ], ... find the entry_points dictionary and add one line in the console_scripts array. some explanations: test will be the name of the executable after the script is installed. my_python_pkg.my_python_node:main means: execute the main() function inside the my_python_node.py file, inside the my_python_pkg. so, the entry point is the main(). if you want to start your node with a different function, make sure to set the function name accordingly in setup.py. dont mix everything: executable name != file name != node name. those are 3 different things. in our example: test is the executable, my_python_node is the file, and my_node_name is the node name. note that you can also choose to use the same name for all 3. the executable script will be installed in ~/ros2_ws/install/my_python_pkg/lib/my_python_pkg/. this is the folder specified in the setup.cfg file. one more thing you need to do: add a < depend > rclpy </ depend > <depend>rclpy</depend> tag in package.xml, because we use a dependency to rclpy in our code. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ... < buildtool _depend > ament_python</buildtool_depend> < depend > rclpy </ depend > ... ... <buildtool_depend>ament_python</buildtool_depend> <depend>rclpy</depend> ... ... <buildtool_depend>ament_python</buildtool_depend> <depend>rclpy</depend> ... you only need to do this once per dependency for the whole package. if you create another node youll need to update setup.py, but not package.xml if you dont have any new dependency. and now you can compile your package with colcon build --packages-select my_python_pkg colcon build --packages-select my_python_pkg . then, open a new terminal, source your ros2 workspace and execute the node with ros2 run ros2 run . plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  ros2 run my_python_pkg test [info] [my_node_name]: this node just says 'hello'  ros2 run my_python_pkg test [info] [my_node_name]: this node just says 'hello'  ros2 run my_python_pkg test [info] [my_node_name]: this node just says 'hello' install other files in a ros2 python package you can virtually put everything you want in a ros2 package. there is no hard rule  what to do, but some conventions make it easier for you. lets see how to install launch files and yaml config files. those are among the most common things youll add to packages when you develop your ros2 application. launch files create a launch/ folder at the root of your package. youll put all your launch files inside this folder. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  cd ~/ros2_ws/src/my_python_pkg/  mkdir launch  cd ~/ros2_ws/src/my_python_pkg/  mkdir launch  cd ~/ros2_ws/src/my_python_pkg/  mkdir launch now, to install those launch files, you need to modify setup.py. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter import os from glob import glob from setuptools import setup ... data_files= [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]) , ( 'share/' + package_name, [ 'package.xml' ]) , ( os.path. join ( 'share' , package_name, 'launch' ) , glob ( 'launch/*.launch.py' )) , ] , ... import os from glob import glob from setuptools import setup ... data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), (os.path.join('share', package_name, 'launch'), glob('launch/*.launch.py')), ], ... import os from glob import glob from setuptools import setup ... data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), (os.path.join('share', package_name, 'launch'), glob('launch/*.launch.py')), ], ... for our example, with package name my_python_pkg, this will install all launch files from the launch/ folder, into ~/ros2_ws/install/my_python_pkg/share/my_python_pkg/launch/. note: you only need to modify setup.py once. after that, every time you add a launch file youll just need to compile your package so that the file is installed, thats it. then, to start a launch file: ros2 launch package_name launch_file_name ros2 launch package_name launch_file_name . yaml config files you can follow the same technique to install yaml config files . create a config/ folder at the root of your package. youll put all your yaml files here. plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter  cd ~/ros2_ws/src/my_python_pkg/  mkdir config  cd ~/ros2_ws/src/my_python_pkg/  mkdir config  cd ~/ros2_ws/src/my_python_pkg/  mkdir config to install yaml files, again, modify setup.py. add a new line in the data_files array: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter ... data_files= [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]) , ( 'share/' + package_name, [ 'package.xml' ]) , ( os.path. join ( 'share' , package_name, 'launch' ) , glob ( 'launch/*.launch.py' )) , ( os.path. join ( 'share' , package_name, 'config' ) , glob ( 'config/*.yaml' )) , ] , ... ... data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), (os.path.join('share', package_name, 'launch'), glob('launch/*.launch.py')), (os.path.join('share', package_name, 'config'), glob('config/*.yaml')), ], ... ... data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), (os.path.join('share', package_name, 'launch'), glob('launch/*.launch.py')), (os.path.join('share', package_name, 'config'), glob('config/*.yaml')), ], ... still with the my_python_pkg example, the yaml files will be installed into ~/ros2_ws/install/my_python_pkg/share/my_python_pkg/config/. you can follow this technique to add any other folder into the install/ folder of your ros2 workspace. ros2 python package: going further in this tutorial you have seen how to setup a ros2 python package, and how to make it grow with nodes, launch files, yaml files. heres the final package architecture after all the additions we made: plain text copy to clipboard open code in new window enlighterjs 3 syntax highlighter my_python_pkg/  config   some_params.yaml  launch   my_application.launch.py  my_python_pkg   __init__.py   my_python_node.py  package.xml  resource   my_python_pkg  setup.cfg  setup.py  test  test_.py  test_flake8.py  test_pep257.py my_python_pkg/  config   some_params.yaml  launch   my_application.launch.py  my_python_pkg   __init__.py   my_python_node.py  package.xml  resource   my_python_pkg  setup.cfg  setup.py  test  test_.py  test_flake8.py  test_pep257.py my_python_pkg/  config   some_params.yaml  launch   my_application.launch.py  my_python_pkg   __init__.py   my_python_node.py  package.xml  resource   my_python_pkg  setup.cfg  setup.py  test  test_.py  test_flake8.py  test_pep257.py understanding how to work with ros2 packages is important so that youre not stuck whenever you want to add something to your application. to go further from here, check out how to: create a ros2 cpp package . create a ros2 package for both python and cpp . want to learn how to program with ros2? don't miss this opportunity: [new] ros 2 book or, learn with a video course want to learn ros2? [new] ros 2 book or, learn with a video course we use s on our website to give you the most relevant experience by remembering your preferences and repeat visits. by clicking accept all, you consent to the use of all the s. however, you may visit " settings" to provide a controlled consent.  settings accept all manage consent close  overview this website uses s to improve your experience while you navigate through the website. out of these, the s that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the ... necessary necessary always enabled necessary s are absolutely essential for the website to function properly. these s ensure basic functionalities and security features of the website, anonymously.  duration description lawinfo-checkbox-analytics 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "analytics". lawinfo-checkbox-functional 11 months the  is set by gdpr  consent to record the user consent for the s in the category "functional". lawinfo-checkbox-necessary 11 months this  is set by gdpr  consent plugin. the s is used to store the user consent for the s in the category "necessary". lawinfo-checkbox-others 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "other. lawinfo-checkbox-performance 11 months this  is set by gdpr  consent plugin. the  is used to store the user consent for the s in the category "performance". viewed__policy 11 months the  is set by the gdpr  consent plugin and is used to store whether or not user has consented to the use of s. it does not store any personal data. functional functional functional s help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features. performance performance performance s are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors. analytics analytics analytical s are used to understand how visitors interact with the website. these s help provide information on metrics the number of visitors, bounce rate, traffic source, etc.    s are used to provide visitors with relevant ads and  campaigns. these s track visitors across websites and collect information to provide customized ads. others others other uncategorized s are those that are being analyzed and have not been classified into a category as yet. save & accept learn ros2 in a week check out the course here