[ros2 in 5 mins] 004  what is a ros2 node? ros1 and ros2 nodes compared written by bayode aderinola  ros2 tutorials  20/11/2018 hello ros enthusiasts! in this post, well see what a ros(2) node is, and the similarities and differences between ros1 and ros2 nodes. well do this using both practicals and theory, practicals first! lets go! setup for the practicals i believe passionate engineers like to get their hands dirty as much as they like to have solid theoretical foundations. and, since i get to decide here ?, well start with the latter. now, the required setup for practicals (installation of ros and other packages) can take a lot of time but, thankfully, we have an easy way out  rosds . with this online tool, you will have access to ros-ready computers (both ros1 and ros2) within your browser in a few seconds. if you dont have one already, you can create a free account here . ps: when you create a project (rosject) on rosds , be sure to select the ubuntu 16.04 + ros kinetic + gazebo 7 configuration. if you have access to local installations of ros1 and ros2, and you dont want to embrace the online revolution yet, then you can also use your local installations. when i say terminal in this post, that means picking the shell app from the rosds tools menu or opening a terminal on your local pc. practicals  ros nodes in action for a practical-oriented topic, weve had enough theory already; lets get down to it and see ros nodes in action! fire up a terminal and run the command that displays a list of nodes in ros1. your output might be different, but you should have a list of items like this: user:~ rosnode list /rosapi /rosbridge_websocket /rosout /web_video_server take note of the items listed above and then run the following command in another terminal: user:~ rosrun turtlesim turtlesim_node [ info] [1548414518.301208787]: starting turtlesim with nodename /turtlesim [ info] [1548414518.309271531]: spawning turtle [turtle1] atx=[5.544445], y=[5.544445], theta=[0.000000] to see the turtle on rosds , pick the graphical tools app from the tools menu to see your cute turtle: well done! now go back to the previous terminal and re-run the command that displays a list of nodes in ros1. now you should see an extra node (/turtlesim) in your list. user:~ rosnode list /rosapi /rosbridge_websocket /rosout /turtlesim /web_video_server so far so good, but all that is ros1, so now lets #goros2! in another terminal, run the command shown. that should bring up a ros2-ready docker machine, waiting for your command: user:~ docker run -it osrf/ros2:bouncy-desktop unable to find image 'osrf/ros2:bouncy-desktop' locally bouncy-desktop: pulling from osrf/ros2 ... root@43a5e0d0c74c:/# as we also need two terminals for the ros2 tinkertoons, spin up a second terminal and run the same command as above. in the first ros2 terminal run the following commands that display the list of nodes in ros2. observe the outputs (the -a switch shows hidden nodes). root@43a5e0d0c74c:/# ros2 node list root@43a5e0d0c74c:/# ros2 node list -a _ros2cli_node_daemon_0 basically, no user-created node is running now. lets change that: in the second ros2 terminal, run: root@e12db20394fb:/# ros2 run demo_nodes_cpp talker [info] [talker]: publishing: 'hello world: 1' [info] [talker]: publishing: 'hello world: 2' [info] [talker]: publishing: 'hello world: 3' [info] [talker]: publishing: 'hello world: 4' now get back to the first ros2 terminal and rerun the last command. you should see an addition node (talker) displayed, thanks to the talker(tive) program we just ran: root@43a5e0d0c74c:/# ros2 node list -a _ros2cli_node_daemon_0 talker and we are all done for the practicals! but whats the catch? at this point, we could use some theory. next! so, what is a ros(2) node? lets hear from the horses mouth: a node is a process that performs computation.  http://wiki.ros.org/nodes a node really isnt much more than an executable file within a ros package. ros nodes use a ros client library to communicate with other nodes.  http://wiki.ros.org/ros/tutorials/understandingnodes as we saw from the practicals, the turtlesim_node and talker executables displayed a turtle and some text on-screen, respectively, by performing computations and communicating with other nodes. for one, they both communicated with nodes responsible for displaying output. so, in both ros1 and ros2, a node is essentially the same thing. done. now you know what a ros(2) node is. well examine the similarities and different between ros1 and ros2 nodes in the next section. ros1 and ros2 nodes compared from the previous sections, weve already seen that ros1 and ros2 nodes are essentially the same. you may also have seen from the practical session that the commands for running and displaying a list of nodes in ros1 and ros2 are similar, even if they are not the same. in this section, well look briefly at some fundamental similarities and differences between ros1 and ros2 nodes. the table below summarizes these. black text represents similarities while red text represents differences. ros2 node ros1 node what is it? an executable using ros2 to communicate with other nodes an executable using ros1 to communicate with other nodes (de)advertises itself and discovers other nodes using a distributed discovery process (which does not depend on a single node) the ros1 master (a single node) after discovery, communicates with other nodes peer to peer peer to peer uses these client libraries (among others) rclcpp = c++ client library rclpy = python client library roscpp = c++ client library rospy = python client library and thats it! summary ros nodes are the executables that make things happen in a ros system, and they are essentially the same for both ros1 and ros2, even if there are some differences. if youre already familiar with ros1, you can hit the ground running with ros2, with just a few differences to master. video version if you prefer see the audio-visual version of this post, weve got you covered. just click to watch the video below. feedback did you like this post? whatever the case, please leave a comment in the comments section below, so we can interact and learn from each other. if you want to learn  other ros topics, please let us know on the comments area and we will do a post or video  it. keep pushing your ros(2) learning! topics: ros2 check out these related posts how to become a robotics developer may 26, 2018 updated: july 26, 2023 robotics needs developers! robotics needs software engineers and software... read more 130. the open source robotics alliance apr 8, 2024 i would like to dedicate this episode to all the ros developers out there who are thinking and... read more 129. ros2ai jan 29, 2024 i would like to dedicate this episode to all the ros developers who believe that chatgpt or... read more  older entries 1 comment anonymous on 29/08/2021 at 9:41 am can we have more than one nodes in ros1? reply submit a comment cancel reply your email address will not be published. comment name email website save my name, email, and website in this browser for the next time i comment. submit comment Î´ this site uses akismet to reduce spam. learn how your comment data is processed . pin it on pinterest share this twitter linkedin reddit facebook gmail