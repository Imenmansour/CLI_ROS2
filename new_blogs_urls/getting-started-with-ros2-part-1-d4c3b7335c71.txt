open in app sign up sign in write sign up sign in getting started with ros2  part 1 sharad maheshwari  follow published in schmiedeone  4 min read  jan 6, 2022 -- 1 listen share note: this series assumes that you have working knowledge of ros1. we focus on getting to know ros2, which is what the robotics community is moving towards. here are part 2 and part 3 of this series. if youre new to robot operating system as a concept, check out this post to read what ros actually is. hello there! since you already have working knowledge of ros1, for brevity, were gonna jump straight to the differences between ros1 and ros2. how is ros2 different  a summary! 1. third party middleware ros1 vs ros2: dds ros1 has its own middleware which uses a network stack to send information from a node to the right socket, which is received by the middleware again to send information to the right node (over-simplification). ros2 ditched the middle and now uses data distribution service(dds), a third-party middleware that is a reliable industry standard. 2. no rosmaster rosmaster is a service facilitating two nodes to find each other (if they wish to communicate). this is followed by them connecting to each other directly. if the rosmaster dies during the process, these nodes will still be connected, but no new nodes can join the communication network. in ros1, each node needs to know the location of the master (even when the system is run on multiple machines). ros2 did away with the rosmaster, and nodes can find each other directly. 3. shared codebase for cpp and python rcl ros has support for two languages, cpp and python and the underlying implementation differs in places. for instance, each subscriber has its own thread in python, but not in cpp. all that is true for ros1, but ros2 has the same shared c implementation. this common codebase is exposed through ros client libraries apis in c++ and python. 4. multiple ros nodes in a process ros1 does not allow multiple ros nodes in one process. that changes in ros2 5. python build requirement changing python files in ros1 doesnt require you to build the project. ros2 needs you to build the project again, which suuuuuuuucks!  6. action services action services werent a part of core ros1 libraries (but actionlib). ros2 core libraries have action servers 7. windows support ros2 is supported by windows! well, i sincerely hope youre using linux though  8. changed launch infrastructure ros1 primarily uses xml-based launch files. ros2 has a python launch system supporting ordering constraints why move to ros2? this is a hard question. there is some inertia for the move, mainly because ros2 community is still not as big as ros1. this leads to less online development support and longer development time. but most prominent open-source ros1 packages are or will be at their end of life support soon. future-proofing projects and upskilling are the two reasons to make the move. ros2 setup phase 1: installing ros2 we are using ubuntu focal (20.04.3 lts) in this lesson, which supports ros2 galactic. heres a link that explains ros2 installation really well. they do a better job than me to explain installation :) phase 2: test ros2 to test our ros2 setup, we do the following: 1. source the terminal source /opt/ros/ros_distro/setup.bash as mentioned before, i will use galactic instead of ros_distro henceforth 2. run demo listener and talker nodes: we will use demo_nodes_cpp package which is already present in /opt/ros_distro/lib/ run the following command in the sourced terminal: ros2 run demo_nodes_cpp listener & ros2 run demo_nodes_cpp talker you will see the following: if yes, we can be sure  our ros2 setup. woot woot! were ready to start developing in ros2. let the game begin  head over to part 2 in this series here . stay awesome, sharad robotics robot operating system ros artificial intelligence ai follow written by sharad maheshwari 662 followers  editor for schmiedeone building robots follow help status  careers press    text to speech teams